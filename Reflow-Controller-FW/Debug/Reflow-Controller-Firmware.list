
Reflow-Controller-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800c7e0  0800c7e0  0001c7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc94  0800cc94  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc94  0800cc94  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc94  0800cc94  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc94  0800cc94  0001cc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc98  0800cc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800cc9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  20000360  0800cffc  00020360  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001614  0800cffc  00021614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7ab  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003894  00000000  00000000  0003ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0003e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  0003f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db0d  00000000  00000000  00040158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132f7  00000000  00000000  0005dc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a568a  00000000  00000000  00070f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001165e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f3c  00000000  00000000  0011663c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7c8 	.word	0x0800c7c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0800c7c8 	.word	0x0800c7c8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b094      	sub	sp, #80	; 0x50
 8000bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fc9c 	bl	800150a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f857 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 f903 	bl	8000de0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bda:	f000 f8c3 	bl	8000d64 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000bde:	f008 f957 	bl	8008e90 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be8:	4820      	ldr	r0, [pc, #128]	; (8000c6c <main+0xa4>)
 8000bea:	f000 ffab 	bl	8001b44 <HAL_GPIO_WritePin>
	setStatusLED(0, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fa84 	bl	8001100 <setStatusLED>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		int result = readTemperature();
 8000bf8:	f000 f954 	bl	8000ea4 <readTemperature>
 8000bfc:	6478      	str	r0, [r7, #68]	; 0x44
		if(result == -1) {
 8000bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d030      	beq.n	8000c68 <main+0xa0>
			continue;
		}

		char temperatureMsg[64];
		sprintf(temperatureMsg, "%s %.2f \n", TEMP_MSG, currentOvenTemp);
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <main+0xa8>)
 8000c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0c:	1d38      	adds	r0, r7, #4
 8000c0e:	e9cd 2300 	strd	r2, r3, [sp]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <main+0xac>)
 8000c14:	4918      	ldr	r1, [pc, #96]	; (8000c78 <main+0xb0>)
 8000c16:	f009 fbbb 	bl	800a390 <siprintf>
		CDC_Transmit_FS((uint8_t *) temperatureMsg, strlen(temperatureMsg));
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fae1 	bl	80001e4 <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fa06 	bl	800903c <CDC_Transmit_FS>

		if(buzzOn) {
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <main+0xb4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <main+0x98>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <main+0xa4>)
 8000c40:	f000 ff80 	bl	8001b44 <HAL_GPIO_WritePin>
			HAL_Delay(buzzLengthInMillis);
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <main+0xb8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fcd3 	bl	80015f4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <main+0xa4>)
 8000c56:	f000 ff75 	bl	8001b44 <HAL_GPIO_WritePin>
			buzzOn = 0;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <main+0xb4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
		}

		HAL_Delay(UPDATE_TIME);
 8000c60:	20fa      	movs	r0, #250	; 0xfa
 8000c62:	f000 fcc7 	bl	80015f4 <HAL_Delay>
 8000c66:	e7c7      	b.n	8000bf8 <main+0x30>
			continue;
 8000c68:	bf00      	nop
	while (1) {
 8000c6a:	e7c5      	b.n	8000bf8 <main+0x30>
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	20000380 	.word	0x20000380
 8000c74:	0800c7e0 	.word	0x0800c7e0
 8000c78:	0800c7e8 	.word	0x0800c7e8
 8000c7c:	20000390 	.word	0x20000390
 8000c80:	20000394 	.word	0x20000394

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a4      	sub	sp, #144	; 0x90
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c8e:	2244      	movs	r2, #68	; 0x44
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f008 ff0a 	bl	8009aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2234      	movs	r2, #52	; 0x34
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f008 fefc 	bl	8009aac <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cb4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb8:	f002 fc3a 	bl	8003530 <HAL_PWREx_ControlVoltageScaling>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000cc2:	f000 fa5f 	bl	8001184 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd0:	2340      	movs	r3, #64	; 0x40
 8000cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000cdc:	23b0      	movs	r3, #176	; 0xb0
 8000cde:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cee:	230a      	movs	r3, #10
 8000cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fc79 	bl	80035fc <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d10:	f000 fa38 	bl	8001184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 f8ca 	bl	8003ec8 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d3a:	f000 fa23 	bl	8001184 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d42:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000d44:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 fa89 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d58:	f000 fa14 	bl	8001184 <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3790      	adds	r7, #144	; 0x90
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <MX_SPI2_Init+0x78>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d9c:	2218      	movs	r2, #24
 8000d9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000dc6:	f003 fbd3 	bl	8004570 <HAL_SPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000dd0:	f000 f9d8 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200005c8 	.word	0x200005c8
 8000ddc:	40003800 	.word	0x40003800

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_GPIO_Init+0xbc>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	210f      	movs	r1, #15
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f000 fe7d 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000e52:	f000 fe77 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e56:	230f      	movs	r3, #15
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 fcf6 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000e8e:	f000 fce7 	bl	8001860 <HAL_GPIO_Init>

}
 8000e92:	bf00      	nop
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <readTemperature>:

/* USER CODE BEGIN 4 */
int readTemperature() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b090      	sub	sp, #64	; 0x40
 8000ea8:	af00      	add	r7, sp, #0
	//Receive a 32-bit transfer from the thermocouple ADC chip
	char spi_buf[4];
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb0:	4854      	ldr	r0, [pc, #336]	; (8001004 <readTemperature+0x160>)
 8000eb2:	f000 fe47 	bl	8001b44 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef result = HAL_SPI_Receive(&hspi2, (uint8_t *)&spi_buf, 4, 100);
 8000eb6:	1d39      	adds	r1, r7, #4
 8000eb8:	2364      	movs	r3, #100	; 0x64
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4852      	ldr	r0, [pc, #328]	; (8001008 <readTemperature+0x164>)
 8000ebe:	f003 fbfa 	bl	80046b6 <HAL_SPI_Receive>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ece:	484d      	ldr	r0, [pc, #308]	; (8001004 <readTemperature+0x160>)
 8000ed0:	f000 fe38 	bl	8001b44 <HAL_GPIO_WritePin>

	if(result != HAL_OK) {
 8000ed4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <readTemperature+0x3e>
		return -1;
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	e08c      	b.n	8000ffc <readTemperature+0x158>
	}

	//First 16 bits are for the thermocouple's temp, the last 16 are for the sensor's temp
	int thermocouple_data = spi_buf[0] << 8 | spi_buf[1];
 8000ee2:	793b      	ldrb	r3, [r7, #4]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	797a      	ldrb	r2, [r7, #5]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
	int ambient_data = spi_buf[2] << 8 | spi_buf[3];
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34

	if(thermocouple_data & THERM_FAULT_MASK || ambient_data & IC_FAULT_MASK)
 8000ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <readTemperature+0x66>
 8000f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <readTemperature+0x6c>
		return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e075      	b.n	8000ffc <readTemperature+0x158>

	int ovenWhole = thermocouple_data >> THERM_WHOLE_SHIFT;
 8000f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f12:	111b      	asrs	r3, r3, #4
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
	double ovenFrac = ((thermocouple_data & THERM_FRAC_MASK) >> THERM_FRAC_SHIFT) * 0.25;
 8000f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f18:	109b      	asrs	r3, r3, #2
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb10 	bl	8000544 <__aeabi_i2d>
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <readTemperature+0x168>)
 8000f2a:	f7ff fb75 	bl	8000618 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int ambientWhole = ambient_data >> IC_WHOLE_SHIFT;
 8000f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f38:	121b      	asrs	r3, r3, #8
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
	double ambientFrac = ((ambient_data & IC_FRAC_MASK) >> IC_FRAC_SHIFT) * 0.0625;
 8000f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3e:	111b      	asrs	r3, r3, #4
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fafd 	bl	8000544 <__aeabi_i2d>
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <readTemperature+0x16c>)
 8000f50:	f7ff fb62 	bl	8000618 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double newOvenTemp = ovenWhole + ovenFrac;
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f7ff faf1 	bl	8000544 <__aeabi_i2d>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f6a:	f7ff f99f 	bl	80002ac <__adddf3>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double newBoardTemp = ambientWhole + ambientFrac;
 8000f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f78:	f7ff fae4 	bl	8000544 <__aeabi_i2d>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f84:	f7ff f992 	bl	80002ac <__adddf3>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(newOvenTemp < MIN_TEMP || newOvenTemp > MAX_TEMP
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <readTemperature+0x170>)
 8000f96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f9a:	f7ff fdaf 	bl	8000afc <__aeabi_dcmplt>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11d      	bne.n	8000fe0 <readTemperature+0x13c>
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <readTemperature+0x174>)
 8000faa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fae:	f7ff fdc3 	bl	8000b38 <__aeabi_dcmpgt>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d113      	bne.n	8000fe0 <readTemperature+0x13c>
			|| newBoardTemp < MIN_TEMP || newBoardTemp > MAX_TEMP)
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <readTemperature+0x170>)
 8000fbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fc2:	f7ff fd9b 	bl	8000afc <__aeabi_dcmplt>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d109      	bne.n	8000fe0 <readTemperature+0x13c>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <readTemperature+0x174>)
 8000fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd6:	f7ff fdaf 	bl	8000b38 <__aeabi_dcmpgt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <readTemperature+0x142>
		return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	e00a      	b.n	8000ffc <readTemperature+0x158>

	currentOvenTemp = newOvenTemp;
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <readTemperature+0x178>)
 8000fe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fec:	e9c1 2300 	strd	r2, r3, [r1]
	currentBoardTemp = newBoardTemp;
 8000ff0:	490b      	ldr	r1, [pc, #44]	; (8001020 <readTemperature+0x17c>)
 8000ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ff6:	e9c1 2300 	strd	r2, r3, [r1]
	return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3740      	adds	r7, #64	; 0x40
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	48000400 	.word	0x48000400
 8001008:	200005c8 	.word	0x200005c8
 800100c:	3fd00000 	.word	0x3fd00000
 8001010:	3fb00000 	.word	0x3fb00000
 8001014:	40240000 	.word	0x40240000
 8001018:	40790000 	.word	0x40790000
 800101c:	20000380 	.word	0x20000380
 8001020:	20000388 	.word	0x20000388

08001024 <onUsbReceive>:

void onUsbReceive() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	if(usbBuffer == NULL) {
		return;
	}

//	char response[64] = RESPONSE_INVALID;
	if(!strcmp(usbBuffer, COMMAND_HEAT)) {
 8001028:	492f      	ldr	r1, [pc, #188]	; (80010e8 <onUsbReceive+0xc4>)
 800102a:	4830      	ldr	r0, [pc, #192]	; (80010ec <onUsbReceive+0xc8>)
 800102c:	f7ff f8d0 	bl	80001d0 <strcmp>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10b      	bne.n	800104e <onUsbReceive+0x2a>
		setStatusLED(1, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2001      	movs	r0, #1
 800103c:	f000 f860 	bl	8001100 <setStatusLED>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2108      	movs	r1, #8
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f000 fd7c 	bl	8001b44 <HAL_GPIO_WritePin>
 800104c:	e04a      	b.n	80010e4 <onUsbReceive+0xc0>
//		strcpy(response, RESPONSE_HEAT);
	}
	else if(!strcmp(usbBuffer, COMMAND_IDLE)) {
 800104e:	4928      	ldr	r1, [pc, #160]	; (80010f0 <onUsbReceive+0xcc>)
 8001050:	4826      	ldr	r0, [pc, #152]	; (80010ec <onUsbReceive+0xc8>)
 8001052:	f7ff f8bd 	bl	80001d0 <strcmp>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10b      	bne.n	8001074 <onUsbReceive+0x50>
		setStatusLED(0, 0, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	2100      	movs	r1, #0
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f84d 	bl	8001100 <setStatusLED>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2108      	movs	r1, #8
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106e:	f000 fd69 	bl	8001b44 <HAL_GPIO_WritePin>
 8001072:	e037      	b.n	80010e4 <onUsbReceive+0xc0>
//		strcpy(response, RESPONSE_IDLE);
	}
	else if(!strcmp(usbBuffer, COMMAND_END)) {
 8001074:	491f      	ldr	r1, [pc, #124]	; (80010f4 <onUsbReceive+0xd0>)
 8001076:	481d      	ldr	r0, [pc, #116]	; (80010ec <onUsbReceive+0xc8>)
 8001078:	f7ff f8aa 	bl	80001d0 <strcmp>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10f      	bne.n	80010a2 <onUsbReceive+0x7e>
		setStatusLED(0, 1, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f83a 	bl	8001100 <setStatusLED>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2108      	movs	r1, #8
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f000 fd56 	bl	8001b44 <HAL_GPIO_WritePin>
		buzz(LONGBUZZ);
 8001098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109c:	f000 f85e 	bl	800115c <buzz>
 80010a0:	e020      	b.n	80010e4 <onUsbReceive+0xc0>
//		strcpy(response, RESPONSE_END);
	}
	else if(!strcmp(usbBuffer, COMMAND_CONNECTED)) {
 80010a2:	4915      	ldr	r1, [pc, #84]	; (80010f8 <onUsbReceive+0xd4>)
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <onUsbReceive+0xc8>)
 80010a6:	f7ff f893 	bl	80001d0 <strcmp>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <onUsbReceive+0xa0>
		setStatusLED(0, 1, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2101      	movs	r1, #1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f823 	bl	8001100 <setStatusLED>
		buzz(SHORTBUZZ);
 80010ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010be:	f000 f84d 	bl	800115c <buzz>
 80010c2:	e00f      	b.n	80010e4 <onUsbReceive+0xc0>
//		strcpy(response, RESPONSE_CONNECTED);
	}
	else if(!strcmp(usbBuffer, COMMAND_DISCONNECTED)) {
 80010c4:	490d      	ldr	r1, [pc, #52]	; (80010fc <onUsbReceive+0xd8>)
 80010c6:	4809      	ldr	r0, [pc, #36]	; (80010ec <onUsbReceive+0xc8>)
 80010c8:	f7ff f882 	bl	80001d0 <strcmp>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d108      	bne.n	80010e4 <onUsbReceive+0xc0>
		setStatusLED(0, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f812 	bl	8001100 <setStatusLED>
		buzz(SHORTBUZZ);
 80010dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010e0:	f000 f83c 	bl	800115c <buzz>

//	char confirmationMsg[64];
//	sprintf(confirmationMsg, "Received: '%s'", usbBuffer);
//	CDC_Transmit_FS((uint8_t *) confirmationMsg, strlen(confirmationMsg));
//	CDC_Transmit_FS((uint8_t *) response, strlen(response));
}
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0800c7f4 	.word	0x0800c7f4
 80010ec:	2000062c 	.word	0x2000062c
 80010f0:	0800c7fc 	.word	0x0800c7fc
 80010f4:	0800c804 	.word	0x0800c804
 80010f8:	0800c80c 	.word	0x0800c80c
 80010fc:	0800c818 	.word	0x0800c818

08001100 <setStatusLED>:

void setStatusLED(int r, int g, int b) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, r ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf14      	ite	ne
 8001112:	2301      	movne	r3, #1
 8001114:	2300      	moveq	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	2104      	movs	r1, #4
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f000 fd10 	bl	8001b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, g ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf14      	ite	ne
 800112a:	2301      	movne	r3, #1
 800112c:	2300      	moveq	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	2102      	movs	r1, #2
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f000 fd04 	bl	8001b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, b ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf14      	ite	ne
 8001142:	2301      	movne	r3, #1
 8001144:	2300      	moveq	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	2101      	movs	r1, #1
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f000 fcf8 	bl	8001b44 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <buzz>:

void buzz(int millisOn) {
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	buzzOn = 1;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <buzz+0x20>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
	buzzLengthInMillis = millisOn;
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <buzz+0x24>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000390 	.word	0x20000390
 8001180:	20000394 	.word	0x20000394

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800118c:	e7fe      	b.n	800118c <Error_Handler+0x8>
	...

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x44>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_MspInit+0x44>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6613      	str	r3, [r2, #96]	; 0x60
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_MspInit+0x44>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x44>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x44>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x44>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_SPI_MspInit+0x7c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d128      	bne.n	800124c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_SPI_MspInit+0x80>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <HAL_SPI_MspInit+0x80>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6593      	str	r3, [r2, #88]	; 0x58
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_SPI_MspInit+0x80>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_SPI_MspInit+0x80>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_SPI_MspInit+0x80>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_SPI_MspInit+0x80>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800122a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800123c:	2305      	movs	r3, #5
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_SPI_MspInit+0x84>)
 8001248:	f000 fb0a 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40003800 	.word	0x40003800
 8001258:	40021000 	.word	0x40021000
 800125c:	48000400 	.word	0x48000400

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 f982 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USB_IRQHandler+0x10>)
 80012ba:	f000 fd8f 	bl	8001ddc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20001310 	.word	0x20001310

080012c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_kill>:

int _kill(int pid, int sig)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012e2:	f008 fbab 	bl	8009a3c <__errno>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2216      	movs	r2, #22
 80012ea:	601a      	str	r2, [r3, #0]
	return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_exit>:

void _exit (int status)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffe7 	bl	80012d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800130a:	e7fe      	b.n	800130a <_exit+0x12>

0800130c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800131e:	f3af 8000 	nop.w
 8001322:	4601      	mov	r1, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf0      	blt.n	800131e <_read+0x12>
	}

return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e009      	b.n	800136c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf1      	blt.n	8001358 <_write+0x12>
	}
	return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_close>:

int _close(int file)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	return -1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a6:	605a      	str	r2, [r3, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_isatty>:

int _isatty(int file)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	return 1;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f008 fb10 	bl	8009a3c <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000a000 	.word	0x2000a000
 8001448:	00000400 	.word	0x00000400
 800144c:	20000398 	.word	0x20000398
 8001450:	20001618 	.word	0x20001618

08001454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <SystemInit+0x5c>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <SystemInit+0x5c>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <SystemInit+0x60>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <SystemInit+0x60>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <SystemInit+0x60>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <SystemInit+0x60>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <SystemInit+0x60>)
 8001480:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001484:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <SystemInit+0x60>)
 800148c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001490:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <SystemInit+0x60>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <SystemInit+0x60>)
 8001498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SystemInit+0x60>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	40021000 	.word	0x40021000

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ffca 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014c2:	e003      	b.n	80014cc <LoopCopyDataInit>

080014c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014ca:	3104      	adds	r1, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014cc:	480a      	ldr	r0, [pc, #40]	; (80014f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80014d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014d4:	d3f6      	bcc.n	80014c4 <CopyDataInit>
	ldr	r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014d8:	e002      	b.n	80014e0 <LoopFillZerobss>

080014da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014dc:	f842 3b04 	str.w	r3, [r2], #4

080014e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <LoopForever+0x16>)
	cmp	r2, r3
 80014e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014e4:	d3f9      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f008 faaf 	bl	8009a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff fb6d 	bl	8000bc8 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80014f4:	0800cc9c 	.word	0x0800cc9c
	ldr	r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014fc:	20000360 	.word	0x20000360
	ldr	r2, =_sbss
 8001500:	20000360 	.word	0x20000360
	ldr	r3, = _ebss
 8001504:	20001614 	.word	0x20001614

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>

0800150a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f961 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f80e 	bl	800153c <HAL_InitTick>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	e001      	b.n	8001530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152c:	f7ff fe30 	bl	8001190 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001530:	79fb      	ldrb	r3, [r7, #7]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_InitTick+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_InitTick+0x70>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_InitTick+0x6c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f96d 	bl	8001846 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d809      	bhi.n	800158c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 f937 	bl	80017f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_InitTick+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e007      	b.n	800159c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e004      	b.n	800159c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e001      	b.n	800159c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000066c 	.word	0x2000066c

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	2000066c 	.word	0x2000066c

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffde 	bl	80015dc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff29 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff3e 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff31 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e14e      	b.n	8001b0e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8140 	beq.w	8001b08 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d00b      	beq.n	80018a8 <HAL_GPIO_Init+0x48>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d007      	beq.n	80018a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189c:	2b11      	cmp	r3, #17
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b12      	cmp	r3, #18
 80018a6:	d130      	bne.n	800190a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 0201 	and.w	r2, r3, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0xea>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b12      	cmp	r3, #18
 8001948:	d123      	bne.n	8001992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	08da      	lsrs	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	6939      	ldr	r1, [r7, #16]
 800198e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0203 	and.w	r2, r3, #3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 809a 	beq.w	8001b08 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_GPIO_Init+0x2cc>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	4a54      	ldr	r2, [pc, #336]	; (8001b2c <HAL_GPIO_Init+0x2cc>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6613      	str	r3, [r2, #96]	; 0x60
 80019e0:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x2cc>)
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ec:	4a50      	ldr	r2, [pc, #320]	; (8001b30 <HAL_GPIO_Init+0x2d0>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_Init+0x1e0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <HAL_GPIO_Init+0x2d4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1dc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a45      	ldr	r2, [pc, #276]	; (8001b38 <HAL_GPIO_Init+0x2d8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1d8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a44      	ldr	r2, [pc, #272]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1d4>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a34:	2307      	movs	r3, #7
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a40:	2300      	movs	r3, #0
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a52:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a60:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a84:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aae:	4a24      	ldr	r2, [pc, #144]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad8:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f aea9 	bne.w	8001870 <HAL_GPIO_Init+0x10>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	48000c00 	.word	0x48000c00
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b76:	b08b      	sub	sp, #44	; 0x2c
 8001b78:	af06      	add	r7, sp, #24
 8001b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e104      	b.n	8001d90 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f007 fba8 	bl	80092f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 faa5 	bl	80050fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	687e      	ldr	r6, [r7, #4]
 8001bba:	466d      	mov	r5, sp
 8001bbc:	f106 0410 	add.w	r4, r6, #16
 8001bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	602b      	str	r3, [r5, #0]
 8001bc8:	1d33      	adds	r3, r6, #4
 8001bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f003 fa6d 	bl	80050ac <USB_CoreInit>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0d5      	b.n	8001d90 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 faa1 	bl	8005132 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e04c      	b.n	8001c90 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	3301      	adds	r3, #1
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	b298      	uxth	r0, r3
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	3336      	adds	r3, #54	; 0x36
 8001c34:	4602      	mov	r2, r0
 8001c36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	3303      	adds	r3, #3
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3338      	adds	r3, #56	; 0x38
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	333c      	adds	r3, #60	; 0x3c
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	3340      	adds	r3, #64	; 0x40
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3ad      	bcc.n	8001bf6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e044      	b.n	8001d2a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	3301      	adds	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3b5      	bcc.n	8001ca0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	687e      	ldr	r6, [r7, #4]
 8001d3c:	466d      	mov	r5, sp
 8001d3e:	f106 0410 	add.w	r4, r6, #16
 8001d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	602b      	str	r3, [r5, #0]
 8001d4a:	1d33      	adds	r3, r6, #4
 8001d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4e:	6838      	ldr	r0, [r7, #0]
 8001d50:	f003 f9fc 	bl	800514c <USB_DevInit>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e014      	b.n	8001d90 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f001 fb9d 	bl	80034be <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 fb7d 	bl	8007488 <USB_DevDisconnect>

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_PCD_Start+0x16>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e012      	b.n	8001dd4 <HAL_PCD_Start+0x3c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 f987 	bl	80050ce <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f005 fb48 	bl	800745a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 fb62 	bl	80074b2 <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df8:	d102      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fb5b 	bl	80024b6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 fb54 	bl	80074b2 <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d112      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f007 faff 	bl	8009432 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e34:	2100      	movs	r1, #0
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f91e 	bl	8002078 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f005 fb36 	bl	80074b2 <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e50:	d10b      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e64:	b292      	uxth	r2, r2
 8001e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 fb1f 	bl	80074b2 <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7e:	d10b      	bne.n	8001e98 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fb08 	bl	80074b2 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eac:	d133      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0204 	bic.w	r2, r2, #4
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0208 	bic.w	r2, r2, #8
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f007 fd4e 	bl	8009994 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f007 fad3 	bl	80094a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f10:	b292      	uxth	r2, r2
 8001f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 fac9 	bl	80074b2 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f2a:	d126      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f56:	b292      	uxth	r2, r2
 8001f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0204 	orr.w	r2, r2, #4
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f007 fa7b 	bl	8009470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 fa97 	bl	80074b2 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b80      	cmp	r3, #128	; 0x80
 8001f8c:	d13f      	bne.n	800200e <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d12b      	bne.n	8002008 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0204 	orr.w	r2, r2, #4
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ffe:	2101      	movs	r1, #1
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f007 fcc7 	bl	8009994 <HAL_PCDEx_LPM_Callback>
 8002006:	e002      	b.n	800200e <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f007 fa31 	bl	8009470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f005 fa4d 	bl	80074b2 <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002022:	d10e      	bne.n	8002042 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002036:	b292      	uxth	r2, r2
 8002038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f007 f9ea 	bl	8009416 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f005 fa33 	bl	80074b2 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002056:	d10b      	bne.n	8002070 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800206a:	b292      	uxth	r2, r2
 800206c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_PCD_SetAddress+0x1a>
 800208e:	2302      	movs	r3, #2
 8002090:	e013      	b.n	80020ba <HAL_PCD_SetAddress+0x42>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 f9c1 	bl	8007432 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	4608      	mov	r0, r1
 80020cc:	4611      	mov	r1, r2
 80020ce:	461a      	mov	r2, r3
 80020d0:	4603      	mov	r3, r0
 80020d2:	70fb      	strb	r3, [r7, #3]
 80020d4:	460b      	mov	r3, r1
 80020d6:	803b      	strh	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da0e      	bge.n	8002106 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
 8002104:	e00e      	b.n	8002124 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 0207 	and.w	r2, r3, #7
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002130:	883a      	ldrh	r2, [r7, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	78ba      	ldrb	r2, [r7, #2]
 800213a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d004      	beq.n	800214e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800214e:	78bb      	ldrb	r3, [r7, #2]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d102      	bne.n	800215a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_PCD_EP_Open+0xa6>
 8002164:	2302      	movs	r3, #2
 8002166:	e00e      	b.n	8002186 <HAL_PCD_EP_Open+0xc4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 f80a 	bl	8005190 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002184:	7afb      	ldrb	r3, [r7, #11]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800219a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	da0e      	bge.n	80021c0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	705a      	strb	r2, [r3, #1]
 80021be:	e00e      	b.n	80021de <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 0207 	and.w	r2, r3, #7
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_PCD_EP_Close+0x6a>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00e      	b.n	8002216 <HAL_PCD_EP_Close+0x88>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fb30 	bl	800586c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	460b      	mov	r3, r1
 800222c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 0207 	and.w	r2, r3, #7
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2200      	movs	r2, #0
 800225c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800225e:	7afb      	ldrb	r3, [r7, #11]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	b2da      	uxtb	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6979      	ldr	r1, [r7, #20]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 fce3 	bl	8005c46 <USB_EPStartXfer>
 8002280:	e005      	b.n	800228e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fcdc 	bl	8005c46 <USB_EPStartXfer>
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	f003 0207 	and.w	r2, r3, #7
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	460b      	mov	r3, r1
 80022d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2201      	movs	r2, #1
 8002312:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	b2da      	uxtb	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	4618      	mov	r0, r3
 8002332:	f003 fc88 	bl	8005c46 <USB_EPStartXfer>
 8002336:	e005      	b.n	8002344 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6979      	ldr	r1, [r7, #20]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fc81 	bl	8005c46 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 0207 	and.w	r2, r3, #7
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d901      	bls.n	800236c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e04c      	b.n	8002406 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0e      	bge.n	8002392 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	705a      	strb	r2, [r3, #1]
 8002390:	e00c      	b.n	80023ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_PCD_EP_SetStall+0x7e>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e01c      	b.n	8002406 <HAL_PCD_EP_SetStall+0xb8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 ff2a 	bl	8007234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f005 f86b 	bl	80074d2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d901      	bls.n	800242c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e040      	b.n	80024ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800242c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002430:	2b00      	cmp	r3, #0
 8002432:	da0e      	bge.n	8002452 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	705a      	strb	r2, [r3, #1]
 8002450:	e00e      	b.n	8002470 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 0207 	and.w	r2, r3, #7
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_EP_ClrStall+0x82>
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <HAL_PCD_EP_ClrStall+0xa0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 ff19 	bl	80072d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b08e      	sub	sp, #56	; 0x38
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024be:	e2d6      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80024d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 815b 	bne.w	8002796 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d150      	bne.n	800258c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	81fb      	strh	r3, [r7, #14]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250a:	b29b      	uxth	r3, r3
 800250c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3328      	adds	r3, #40	; 0x28
 8002512:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4413      	add	r3, r2
 800252e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	441a      	add	r2, r3
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800254a:	2100      	movs	r1, #0
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f006 ff48 	bl	80093e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8287 	beq.w	8002a6e <PCD_EP_ISR_Handler+0x5b8>
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 8282 	bne.w	8002a6e <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002576:	b2da      	uxtb	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b292      	uxth	r2, r2
 800257e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800258a:	e270      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800259c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d032      	beq.n	800260c <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f004 ffc4 	bl	800756e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025f2:	4013      	ands	r3, r2
 80025f4:	823b      	strh	r3, [r7, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	8a3a      	ldrh	r2, [r7, #16]
 80025fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002600:	b292      	uxth	r2, r2
 8002602:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f006 febf 	bl	8009388 <HAL_PCD_SetupStageCallback>
 800260a:	e230      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800260c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002610:	2b00      	cmp	r3, #0
 8002612:	f280 822c 	bge.w	8002a6e <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29a      	uxth	r2, r3
 800261e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002622:	4013      	ands	r3, r2
 8002624:	83bb      	strh	r3, [r7, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	8bba      	ldrh	r2, [r7, #28]
 800262c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002630:	b292      	uxth	r2, r2
 8002632:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4413      	add	r3, r2
 800264e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d019      	beq.n	8002698 <PCD_EP_ISR_Handler+0x1e2>
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	6959      	ldr	r1, [r3, #20]
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800267c:	b29b      	uxth	r3, r3
 800267e:	f004 ff76 	bl	800756e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	441a      	add	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002690:	2100      	movs	r1, #0
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f006 fe8a 	bl	80093ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 81e2 	bne.w	8002a6e <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d112      	bne.n	80026f8 <PCD_EP_ISR_Handler+0x242>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	e02f      	b.n	8002758 <PCD_EP_ISR_Handler+0x2a2>
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b3e      	cmp	r3, #62	; 0x3e
 80026fe:	d813      	bhi.n	8002728 <PCD_EP_ISR_Handler+0x272>
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <PCD_EP_ISR_Handler+0x264>
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	3301      	adds	r3, #1
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	b29b      	uxth	r3, r3
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	b29a      	uxth	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	e017      	b.n	8002758 <PCD_EP_ISR_Handler+0x2a2>
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <PCD_EP_ISR_Handler+0x28c>
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	3b01      	subs	r3, #1
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	b29b      	uxth	r3, r3
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	b29b      	uxth	r3, r3
 800274a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002752:	b29a      	uxth	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002768:	827b      	strh	r3, [r7, #18]
 800276a:	8a7b      	ldrh	r3, [r7, #18]
 800276c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002770:	827b      	strh	r3, [r7, #18]
 8002772:	8a7b      	ldrh	r3, [r7, #18]
 8002774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002778:	827b      	strh	r3, [r7, #18]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	8a7b      	ldrh	r3, [r7, #18]
 8002780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002790:	b29b      	uxth	r3, r3
 8002792:	8013      	strh	r3, [r2, #0]
 8002794:	e16b      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f280 80e4 	bge.w	800297a <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027c8:	4013      	ands	r3, r2
 80027ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027e0:	b292      	uxth	r2, r2
 80027e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	7b1b      	ldrb	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d120      	bne.n	8002844 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4413      	add	r3, r2
 800281c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002826:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8083 	beq.w	8002936 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	6959      	ldr	r1, [r3, #20]
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	88da      	ldrh	r2, [r3, #6]
 800283c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800283e:	f004 fe96 	bl	800756e <USB_ReadPMA>
 8002842:	e078      	b.n	8002936 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d108      	bne.n	800285e <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800284c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800284e:	461a      	mov	r2, r3
 8002850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f919 	bl	8002a8a <HAL_PCD_EP_DB_Receive>
 8002858:	4603      	mov	r3, r0
 800285a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800285c:	e06b      	b.n	8002936 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002878:	847b      	strh	r3, [r7, #34]	; 0x22
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	441a      	add	r2, r3
 8002888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800288a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800289a:	b29b      	uxth	r3, r3
 800289c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01f      	beq.n	80028f8 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028dc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d028      	beq.n	8002936 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	6959      	ldr	r1, [r3, #20]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	891a      	ldrh	r2, [r3, #8]
 80028f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f2:	f004 fe3c 	bl	800756e <USB_ReadPMA>
 80028f6:	e01e      	b.n	8002936 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	4413      	add	r3, r2
 8002912:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800291e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	6959      	ldr	r1, [r3, #20]
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	895a      	ldrh	r2, [r3, #10]
 8002930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002932:	f004 fe1c 	bl	800756e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800293c:	441a      	add	r2, r3
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002948:	441a      	add	r2, r3
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <PCD_EP_ISR_Handler+0x4aa>
 8002956:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d206      	bcs.n	800296e <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f006 fd20 	bl	80093ac <HAL_PCD_DataOutStageCallback>
 800296c:	e005      	b.n	800297a <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002974:	4618      	mov	r0, r3
 8002976:	f003 f966 	bl	8005c46 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800297a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b00      	cmp	r3, #0
 8002982:	d074      	beq.n	8002a6e <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8002984:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	843b      	strh	r3, [r7, #32]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	8c3b      	ldrh	r3, [r7, #32]
 80029c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	78db      	ldrb	r3, [r3, #3]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d144      	bne.n	8002a62 <PCD_EP_ISR_Handler+0x5ac>
 80029d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d13f      	bne.n	8002a62 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a06:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	8bfb      	ldrh	r3, [r7, #30]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d906      	bls.n	8002a20 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	8bfb      	ldrh	r3, [r7, #30]
 8002a18:	1ad2      	subs	r2, r2, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	619a      	str	r2, [r3, #24]
 8002a1e:	e002      	b.n	8002a26 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f006 fcd4 	bl	80093e2 <HAL_PCD_DataInStageCallback>
 8002a3a:	e018      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	8bfb      	ldrh	r3, [r7, #30]
 8002a42:	441a      	add	r2, r3
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	8bfb      	ldrh	r3, [r7, #30]
 8002a4e:	441a      	add	r2, r3
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 f8f3 	bl	8005c46 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a60:	e005      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a64:	461a      	mov	r2, r3
 8002a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f917 	bl	8002c9c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f6ff ad20 	blt.w	80024c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3738      	adds	r7, #56	; 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07c      	beq.n	8002b9c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	8b7b      	ldrh	r3, [r7, #26]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d306      	bcc.n	8002ae0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	8b7b      	ldrh	r3, [r7, #26]
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	619a      	str	r2, [r3, #24]
 8002ade:	e002      	b.n	8002ae6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d123      	bne.n	8002b36 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	833b      	strh	r3, [r7, #24]
 8002b0a:	8b3b      	ldrh	r3, [r7, #24]
 8002b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b10:	833b      	strh	r3, [r7, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	8b3b      	ldrh	r3, [r7, #24]
 8002b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01f      	beq.n	8002b80 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	82fb      	strh	r3, [r7, #22]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	441a      	add	r2, r3
 8002b6a:	8afb      	ldrh	r3, [r7, #22]
 8002b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8085 	beq.w	8002c92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6959      	ldr	r1, [r3, #20]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	891a      	ldrh	r2, [r3, #8]
 8002b94:	8b7b      	ldrh	r3, [r7, #26]
 8002b96:	f004 fcea 	bl	800756e <USB_ReadPMA>
 8002b9a:	e07a      	b.n	8002c92 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	8b7b      	ldrh	r3, [r7, #26]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d306      	bcc.n	8002bda <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	8b7b      	ldrh	r3, [r7, #26]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	619a      	str	r2, [r3, #24]
 8002bd8:	e002      	b.n	8002be0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d123      	bne.n	8002c30 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	83fb      	strh	r3, [r7, #30]
 8002c04:	8bfb      	ldrh	r3, [r7, #30]
 8002c06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c0a:	83fb      	strh	r3, [r7, #30]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	8bfb      	ldrh	r3, [r7, #30]
 8002c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11f      	bne.n	8002c7a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	83bb      	strh	r3, [r7, #28]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	8bbb      	ldrh	r3, [r7, #28]
 8002c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c7a:	8b7b      	ldrh	r3, [r7, #26]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	6959      	ldr	r1, [r3, #20]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	895a      	ldrh	r2, [r3, #10]
 8002c8c:	8b7b      	ldrh	r3, [r7, #26]
 8002c8e:	f004 fc6e 	bl	800756e <USB_ReadPMA>
    }
  }

  return count;
 8002c92:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0a2      	sub	sp, #136	; 0x88
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 81c5 	beq.w	8003040 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d907      	bls.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf2:	1ad2      	subs	r2, r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	619a      	str	r2, [r3, #24]
 8002cf8:	e002      	b.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 80b9 	bne.w	8002e7c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d126      	bne.n	8002d60 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	4413      	add	r3, r2
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	00da      	lsls	r2, r3, #3
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	4413      	add	r3, r2
 8002d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	e01a      	b.n	8002d96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d116      	bne.n	8002d96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	4413      	add	r3, r2
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	00da      	lsls	r2, r3, #3
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	4413      	add	r3, r2
 8002d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	2200      	movs	r2, #0
 8002d94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d126      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x156>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4413      	add	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	00da      	lsls	r2, r3, #3
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	801a      	strh	r2, [r3, #0]
 8002df0:	e017      	b.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x186>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d113      	bne.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x186>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	4413      	add	r3, r2
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	00da      	lsls	r2, r3, #3
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	4413      	add	r3, r2
 8002e16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f006 fada 	bl	80093e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 82d2 	beq.w	80033de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e54:	827b      	strh	r3, [r7, #18]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	8a7b      	ldrh	r3, [r7, #18]
 8002e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]
 8002e7a:	e2b0      	b.n	80033de <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d021      	beq.n	8002eca <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	441a      	add	r2, r3
 8002eb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	f040 8284 	bne.w	80033de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ede:	441a      	add	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eec:	441a      	add	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d309      	bcc.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0a:	1ad2      	subs	r2, r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	621a      	str	r2, [r3, #32]
 8002f10:	e015      	b.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002f1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f28:	e009      	b.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d155      	bne.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x356>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	4413      	add	r3, r2
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	00da      	lsls	r2, r3, #3
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	4413      	add	r3, r2
 8002f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d112      	bne.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x2fe>
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	801a      	strh	r2, [r3, #0]
 8002f98:	e047      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9e:	d811      	bhi.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x328>
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x31a>
 8002fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e032      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_PCD_EP_DB_Transmit+0x33e>
 8002fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	e01b      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d117      	bne.n	800302a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003008:	b29b      	uxth	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300e:	4413      	add	r3, r2
 8003010:	643b      	str	r3, [r7, #64]	; 0x40
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	00da      	lsls	r2, r3, #3
 8003018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301a:	4413      	add	r3, r2
 800301c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003024:	b29a      	uxth	r2, r3
 8003026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003028:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6959      	ldr	r1, [r3, #20]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	891a      	ldrh	r2, [r3, #8]
 8003036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003038:	b29b      	uxth	r3, r3
 800303a:	f004 fa56 	bl	80074ea <USB_WritePMA>
 800303e:	e1ce      	b.n	80033de <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	4413      	add	r3, r2
 800305a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003064:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003070:	429a      	cmp	r2, r3
 8003072:	d307      	bcc.n	8003084 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800307c:	1ad2      	subs	r2, r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	619a      	str	r2, [r3, #24]
 8003082:	e002      	b.n	800308a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80c4 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d126      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0x44e>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	4413      	add	r3, r2
 80030b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	00da      	lsls	r2, r3, #3
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	4413      	add	r3, r2
 80030be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d2:	801a      	strh	r2, [r3, #0]
 80030d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	e01a      	b.n	8003120 <HAL_PCD_EP_DB_Transmit+0x484>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	785b      	ldrb	r3, [r3, #1]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d116      	bne.n	8003120 <HAL_PCD_EP_DB_Transmit+0x484>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	677b      	str	r3, [r7, #116]	; 0x74
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003100:	b29b      	uxth	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	4413      	add	r3, r2
 8003108:	677b      	str	r3, [r7, #116]	; 0x74
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	00da      	lsls	r2, r3, #3
 8003110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003112:	4413      	add	r3, r2
 8003114:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003118:	673b      	str	r3, [r7, #112]	; 0x70
 800311a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800311c:	2200      	movs	r2, #0
 800311e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	67bb      	str	r3, [r7, #120]	; 0x78
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	785b      	ldrb	r3, [r3, #1]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d12f      	bne.n	800318e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003146:	4413      	add	r3, r2
 8003148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	00da      	lsls	r2, r3, #3
 8003152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003156:	4413      	add	r3, r2
 8003158:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800315c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800316c:	b29a      	uxth	r2, r3
 800316e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003172:	801a      	strh	r2, [r3, #0]
 8003174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003184:	b29a      	uxth	r2, r3
 8003186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800318a:	801a      	strh	r2, [r3, #0]
 800318c:	e017      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x522>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d113      	bne.n	80031be <HAL_PCD_EP_DB_Transmit+0x522>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a4:	4413      	add	r3, r2
 80031a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	00da      	lsls	r2, r3, #3
 80031ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031b0:	4413      	add	r3, r2
 80031b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031ba:	2200      	movs	r2, #0
 80031bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f006 f90c 	bl	80093e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 8104 	bne.w	80033de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]
 800321a:	e0e0      	b.n	80033de <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d121      	bne.n	800326a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 80b4 	bne.w	80033de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800327e:	441a      	add	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800328c:	441a      	add	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	429a      	cmp	r2, r3
 800329c:	d309      	bcc.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032aa:	1ad2      	subs	r2, r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	621a      	str	r2, [r3, #32]
 80032b0:	e015      	b.n	80032de <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 80032ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032c8:	e009      	b.n	80032de <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	667b      	str	r3, [r7, #100]	; 0x64
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d155      	bne.n	8003398 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003300:	4413      	add	r3, r2
 8003302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	00da      	lsls	r2, r3, #3
 800330a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330c:	4413      	add	r3, r2
 800330e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003312:	65bb      	str	r3, [r7, #88]	; 0x58
 8003314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003316:	2b00      	cmp	r3, #0
 8003318:	d112      	bne.n	8003340 <HAL_PCD_EP_DB_Transmit+0x6a4>
 800331a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003324:	b29a      	uxth	r2, r3
 8003326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003338:	b29a      	uxth	r2, r3
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	e044      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	2b3e      	cmp	r3, #62	; 0x3e
 8003344:	d811      	bhi.n	800336a <HAL_PCD_EP_DB_Transmit+0x6ce>
 8003346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	657b      	str	r3, [r7, #84]	; 0x54
 800334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_PCD_EP_DB_Transmit+0x6c0>
 8003356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003358:	3301      	adds	r3, #1
 800335a:	657b      	str	r3, [r7, #84]	; 0x54
 800335c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335e:	b29b      	uxth	r3, r3
 8003360:	029b      	lsls	r3, r3, #10
 8003362:	b29a      	uxth	r2, r3
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	e02f      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x72e>
 800336a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	657b      	str	r3, [r7, #84]	; 0x54
 8003370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_PCD_EP_DB_Transmit+0x6e4>
 800337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337c:	3b01      	subs	r3, #1
 800337e:	657b      	str	r3, [r7, #84]	; 0x54
 8003380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003382:	b29b      	uxth	r3, r3
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	b29b      	uxth	r3, r3
 8003388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003390:	b29a      	uxth	r2, r3
 8003392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	e018      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d114      	bne.n	80033ca <HAL_PCD_EP_DB_Transmit+0x72e>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ae:	4413      	add	r3, r2
 80033b0:	667b      	str	r3, [r7, #100]	; 0x64
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	00da      	lsls	r2, r3, #3
 80033b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ba:	4413      	add	r3, r2
 80033bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033c0:	663b      	str	r3, [r7, #96]	; 0x60
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6959      	ldr	r1, [r3, #20]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	895a      	ldrh	r2, [r3, #10]
 80033d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f004 f886 	bl	80074ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f8:	823b      	strh	r3, [r7, #16]
 80033fa:	8a3b      	ldrh	r3, [r7, #16]
 80033fc:	f083 0310 	eor.w	r3, r3, #16
 8003400:	823b      	strh	r3, [r7, #16]
 8003402:	8a3b      	ldrh	r3, [r7, #16]
 8003404:	f083 0320 	eor.w	r3, r3, #32
 8003408:	823b      	strh	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	8a3b      	ldrh	r3, [r7, #16]
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3788      	adds	r7, #136	; 0x88
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	817b      	strh	r3, [r7, #10]
 8003446:	4613      	mov	r3, r2
 8003448:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800344a:	897b      	ldrh	r3, [r7, #10]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4413      	add	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e009      	b.n	8003482 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800346e:	897a      	ldrh	r2, [r7, #10]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	b29a      	uxth	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	80da      	strh	r2, [r3, #6]
 8003496:	e00b      	b.n	80034b0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2201      	movs	r2, #1
 800349c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <HAL_PWREx_GetVoltageRange+0x18>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000

08003530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353e:	d130      	bne.n	80035a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d038      	beq.n	80035c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003556:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2232      	movs	r2, #50	; 0x32
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0c9b      	lsrs	r3, r3, #18
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003574:	e002      	b.n	800357c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b01      	subs	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d102      	bne.n	8003590 <HAL_PWREx_ControlVoltageScaling+0x60>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f2      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359c:	d110      	bne.n	80035c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e00f      	b.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	d007      	beq.n	80035c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035b8:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40007000 	.word	0x40007000
 80035d4:	20000000 	.word	0x20000000
 80035d8:	431bde83 	.word	0x431bde83

080035dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ea:	6053      	str	r3, [r2, #4]
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40007000 	.word	0x40007000

080035fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f000 bc56 	b.w	8003ebc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003610:	4ba1      	ldr	r3, [pc, #644]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800361a:	4b9f      	ldr	r3, [pc, #636]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80e6 	beq.w	80037fe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <HAL_RCC_OscConfig+0x4c>
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	f040 808d 	bne.w	800375a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b01      	cmp	r3, #1
 8003644:	f040 8089 	bne.w	800375a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003648:	4b93      	ldr	r3, [pc, #588]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <HAL_RCC_OscConfig+0x66>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f000 bc2d 	b.w	8003ebc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003666:	4b8c      	ldr	r3, [pc, #560]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_RCC_OscConfig+0x80>
 8003672:	4b89      	ldr	r3, [pc, #548]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367a:	e005      	b.n	8003688 <HAL_RCC_OscConfig+0x8c>
 800367c:	4b86      	ldr	r3, [pc, #536]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003688:	4293      	cmp	r3, r2
 800368a:	d224      	bcs.n	80036d6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fd87 	bl	80041a4 <RCC_SetFlashLatencyFromMSIRange>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f000 bc0d 	b.w	8003ebc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a2:	4b7d      	ldr	r3, [pc, #500]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7c      	ldr	r2, [pc, #496]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036a8:	f043 0308 	orr.w	r3, r3, #8
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b7a      	ldr	r3, [pc, #488]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	4977      	ldr	r1, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c0:	4b75      	ldr	r3, [pc, #468]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	4972      	ldr	r1, [pc, #456]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
 80036d4:	e025      	b.n	8003722 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036d6:	4b70      	ldr	r3, [pc, #448]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6f      	ldr	r2, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	496a      	ldr	r1, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036f4:	4b68      	ldr	r3, [pc, #416]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	4965      	ldr	r1, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fd46 	bl	80041a4 <RCC_SetFlashLatencyFromMSIRange>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e3cc      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003722:	f000 fcb3 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b5b      	ldr	r3, [pc, #364]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	495a      	ldr	r1, [pc, #360]	; (800389c <HAL_RCC_OscConfig+0x2a0>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_RCC_OscConfig+0x2a4>)
 8003740:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003742:	4b58      	ldr	r3, [pc, #352]	; (80038a4 <HAL_RCC_OscConfig+0x2a8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fef8 	bl	800153c <HAL_InitTick>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d052      	beq.n	80037fc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	e3b0      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d032      	beq.n	80037c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003762:	4b4d      	ldr	r3, [pc, #308]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a4c      	ldr	r2, [pc, #304]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800376e:	f7fd ff35 	bl	80015dc <HAL_GetTick>
 8003772:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003776:	f7fd ff31 	bl	80015dc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e399      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003788:	4b43      	ldr	r3, [pc, #268]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003794:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a3f      	ldr	r2, [pc, #252]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800379a:	f043 0308 	orr.w	r3, r3, #8
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	493a      	ldr	r1, [pc, #232]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037b2:	4b39      	ldr	r3, [pc, #228]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	4935      	ldr	r1, [pc, #212]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
 80037c6:	e01a      	b.n	80037fe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037c8:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a32      	ldr	r2, [pc, #200]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037d4:	f7fd ff02 	bl	80015dc <HAL_GetTick>
 80037d8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037dc:	f7fd fefe 	bl	80015dc <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e366      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037ee:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1e0>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d073      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d005      	beq.n	800381c <HAL_RCC_OscConfig+0x220>
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d10e      	bne.n	8003834 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d10b      	bne.n	8003834 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d063      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2f4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d15f      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e343      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x250>
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a15      	ldr	r2, [pc, #84]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0x28c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x274>
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0x28c>
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a05      	ldr	r2, [pc, #20]	; (8003898 <HAL_RCC_OscConfig+0x29c>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd fea4 	bl	80015dc <HAL_GetTick>
 8003894:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003896:	e010      	b.n	80038ba <HAL_RCC_OscConfig+0x2be>
 8003898:	40021000 	.word	0x40021000
 800389c:	0800c870 	.word	0x0800c870
 80038a0:	20000000 	.word	0x20000000
 80038a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fd fe98 	bl	80015dc <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e300      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ba:	4ba0      	ldr	r3, [pc, #640]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x2ac>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd fe88 	bl	80015dc <HAL_GetTick>
 80038cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fd fe84 	bl	80015dc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e2ec      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e2:	4b96      	ldr	r3, [pc, #600]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d060      	beq.n	80039c0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x314>
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d119      	bne.n	800393e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d116      	bne.n	800393e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003910:	4b8a      	ldr	r3, [pc, #552]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_OscConfig+0x32c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e2c9      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b84      	ldr	r3, [pc, #528]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	4981      	ldr	r1, [pc, #516]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800393c:	e040      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d023      	beq.n	800398e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003946:	4b7d      	ldr	r3, [pc, #500]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7c      	ldr	r2, [pc, #496]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fd fe43 	bl	80015dc <HAL_GetTick>
 8003956:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7fd fe3f 	bl	80015dc <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e2a7      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396c:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b70      	ldr	r3, [pc, #448]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	496d      	ldr	r1, [pc, #436]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
 800398c:	e018      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398e:	4b6b      	ldr	r3, [pc, #428]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fd fe1f 	bl	80015dc <HAL_GetTick>
 800399e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fd fe1b 	bl	80015dc <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e283      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d07f      	beq.n	8003acc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d05f      	beq.n	8003a94 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039da:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d037      	beq.n	8003a5a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e25c      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a12:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a1c:	f7fd fdde 	bl	80015dc <HAL_GetTick>
 8003a20:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fd fdda 	bl	80015dc <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b11      	cmp	r3, #17
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e242      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a36:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ef      	bne.n	8003a24 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003a44:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4a:	f023 0210 	bic.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	493a      	ldr	r1, [pc, #232]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a60:	4a36      	ldr	r2, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fd fdb7 	bl	80015dc <HAL_GetTick>
 8003a6e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fd fdb3 	bl	80015dc <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b11      	cmp	r3, #17
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e21b      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a84:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ef      	beq.n	8003a72 <HAL_RCC_OscConfig+0x476>
 8003a92:	e01b      	b.n	8003acc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9a:	4a28      	ldr	r2, [pc, #160]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fd9a 	bl	80015dc <HAL_GetTick>
 8003aa8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fd fd96 	bl	80015dc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b11      	cmp	r3, #17
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e1fe      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003abe:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ef      	bne.n	8003aac <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80c1 	beq.w	8003c5c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10e      	bne.n	8003b0a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6593      	str	r3, [r2, #88]	; 0x58
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_RCC_OscConfig+0x540>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCC_OscConfig+0x544>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d11c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_OscConfig+0x544>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x544>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7fd fd5b 	bl	80015dc <HAL_GetTick>
 8003b26:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b28:	e00c      	b.n	8003b44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fd fd57 	bl	80015dc <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d905      	bls.n	8003b44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e1bf      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b44:	4bb1      	ldr	r3, [pc, #708]	; (8003e0c <HAL_RCC_OscConfig+0x810>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ec      	beq.n	8003b2a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d02c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003b5c:	4bac      	ldr	r3, [pc, #688]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	49a8      	ldr	r1, [pc, #672]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d010      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b82:	4ba3      	ldr	r3, [pc, #652]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	4aa1      	ldr	r2, [pc, #644]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b92:	4b9f      	ldr	r3, [pc, #636]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	4a9d      	ldr	r2, [pc, #628]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba2:	e018      	b.n	8003bd6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ba4:	4b9a      	ldr	r3, [pc, #616]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a99      	ldr	r2, [pc, #612]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bb4:	e00f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bb6:	4b96      	ldr	r3, [pc, #600]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	4a94      	ldr	r2, [pc, #592]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bc6:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	4a90      	ldr	r2, [pc, #576]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fcfd 	bl	80015dc <HAL_GetTick>
 8003be2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd fcf9 	bl	80015dc <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e15f      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfc:	4b84      	ldr	r3, [pc, #528]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ed      	beq.n	8003be6 <HAL_RCC_OscConfig+0x5ea>
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fd fce6 	bl	80015dc <HAL_GetTick>
 8003c10:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fd fce2 	bl	80015dc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e148      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c2a:	4b79      	ldr	r3, [pc, #484]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ed      	bne.n	8003c14 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003c38:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a74      	ldr	r2, [pc, #464]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	4a6e      	ldr	r2, [pc, #440]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01c      	beq.n	8003caa <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c70:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c76:	4a66      	ldr	r2, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd fcac 	bl	80015dc <HAL_GetTick>
 8003c84:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c88:	f7fd fca8 	bl	80015dc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e110      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ef      	beq.n	8003c88 <HAL_RCC_OscConfig+0x68c>
 8003ca8:	e01b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003caa:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd fc8f 	bl	80015dc <HAL_GetTick>
 8003cbe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cc2:	f7fd fc8b 	bl	80015dc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e0f3      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cd4:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ef      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80e7 	beq.w	8003eba <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f040 80b7 	bne.w	8003e64 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0203 	and.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d124      	bne.n	8003d54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	3b01      	subs	r3, #1
 8003d16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d11b      	bne.n	8003d54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d113      	bne.n	8003d54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d061      	beq.n	8003e18 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d056      	beq.n	8003e08 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d66:	f7fd fc39 	bl	80015dc <HAL_GetTick>
 8003d6a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fd fc35 	bl	80015dc <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e09d      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8c:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCC_OscConfig+0x818>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d9c:	3a01      	subs	r2, #1
 8003d9e:	0112      	lsls	r2, r2, #4
 8003da0:	4311      	orrs	r1, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da6:	0212      	lsls	r2, r2, #8
 8003da8:	4311      	orrs	r1, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dae:	0852      	lsrs	r2, r2, #1
 8003db0:	3a01      	subs	r2, #1
 8003db2:	0552      	lsls	r2, r2, #21
 8003db4:	4311      	orrs	r1, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dba:	0852      	lsrs	r2, r2, #1
 8003dbc:	3a01      	subs	r2, #1
 8003dbe:	0652      	lsls	r2, r2, #25
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	4913      	ldr	r1, [pc, #76]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a10      	ldr	r2, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003de0:	f7fd fbfc 	bl	80015dc <HAL_GetTick>
 8003de4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fbf8 	bl	80015dc <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e060      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_OscConfig+0x814>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e06:	e058      	b.n	8003eba <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e057      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	40021000 	.word	0x40021000
 8003e14:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d14a      	bne.n	8003eba <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e3c:	f7fd fbce 	bl	80015dc <HAL_GetTick>
 8003e40:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd fbca 	bl	80015dc <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e032      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x848>
 8003e62:	e02a      	b.n	8003eba <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d025      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e74:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e76:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e7c:	f023 0303 	bic.w	r3, r3, #3
 8003e80:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4a0f      	ldr	r2, [pc, #60]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003e88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fba5 	bl	80015dc <HAL_GetTick>
 8003e92:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fd fba1 	bl	80015dc <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e009      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_OscConfig+0x8c8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x89a>
 8003eb4:	e001      	b.n	8003eba <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0c8      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d910      	bls.n	8003f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 0207 	bic.w	r2, r3, #7
 8003ef2:	4961      	ldr	r1, [pc, #388]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	4b5f      	ldr	r3, [pc, #380]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0b0      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d04c      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f20:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d121      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e09e      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f38:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d115      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e092      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f50:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e086      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e07e      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 0203 	bic.w	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	493f      	ldr	r1, [pc, #252]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fd fb2b 	bl	80015dc <HAL_GetTick>
 8003f86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8a:	f7fd fb27 	bl	80015dc <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e066      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa0:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 020c 	and.w	r2, r3, #12
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d1eb      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	492c      	ldr	r1, [pc, #176]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d210      	bcs.n	8004000 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0207 	bic.w	r2, r3, #7
 8003fe6:	4924      	ldr	r1, [pc, #144]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_RCC_ClockConfig+0x1b0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e036      	b.n	800406e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4918      	ldr	r1, [pc, #96]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4910      	ldr	r1, [pc, #64]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800403e:	f000 f825 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8004042:	4602      	mov	r2, r0
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	490c      	ldr	r1, [pc, #48]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	5ccb      	ldrb	r3, [r1, r3]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd fa6a 	bl	800153c <HAL_InitTick>
 8004068:	4603      	mov	r3, r0
 800406a:	72fb      	strb	r3, [r7, #11]

  return status;
 800406c:	7afb      	ldrb	r3, [r7, #11]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	0800c870 	.word	0x0800c870
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x34>
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d121      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11e      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e005      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040e8:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d102      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_RCC_GetSysClockFreq+0x110>)
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e004      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d101      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004112:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d134      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0xa6>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d003      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xac>
 8004130:	e005      	b.n	800413e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_GetSysClockFreq+0x110>)
 8004134:	617b      	str	r3, [r7, #20]
      break;
 8004136:	e005      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800413a:	617b      	str	r3, [r7, #20]
      break;
 800413c:	e002      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	617b      	str	r3, [r7, #20]
      break;
 8004142:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	3301      	adds	r3, #1
 8004150:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	fb02 f203 	mul.w	r2, r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	0e5b      	lsrs	r3, r3, #25
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	3301      	adds	r3, #1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004184:	69bb      	ldr	r3, [r7, #24]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	0800c880 	.word	0x0800c880
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	007a1200 	.word	0x007a1200

080041a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041b0:	4b2a      	ldr	r3, [pc, #168]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041bc:	f7ff f9aa 	bl	8003514 <HAL_PWREx_GetVoltageRange>
 80041c0:	6178      	str	r0, [r7, #20]
 80041c2:	e014      	b.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	4a24      	ldr	r2, [pc, #144]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6593      	str	r3, [r2, #88]	; 0x58
 80041d0:	4b22      	ldr	r3, [pc, #136]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041dc:	f7ff f99a 	bl	8003514 <HAL_PWREx_GetVoltageRange>
 80041e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041e2:	4b1e      	ldr	r3, [pc, #120]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	4a1d      	ldr	r2, [pc, #116]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f4:	d10b      	bne.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d919      	bls.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004200:	d902      	bls.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004202:	2302      	movs	r3, #2
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e013      	b.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004208:	2301      	movs	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	e010      	b.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d902      	bls.n	800421a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004214:	2303      	movs	r3, #3
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e00a      	b.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d102      	bne.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004220:	2302      	movs	r3, #2
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e004      	b.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b70      	cmp	r3, #112	; 0x70
 800422a:	d101      	bne.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800422c:	2301      	movs	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 0207 	bic.w	r2, r3, #7
 8004238:	4909      	ldr	r1, [pc, #36]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	d001      	beq.n	8004252 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	40022000 	.word	0x40022000

08004264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800426c:	2300      	movs	r3, #0
 800426e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004270:	2300      	movs	r3, #0
 8004272:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 809e 	beq.w	80043be <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004286:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429c:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	4a3f      	ldr	r2, [pc, #252]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6593      	str	r3, [r2, #88]	; 0x58
 80042a8:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b8:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a39      	ldr	r2, [pc, #228]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80042be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042c4:	f7fd f98a 	bl	80015dc <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ca:	e009      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042cc:	f7fd f986 	bl	80015dc <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d902      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	74fb      	strb	r3, [r7, #19]
        break;
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e0:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ef      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d15a      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042f2:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01e      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	429a      	cmp	r2, r3
 800430c:	d019      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800433a:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d016      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd f946 	bl	80015dc <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	e00b      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fd f942 	bl	80015dc <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d902      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	74fb      	strb	r3, [r7, #19]
            break;
 800436a:	e006      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0ec      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800437a:	7cfb      	ldrb	r3, [r7, #19]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004396:	e009      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
 800439c:	e006      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x148>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ac:	7c7b      	ldrb	r3, [r7, #17]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d105      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b2:	4b6e      	ldr	r3, [pc, #440]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	4a6d      	ldr	r2, [pc, #436]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ca:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f023 0203 	bic.w	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4964      	ldr	r1, [pc, #400]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043ec:	4b5f      	ldr	r3, [pc, #380]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 020c 	bic.w	r2, r3, #12
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	495c      	ldr	r1, [pc, #368]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800440e:	4b57      	ldr	r3, [pc, #348]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4953      	ldr	r1, [pc, #332]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004430:	4b4e      	ldr	r3, [pc, #312]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	494b      	ldr	r1, [pc, #300]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004452:	4b46      	ldr	r3, [pc, #280]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	4942      	ldr	r1, [pc, #264]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004474:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	493a      	ldr	r1, [pc, #232]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004496:	4b35      	ldr	r3, [pc, #212]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4931      	ldr	r1, [pc, #196]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b8:	4b2c      	ldr	r3, [pc, #176]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	4929      	ldr	r1, [pc, #164]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4920      	ldr	r1, [pc, #128]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d015      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	4918      	ldr	r1, [pc, #96]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451a:	d105      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a12      	ldr	r2, [pc, #72]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004526:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	490a      	ldr	r1, [pc, #40]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004552:	d105      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800455a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004560:	7cbb      	ldrb	r3, [r7, #18]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000

08004570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e095      	b.n	80046ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004592:	d009      	beq.n	80045a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
 800459a:	e005      	b.n	80045a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fe08 	bl	80011d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045e8:	d902      	bls.n	80045f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e002      	b.n	80045f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045fe:	d007      	beq.n	8004610 <HAL_SPI_Init+0xa0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004608:	d002      	beq.n	8004610 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	ea42 0103 	orr.w	r1, r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	f003 0204 	and.w	r2, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800468c:	ea42 0103 	orr.w	r1, r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b088      	sub	sp, #32
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d112      	bne.n	80046fa <HAL_SPI_Receive+0x44>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10e      	bne.n	80046fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2204      	movs	r2, #4
 80046e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f910 	bl	8004916 <HAL_SPI_TransmitReceive>
 80046f6:	4603      	mov	r3, r0
 80046f8:	e109      	b.n	800490e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_SPI_Receive+0x52>
 8004704:	2302      	movs	r3, #2
 8004706:	e102      	b.n	800490e <HAL_SPI_Receive+0x258>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004710:	f7fc ff64 	bl	80015dc <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004722:	2302      	movs	r3, #2
 8004724:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004726:	e0e9      	b.n	80048fc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_SPI_Receive+0x7e>
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004738:	e0e0      	b.n	80048fc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2204      	movs	r2, #4
 800473e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004784:	d908      	bls.n	8004798 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e007      	b.n	80047a8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	d10f      	bne.n	80047d2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d007      	beq.n	80047f0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f8:	d867      	bhi.n	80048ca <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047fa:	e030      	b.n	800485e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d117      	bne.n	800483a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f103 020c 	add.w	r2, r3, #12
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004838:	e011      	b.n	800485e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800483a:	f7fc fecf 	bl	80015dc <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d803      	bhi.n	8004852 <HAL_SPI_Receive+0x19c>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d102      	bne.n	8004858 <HAL_SPI_Receive+0x1a2>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800485c:	e04e      	b.n	80048fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1c8      	bne.n	80047fc <HAL_SPI_Receive+0x146>
 800486a:	e034      	b.n	80048d6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d115      	bne.n	80048a6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	b292      	uxth	r2, r2
 8004886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048a4:	e011      	b.n	80048ca <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a6:	f7fc fe99 	bl	80015dc <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d803      	bhi.n	80048be <HAL_SPI_Receive+0x208>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d102      	bne.n	80048c4 <HAL_SPI_Receive+0x20e>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048c8:	e018      	b.n	80048fc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ca      	bne.n	800486c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fb48 	bl	8004f70 <SPI_EndRxTransaction>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
 80048f8:	e000      	b.n	80048fc <HAL_SPI_Receive+0x246>
  }

error :
 80048fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b08a      	sub	sp, #40	; 0x28
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004924:	2301      	movs	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_SPI_TransmitReceive+0x26>
 8004938:	2302      	movs	r3, #2
 800493a:	e1fb      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x41e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004944:	f7fc fe4a 	bl	80015dc <HAL_GetTick>
 8004948:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004950:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800495c:	887b      	ldrh	r3, [r7, #2]
 800495e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004960:	7efb      	ldrb	r3, [r7, #27]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d00e      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x6e>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496c:	d106      	bne.n	800497c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HAL_SPI_TransmitReceive+0x66>
 8004976:	7efb      	ldrb	r3, [r7, #27]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d003      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800497c:	2302      	movs	r3, #2
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004982:	e1cd      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x80>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x80>
 8004990:	887b      	ldrh	r3, [r7, #2]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800499c:	e1c0      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2205      	movs	r2, #5
 80049ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	887a      	ldrh	r2, [r7, #2]
 80049ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	887a      	ldrh	r2, [r7, #2]
 80049de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049f4:	d802      	bhi.n	80049fc <HAL_SPI_TransmitReceive+0xe6>
 80049f6:	8a3b      	ldrh	r3, [r7, #16]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d908      	bls.n	8004a0e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	e007      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d007      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a44:	d97c      	bls.n	8004b40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x13e>
 8004a4e:	8a7b      	ldrh	r3, [r7, #18]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d169      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a78:	e056      	b.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d11b      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x1aa>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x1aa>
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d113      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d11c      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x1f2>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b04:	2301      	movs	r3, #1
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b08:	f7fc fd68 	bl	80015dc <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d807      	bhi.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d003      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b26:	e0fb      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1a3      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x164>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d19d      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x164>
 8004b3e:	e0df      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x23a>
 8004b48:	8a7b      	ldrh	r3, [r7, #18]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	f040 80cb 	bne.w	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d912      	bls.n	8004b80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	881a      	ldrh	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	1c9a      	adds	r2, r3, #2
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b02      	subs	r3, #2
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b7e:	e0b2      	b.n	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba6:	e09e      	b.n	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d134      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x30a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02f      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x30a>
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d12c      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d912      	bls.n	8004bf6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b02      	subs	r3, #2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf4:	e012      	b.n	8004c1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d148      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x3aa>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d042      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d923      	bls.n	8004c8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	b292      	uxth	r2, r2
 8004c52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b02      	subs	r3, #2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d81f      	bhi.n	8004cbc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	e016      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f103 020c 	add.w	r2, r3, #12
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cc0:	f7fc fc8c 	bl	80015dc <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d803      	bhi.n	8004cd8 <HAL_SPI_TransmitReceive+0x3c2>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x3c8>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ce4:	e01c      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f af5b 	bne.w	8004ba8 <HAL_SPI_TransmitReceive+0x292>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f47f af54 	bne.w	8004ba8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f98b 	bl	8005020 <SPI_EndRxTxTransaction>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60
 8004d1c:	e000      	b.n	8004d20 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3728      	adds	r7, #40	; 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d4c:	f7fc fc46 	bl	80015dc <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4413      	add	r3, r2
 8004d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d5c:	f7fc fc3e 	bl	80015dc <HAL_GetTick>
 8004d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d62:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	015b      	lsls	r3, r3, #5
 8004d68:	0d1b      	lsrs	r3, r3, #20
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	e054      	b.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d050      	beq.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d7c:	f7fc fc2e 	bl	80015dc <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d902      	bls.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13d      	bne.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004daa:	d111      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db4:	d004      	beq.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d107      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d10f      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e017      	b.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d19b      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000000 	.word	0x20000000

08004e4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e5a:	f7fc fbbf 	bl	80015dc <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e6a:	f7fc fbb7 	bl	80015dc <HAL_GetTick>
 8004e6e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e70:	4b3e      	ldr	r3, [pc, #248]	; (8004f6c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00da      	lsls	r2, r3, #3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	0d1b      	lsrs	r3, r3, #20
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e88:	e062      	b.n	8004f50 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e90:	d109      	bne.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004ea4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d050      	beq.n	8004f50 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eae:	f7fc fb95 	bl	80015dc <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d902      	bls.n	8004ec4 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d13d      	bne.n	8004f40 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ed2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004edc:	d111      	bne.n	8004f02 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee6:	d004      	beq.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef0:	d107      	bne.n	8004f02 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0a:	d10f      	bne.n	8004f2c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e010      	b.n	8004f62 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d194      	bne.n	8004e8a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000000 	.word	0x20000000

08004f70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f84:	d111      	bne.n	8004faa <SPI_EndRxTransaction+0x3a>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8e:	d004      	beq.n	8004f9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d107      	bne.n	8004faa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff fec1 	bl	8004d3c <SPI_WaitFlagStateUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e023      	b.n	8005018 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd8:	d11d      	bne.n	8005016 <SPI_EndRxTransaction+0xa6>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe2:	d004      	beq.n	8004fee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d113      	bne.n	8005016 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ff26 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e000      	b.n	8005018 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2200      	movs	r2, #0
 8005034:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff ff07 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e027      	b.n	80050a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	2180      	movs	r1, #128	; 0x80
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fe6c 	bl	8004d3c <SPI_WaitFlagStateUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e014      	b.n	80050a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fee0 	bl	8004e4c <SPI_WaitFifoStateUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e000      	b.n	80050a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050ac:	b084      	sub	sp, #16
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	f107 0014 	add.w	r0, r7, #20
 80050ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	b004      	add	sp, #16
 80050cc:	4770      	bx	lr

080050ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050de:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80050e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005104:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005108:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	b29b      	uxth	r3, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	b29b      	uxth	r3, r3
 800511a:	4013      	ands	r3, r2
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800514c:	b084      	sub	sp, #16
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	f107 0014 	add.w	r0, r7, #20
 800515a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	b004      	add	sp, #16
 800518c:	4770      	bx	lr
	...

08005190 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005190:	b480      	push	{r7}
 8005192:	b09b      	sub	sp, #108	; 0x6c
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	78db      	ldrb	r3, [r3, #3]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d81f      	bhi.n	8005202 <USB_ActivateEndpoint+0x72>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <USB_ActivateEndpoint+0x38>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	0800520b 	.word	0x0800520b
 80051d4:	080051e7 	.word	0x080051e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80051d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051e4:	e012      	b.n	800520c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80051ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051f2:	e00b      	b.n	800520c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005200:	e004      	b.n	800520c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005208:	e000      	b.n	800520c <USB_ActivateEndpoint+0x7c>
      break;
 800520a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800521a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	b21b      	sxth	r3, r3
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	b21a      	sxth	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b21b      	sxth	r3, r3
 800524e:	4313      	orrs	r3, r2
 8005250:	b21b      	sxth	r3, r3
 8005252:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	441a      	add	r2, r3
 8005260:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	7b1b      	ldrb	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 8149 	bne.w	8005514 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8084 	beq.w	8005394 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005296:	b29b      	uxth	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	00da      	lsls	r2, r3, #3
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	88db      	ldrh	r3, [r3, #6]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	81fb      	strh	r3, [r7, #14]
 80052ce:	89fb      	ldrh	r3, [r7, #14]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <USB_ActivateEndpoint+0x180>
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	81bb      	strh	r3, [r7, #12]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	89bb      	ldrh	r3, [r7, #12]
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d020      	beq.n	800535a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532e:	813b      	strh	r3, [r7, #8]
 8005330:	893b      	ldrh	r3, [r7, #8]
 8005332:	f083 0320 	eor.w	r3, r3, #32
 8005336:	813b      	strh	r3, [r7, #8]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	893b      	ldrh	r3, [r7, #8]
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]
 8005358:	e27f      	b.n	800585a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	897b      	ldrh	r3, [r7, #10]
 800537e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]
 8005392:	e262      	b.n	800585a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	4413      	add	r3, r2
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	00da      	lsls	r2, r3, #3
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	4413      	add	r3, r2
 80053b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	88db      	ldrh	r3, [r3, #6]
 80053bc:	085b      	lsrs	r3, r3, #1
 80053be:	b29b      	uxth	r3, r3
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	4413      	add	r3, r2
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	00da      	lsls	r2, r3, #3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	4413      	add	r3, r2
 80053e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053ea:	623b      	str	r3, [r7, #32]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d112      	bne.n	800541a <USB_ActivateEndpoint+0x28a>
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053fe:	b29a      	uxth	r2, r3
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005412:	b29a      	uxth	r2, r3
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	801a      	strh	r2, [r3, #0]
 8005418:	e02f      	b.n	800547a <USB_ActivateEndpoint+0x2ea>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b3e      	cmp	r3, #62	; 0x3e
 8005420:	d813      	bhi.n	800544a <USB_ActivateEndpoint+0x2ba>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	085b      	lsrs	r3, r3, #1
 8005428:	663b      	str	r3, [r7, #96]	; 0x60
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <USB_ActivateEndpoint+0x2ac>
 8005436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005438:	3301      	adds	r3, #1
 800543a:	663b      	str	r3, [r7, #96]	; 0x60
 800543c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800543e:	b29b      	uxth	r3, r3
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	b29a      	uxth	r2, r3
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	e017      	b.n	800547a <USB_ActivateEndpoint+0x2ea>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	663b      	str	r3, [r7, #96]	; 0x60
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <USB_ActivateEndpoint+0x2d4>
 800545e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005460:	3b01      	subs	r3, #1
 8005462:	663b      	str	r3, [r7, #96]	; 0x60
 8005464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005466:	b29b      	uxth	r3, r3
 8005468:	029b      	lsls	r3, r3, #10
 800546a:	b29b      	uxth	r3, r3
 800546c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005474:	b29a      	uxth	r2, r3
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	83fb      	strh	r3, [r7, #30]
 8005488:	8bfb      	ldrh	r3, [r7, #30]
 800548a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01b      	beq.n	80054ca <USB_ActivateEndpoint+0x33a>
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a8:	83bb      	strh	r3, [r7, #28]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	441a      	add	r2, r3
 80054b4:	8bbb      	ldrh	r3, [r7, #28]
 80054b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	837b      	strh	r3, [r7, #26]
 80054e2:	8b7b      	ldrh	r3, [r7, #26]
 80054e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054e8:	837b      	strh	r3, [r7, #26]
 80054ea:	8b7b      	ldrh	r3, [r7, #26]
 80054ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054f0:	837b      	strh	r3, [r7, #26]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	8b7b      	ldrh	r3, [r7, #26]
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
 8005512:	e1a2      	b.n	800585a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	441a      	add	r2, r3
 8005538:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	65bb      	str	r3, [r7, #88]	; 0x58
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005560:	4413      	add	r3, r2
 8005562:	65bb      	str	r3, [r7, #88]	; 0x58
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	00da      	lsls	r2, r3, #3
 800556a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800556c:	4413      	add	r3, r2
 800556e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005572:	657b      	str	r3, [r7, #84]	; 0x54
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	891b      	ldrh	r3, [r3, #8]
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	653b      	str	r3, [r7, #80]	; 0x50
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005594:	4413      	add	r3, r2
 8005596:	653b      	str	r3, [r7, #80]	; 0x50
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00da      	lsls	r2, r3, #3
 800559e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a0:	4413      	add	r3, r2
 80055a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	895b      	ldrh	r3, [r3, #10]
 80055ac:	085b      	lsrs	r3, r3, #1
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	785b      	ldrb	r3, [r3, #1]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 8091 	bne.w	80056e4 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80055d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01b      	beq.n	8005612 <USB_ActivateEndpoint+0x482>
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005620:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01b      	beq.n	8005662 <USB_ActivateEndpoint+0x4d2>
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	86bb      	strh	r3, [r7, #52]	; 0x34
 800567a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800567c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005680:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005682:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005688:	86bb      	strh	r3, [r7, #52]	; 0x34
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c0:	867b      	strh	r3, [r7, #50]	; 0x32
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	441a      	add	r2, r3
 80056cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80056ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056de:	b29b      	uxth	r3, r3
 80056e0:	8013      	strh	r3, [r2, #0]
 80056e2:	e0ba      	b.n	800585a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01d      	beq.n	800573c <USB_ActivateEndpoint+0x5ac>
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	441a      	add	r2, r3
 8005724:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005738:	b29b      	uxth	r3, r3
 800573a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800574c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01d      	beq.n	8005794 <USB_ActivateEndpoint+0x604>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	441a      	add	r2, r3
 800577c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005790:	b29b      	uxth	r3, r3
 8005792:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	78db      	ldrb	r3, [r3, #3]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d024      	beq.n	80057e6 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057ba:	f083 0320 	eor.w	r3, r3, #32
 80057be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	8013      	strh	r3, [r2, #0]
 80057e4:	e01d      	b.n	8005822 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800580e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800581a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581e:	b29b      	uxth	r3, r3
 8005820:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800585a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800585e:	4618      	mov	r0, r3
 8005860:	376c      	adds	r7, #108	; 0x6c
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop

0800586c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800586c:	b480      	push	{r7}
 800586e:	b08d      	sub	sp, #52	; 0x34
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	7b1b      	ldrb	r3, [r3, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 808e 	bne.w	800599c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d044      	beq.n	8005912 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	81bb      	strh	r3, [r7, #12]
 8005896:	89bb      	ldrh	r3, [r7, #12]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <USB_DeactivateEndpoint+0x6c>
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	817b      	strh	r3, [r7, #10]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	897b      	ldrh	r3, [r7, #10]
 80058c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ee:	813b      	strh	r3, [r7, #8]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	893b      	ldrh	r3, [r7, #8]
 80058fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590c:	b29b      	uxth	r3, r3
 800590e:	8013      	strh	r3, [r2, #0]
 8005910:	e192      	b.n	8005c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	827b      	strh	r3, [r7, #18]
 8005920:	8a7b      	ldrh	r3, [r7, #18]
 8005922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01b      	beq.n	8005962 <USB_DeactivateEndpoint+0xf6>
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	823b      	strh	r3, [r7, #16]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8a3b      	ldrh	r3, [r7, #16]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	81fb      	strh	r3, [r7, #14]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
 800599a:	e14d      	b.n	8005c38 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 80a5 	bne.w	8005af0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	843b      	strh	r3, [r7, #32]
 80059b4:	8c3b      	ldrh	r3, [r7, #32]
 80059b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01b      	beq.n	80059f6 <USB_DeactivateEndpoint+0x18a>
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d4:	83fb      	strh	r3, [r7, #30]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	441a      	add	r2, r3
 80059e0:	8bfb      	ldrh	r3, [r7, #30]
 80059e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	83bb      	strh	r3, [r7, #28]
 8005a04:	8bbb      	ldrh	r3, [r7, #28]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01b      	beq.n	8005a46 <USB_DeactivateEndpoint+0x1da>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	837b      	strh	r3, [r7, #26]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	8b7b      	ldrh	r3, [r7, #26]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5c:	833b      	strh	r3, [r7, #24]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	8b3b      	ldrh	r3, [r7, #24]
 8005a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	82fb      	strh	r3, [r7, #22]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	8afb      	ldrh	r3, [r7, #22]
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005acc:	82bb      	strh	r3, [r7, #20]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	441a      	add	r2, r3
 8005ad8:	8abb      	ldrh	r3, [r7, #20]
 8005ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	8013      	strh	r3, [r2, #0]
 8005aee:	e0a3      	b.n	8005c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <USB_DeactivateEndpoint+0x2d4>
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <USB_DeactivateEndpoint+0x324>
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3734      	adds	r7, #52	; 0x34
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b0cc      	sub	sp, #304	; 0x130
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	1d3b      	adds	r3, r7, #4
 8005c4e:	6018      	str	r0, [r3, #0]
 8005c50:	463b      	mov	r3, r7
 8005c52:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	f040 872e 	bne.w	8006abc <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d905      	bls.n	8005c7c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005c7a:	e004      	b.n	8005c86 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	7b1b      	ldrb	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d134      	bne.n	8005cfa <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6959      	ldr	r1, [r3, #20]
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	88da      	ldrh	r2, [r3, #6]
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	1d38      	adds	r0, r7, #4
 8005ca4:	6800      	ldr	r0, [r0, #0]
 8005ca6:	f001 fc20 	bl	80074ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005caa:	f107 0310 	add.w	r3, r7, #16
 8005cae:	1d3a      	adds	r2, r7, #4
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	f107 0310 	add.w	r3, r7, #16
 8005cc4:	f107 0210 	add.w	r2, r7, #16
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	440a      	add	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	463b      	mov	r3, r7
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	00da      	lsls	r2, r3, #3
 8005cd6:	f107 0310 	add.w	r3, r7, #16
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f107 030c 	add.w	r3, r7, #12
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	f000 beac 	b.w	8006a52 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	78db      	ldrb	r3, [r3, #3]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	f040 838c 	bne.w	800641e <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d06:	463b      	mov	r3, r7
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	f240 8330 	bls.w	8006378 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	441a      	add	r2, r3
 8005d44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d50:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a1a      	ldr	r2, [r3, #32]
 8005d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	463b      	mov	r3, r7
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 819e 	beq.w	80060c6 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d8e:	1d3a      	adds	r2, r7, #4
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d17a      	bne.n	8005e94 <USB_EPStartXfer+0x24e>
 8005d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005da2:	1d3a      	adds	r2, r7, #4
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4619      	mov	r1, r3
 8005db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005db8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	00da      	lsls	r2, r3, #3
 8005dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11a      	bne.n	8005e1a <USB_EPStartXfer+0x1d4>
 8005de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e062      	b.n	8005ee0 <USB_EPStartXfer+0x29a>
 8005e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e20:	d819      	bhi.n	8005e56 <USB_EPStartXfer+0x210>
 8005e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <USB_EPStartXfer+0x1fc>
 8005e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	e044      	b.n	8005ee0 <USB_EPStartXfer+0x29a>
 8005e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <USB_EPStartXfer+0x230>
 8005e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e70:	3b01      	subs	r3, #1
 8005e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e025      	b.n	8005ee0 <USB_EPStartXfer+0x29a>
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d120      	bne.n	8005ee0 <USB_EPStartXfer+0x29a>
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	00da      	lsls	r2, r3, #3
 8005ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	895b      	ldrh	r3, [r3, #10]
 8005ee6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6959      	ldr	r1, [r3, #20]
 8005ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005efa:	1d38      	adds	r0, r7, #4
 8005efc:	6800      	ldr	r0, [r0, #0]
 8005efe:	f001 faf4 	bl	80074ea <USB_WritePMA>
            ep->xfer_buff += len;
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	441a      	add	r2, r3
 8005f0e:	463b      	mov	r3, r7
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a1a      	ldr	r2, [r3, #32]
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d909      	bls.n	8005f38 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005f24:	463b      	mov	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6a1a      	ldr	r2, [r3, #32]
 8005f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	463b      	mov	r3, r7
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	621a      	str	r2, [r3, #32]
 8005f36:	e008      	b.n	8005f4a <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2200      	movs	r2, #0
 8005f48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d17a      	bne.n	800604a <USB_EPStartXfer+0x404>
 8005f54:	f107 0318 	add.w	r3, r7, #24
 8005f58:	1d3a      	adds	r2, r7, #4
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f107 0318 	add.w	r3, r7, #24
 8005f6e:	f107 0218 	add.w	r2, r7, #24
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	440a      	add	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	00da      	lsls	r2, r3, #3
 8005f80:	f107 0318 	add.w	r3, r7, #24
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4413      	add	r3, r2
 8005f88:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d11a      	bne.n	8005fd0 <USB_EPStartXfer+0x38a>
 8005f9a:	f107 0314 	add.w	r3, r7, #20
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f107 0314 	add.w	r3, r7, #20
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	f107 0314 	add.w	r3, r7, #20
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f107 0314 	add.w	r3, r7, #20
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	e067      	b.n	80060a0 <USB_EPStartXfer+0x45a>
 8005fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd6:	d819      	bhi.n	800600c <USB_EPStartXfer+0x3c6>
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <USB_EPStartXfer+0x3b2>
 8005fee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ff8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	029b      	lsls	r3, r3, #10
 8006000:	b29a      	uxth	r2, r3
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e049      	b.n	80060a0 <USB_EPStartXfer+0x45a>
 800600c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <USB_EPStartXfer+0x3e6>
 8006022:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006026:	3b01      	subs	r3, #1
 8006028:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800602c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006030:	b29b      	uxth	r3, r3
 8006032:	029b      	lsls	r3, r3, #10
 8006034:	b29b      	uxth	r3, r3
 8006036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603e:	b29a      	uxth	r2, r3
 8006040:	f107 0314 	add.w	r3, r7, #20
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e02a      	b.n	80060a0 <USB_EPStartXfer+0x45a>
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d125      	bne.n	80060a0 <USB_EPStartXfer+0x45a>
 8006054:	f107 0320 	add.w	r3, r7, #32
 8006058:	1d3a      	adds	r2, r7, #4
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006066:	b29b      	uxth	r3, r3
 8006068:	4619      	mov	r1, r3
 800606a:	f107 0320 	add.w	r3, r7, #32
 800606e:	f107 0220 	add.w	r2, r7, #32
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	440a      	add	r2, r1
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	00da      	lsls	r2, r3, #3
 8006080:	f107 0320 	add.w	r3, r7, #32
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4413      	add	r3, r2
 8006088:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800608c:	f107 031c 	add.w	r3, r7, #28
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	b29a      	uxth	r2, r3
 8006098:	f107 031c 	add.w	r3, r7, #28
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060a0:	463b      	mov	r3, r7
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	891b      	ldrh	r3, [r3, #8]
 80060a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6959      	ldr	r1, [r3, #20]
 80060b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060ba:	1d38      	adds	r0, r7, #4
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f001 fa14 	bl	80074ea <USB_WritePMA>
 80060c2:	f000 bcc6 	b.w	8006a52 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d164      	bne.n	800619a <USB_EPStartXfer+0x554>
 80060d0:	1d3b      	adds	r3, r7, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e4:	4413      	add	r3, r2
 80060e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e8:	463b      	mov	r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	00da      	lsls	r2, r3, #3
 80060f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f2:	4413      	add	r3, r2
 80060f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060f8:	647b      	str	r3, [r7, #68]	; 0x44
 80060fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d112      	bne.n	8006128 <USB_EPStartXfer+0x4e2>
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800610c:	b29a      	uxth	r2, r3
 800610e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006120:	b29a      	uxth	r2, r3
 8006122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e057      	b.n	80061d8 <USB_EPStartXfer+0x592>
 8006128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612c:	2b3e      	cmp	r3, #62	; 0x3e
 800612e:	d817      	bhi.n	8006160 <USB_EPStartXfer+0x51a>
 8006130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800613a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <USB_EPStartXfer+0x50a>
 8006146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800614a:	3301      	adds	r3, #1
 800614c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006150:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006154:	b29b      	uxth	r3, r3
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	b29a      	uxth	r2, r3
 800615a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e03b      	b.n	80061d8 <USB_EPStartXfer+0x592>
 8006160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800616a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <USB_EPStartXfer+0x53a>
 8006176:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800617a:	3b01      	subs	r3, #1
 800617c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006180:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	e01e      	b.n	80061d8 <USB_EPStartXfer+0x592>
 800619a:	463b      	mov	r3, r7
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d119      	bne.n	80061d8 <USB_EPStartXfer+0x592>
 80061a4:	1d3b      	adds	r3, r7, #4
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	653b      	str	r3, [r7, #80]	; 0x50
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b8:	4413      	add	r3, r2
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
 80061bc:	463b      	mov	r3, r7
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	00da      	lsls	r2, r3, #3
 80061c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	891b      	ldrh	r3, [r3, #8]
 80061de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e2:	463b      	mov	r3, r7
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6959      	ldr	r1, [r3, #20]
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061f2:	1d38      	adds	r0, r7, #4
 80061f4:	6800      	ldr	r0, [r0, #0]
 80061f6:	f001 f978 	bl	80074ea <USB_WritePMA>
            ep->xfer_buff += len;
 80061fa:	463b      	mov	r3, r7
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	441a      	add	r2, r3
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a1a      	ldr	r2, [r3, #32]
 8006212:	463b      	mov	r3, r7
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d909      	bls.n	8006230 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6a1a      	ldr	r2, [r3, #32]
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	463b      	mov	r3, r7
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	621a      	str	r2, [r3, #32]
 800622e:	e008      	b.n	8006242 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006230:	463b      	mov	r3, r7
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800623a:	463b      	mov	r3, r7
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	643b      	str	r3, [r7, #64]	; 0x40
 8006248:	463b      	mov	r3, r7
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d164      	bne.n	800631c <USB_EPStartXfer+0x6d6>
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006260:	b29b      	uxth	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	4413      	add	r3, r2
 8006268:	63bb      	str	r3, [r7, #56]	; 0x38
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	00da      	lsls	r2, r3, #3
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	4413      	add	r3, r2
 8006276:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
 800627c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d112      	bne.n	80062aa <USB_EPStartXfer+0x664>
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800628e:	b29a      	uxth	r2, r3
 8006290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e054      	b.n	8006354 <USB_EPStartXfer+0x70e>
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ae:	2b3e      	cmp	r3, #62	; 0x3e
 80062b0:	d817      	bhi.n	80062e2 <USB_EPStartXfer+0x69c>
 80062b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <USB_EPStartXfer+0x68c>
 80062c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062cc:	3301      	adds	r3, #1
 80062ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	029b      	lsls	r3, r3, #10
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	e038      	b.n	8006354 <USB_EPStartXfer+0x70e>
 80062e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <USB_EPStartXfer+0x6bc>
 80062f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062fc:	3b01      	subs	r3, #1
 80062fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006302:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006306:	b29b      	uxth	r3, r3
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29a      	uxth	r2, r3
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e01b      	b.n	8006354 <USB_EPStartXfer+0x70e>
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d116      	bne.n	8006354 <USB_EPStartXfer+0x70e>
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006334:	4413      	add	r3, r2
 8006336:	643b      	str	r3, [r7, #64]	; 0x40
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	00da      	lsls	r2, r3, #3
 8006340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006342:	4413      	add	r3, r2
 8006344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634e:	b29a      	uxth	r2, r3
 8006350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006352:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	895b      	ldrh	r3, [r3, #10]
 800635a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6959      	ldr	r1, [r3, #20]
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	b29b      	uxth	r3, r3
 800636a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800636e:	1d38      	adds	r0, r7, #4
 8006370:	6800      	ldr	r0, [r0, #0]
 8006372:	f001 f8ba 	bl	80074ea <USB_WritePMA>
 8006376:	e36c      	b.n	8006a52 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006382:	1d3b      	adds	r3, r7, #4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80063a0:	1d3b      	adds	r3, r7, #4
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	463b      	mov	r3, r7
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063cc:	1d3b      	adds	r3, r7, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063da:	4413      	add	r3, r2
 80063dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063de:	463b      	mov	r3, r7
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	00da      	lsls	r2, r3, #3
 80063e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80063f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063fa:	463b      	mov	r3, r7
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	891b      	ldrh	r3, [r3, #8]
 8006400:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006404:	463b      	mov	r3, r7
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6959      	ldr	r1, [r3, #20]
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	b29b      	uxth	r3, r3
 8006410:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006414:	1d38      	adds	r0, r7, #4
 8006416:	6800      	ldr	r0, [r0, #0]
 8006418:	f001 f867 	bl	80074ea <USB_WritePMA>
 800641c:	e319      	b.n	8006a52 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800641e:	1d3b      	adds	r3, r7, #4
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800644e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006456:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800645a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645e:	b29b      	uxth	r3, r3
 8006460:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006462:	463b      	mov	r3, r7
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646c:	1ad2      	subs	r2, r2, r3
 800646e:	463b      	mov	r3, r7
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8162 	beq.w	8006754 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006490:	1d3b      	adds	r3, r7, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d164      	bne.n	800656c <USB_EPStartXfer+0x926>
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80064a8:	1d3b      	adds	r3, r7, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064b6:	4413      	add	r3, r2
 80064b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	00da      	lsls	r2, r3, #3
 80064c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c4:	4413      	add	r3, r2
 80064c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064ca:	677b      	str	r3, [r7, #116]	; 0x74
 80064cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d112      	bne.n	80064fa <USB_EPStartXfer+0x8b4>
 80064d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e057      	b.n	80065aa <USB_EPStartXfer+0x964>
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006500:	d817      	bhi.n	8006532 <USB_EPStartXfer+0x8ec>
 8006502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800650c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <USB_EPStartXfer+0x8dc>
 8006518:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800651c:	3301      	adds	r3, #1
 800651e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006522:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006526:	b29b      	uxth	r3, r3
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	b29a      	uxth	r2, r3
 800652c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e03b      	b.n	80065aa <USB_EPStartXfer+0x964>
 8006532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800653c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <USB_EPStartXfer+0x90c>
 8006548:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800654c:	3b01      	subs	r3, #1
 800654e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006552:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006556:	b29b      	uxth	r3, r3
 8006558:	029b      	lsls	r3, r3, #10
 800655a:	b29b      	uxth	r3, r3
 800655c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006564:	b29a      	uxth	r2, r3
 8006566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	e01e      	b.n	80065aa <USB_EPStartXfer+0x964>
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d119      	bne.n	80065aa <USB_EPStartXfer+0x964>
 8006576:	1d3b      	adds	r3, r7, #4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657e:	b29b      	uxth	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006586:	4413      	add	r3, r2
 8006588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	00da      	lsls	r2, r3, #3
 8006594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006598:	4413      	add	r3, r2
 800659a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800659e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80065aa:	463b      	mov	r3, r7
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	895b      	ldrh	r3, [r3, #10]
 80065b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6959      	ldr	r1, [r3, #20]
 80065ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065c4:	1d38      	adds	r0, r7, #4
 80065c6:	6800      	ldr	r0, [r0, #0]
 80065c8:	f000 ff8f 	bl	80074ea <USB_WritePMA>
          ep->xfer_buff += len;
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d6:	441a      	add	r2, r3
 80065d8:	463b      	mov	r3, r7
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d909      	bls.n	8006602 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f8:	1ad2      	subs	r2, r2, r3
 80065fa:	463b      	mov	r3, r7
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	621a      	str	r2, [r3, #32]
 8006600:	e008      	b.n	8006614 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2200      	movs	r2, #0
 8006612:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 821a 	beq.w	8006a52 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800661e:	463b      	mov	r3, r7
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d164      	bne.n	80066f2 <USB_EPStartXfer+0xaac>
 8006628:	1d3b      	adds	r3, r7, #4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	66bb      	str	r3, [r7, #104]	; 0x68
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006636:	b29b      	uxth	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663c:	4413      	add	r3, r2
 800663e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006640:	463b      	mov	r3, r7
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	00da      	lsls	r2, r3, #3
 8006648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800664a:	4413      	add	r3, r2
 800664c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006650:	667b      	str	r3, [r7, #100]	; 0x64
 8006652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d112      	bne.n	8006680 <USB_EPStartXfer+0xa3a>
 800665a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006664:	b29a      	uxth	r2, r3
 8006666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006678:	b29a      	uxth	r2, r3
 800667a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e057      	b.n	8006730 <USB_EPStartXfer+0xaea>
 8006680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006684:	2b3e      	cmp	r3, #62	; 0x3e
 8006686:	d817      	bhi.n	80066b8 <USB_EPStartXfer+0xa72>
 8006688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <USB_EPStartXfer+0xa62>
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a2:	3301      	adds	r3, #1
 80066a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	029b      	lsls	r3, r3, #10
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e03b      	b.n	8006730 <USB_EPStartXfer+0xaea>
 80066b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d104      	bne.n	80066d8 <USB_EPStartXfer+0xa92>
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d2:	3b01      	subs	r3, #1
 80066d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066dc:	b29b      	uxth	r3, r3
 80066de:	029b      	lsls	r3, r3, #10
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e01e      	b.n	8006730 <USB_EPStartXfer+0xaea>
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d119      	bne.n	8006730 <USB_EPStartXfer+0xaea>
 80066fc:	1d3b      	adds	r3, r7, #4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	673b      	str	r3, [r7, #112]	; 0x70
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006710:	4413      	add	r3, r2
 8006712:	673b      	str	r3, [r7, #112]	; 0x70
 8006714:	463b      	mov	r3, r7
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	00da      	lsls	r2, r3, #3
 800671c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671e:	4413      	add	r3, r2
 8006720:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006724:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672a:	b29a      	uxth	r2, r3
 800672c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	891b      	ldrh	r3, [r3, #8]
 8006736:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6959      	ldr	r1, [r3, #20]
 8006740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006744:	b29b      	uxth	r3, r3
 8006746:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800674a:	1d38      	adds	r0, r7, #4
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f000 fecc 	bl	80074ea <USB_WritePMA>
 8006752:	e17e      	b.n	8006a52 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006754:	463b      	mov	r3, r7
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d16f      	bne.n	800683e <USB_EPStartXfer+0xbf8>
 800675e:	1d3b      	adds	r3, r7, #4
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006766:	1d3b      	adds	r3, r7, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006776:	4413      	add	r3, r2
 8006778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	00da      	lsls	r2, r3, #3
 8006784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006788:	4413      	add	r3, r2
 800678a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800678e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d116      	bne.n	80067c8 <USB_EPStartXfer+0xb82>
 800679a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067be:	b29a      	uxth	r2, r3
 80067c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	e05f      	b.n	8006888 <USB_EPStartXfer+0xc42>
 80067c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067cc:	2b3e      	cmp	r3, #62	; 0x3e
 80067ce:	d818      	bhi.n	8006802 <USB_EPStartXfer+0xbbc>
 80067d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80067da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <USB_EPStartXfer+0xbaa>
 80067e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067ea:	3301      	adds	r3, #1
 80067ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80067f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e042      	b.n	8006888 <USB_EPStartXfer+0xc42>
 8006802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800680c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <USB_EPStartXfer+0xbdc>
 8006818:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800681c:	3b01      	subs	r3, #1
 800681e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006822:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006826:	b29b      	uxth	r3, r3
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29a      	uxth	r2, r3
 8006836:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e024      	b.n	8006888 <USB_EPStartXfer+0xc42>
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d11f      	bne.n	8006888 <USB_EPStartXfer+0xc42>
 8006848:	1d3b      	adds	r3, r7, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006850:	1d3b      	adds	r3, r7, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006858:	b29b      	uxth	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006860:	4413      	add	r3, r2
 8006862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006872:	4413      	add	r3, r2
 8006874:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800687c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006880:	b29a      	uxth	r2, r3
 8006882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006886:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006888:	463b      	mov	r3, r7
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	891b      	ldrh	r3, [r3, #8]
 800688e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006892:	463b      	mov	r3, r7
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6959      	ldr	r1, [r3, #20]
 8006898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689c:	b29b      	uxth	r3, r3
 800689e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068a2:	1d38      	adds	r0, r7, #4
 80068a4:	6800      	ldr	r0, [r0, #0]
 80068a6:	f000 fe20 	bl	80074ea <USB_WritePMA>
          ep->xfer_buff += len;
 80068aa:	463b      	mov	r3, r7
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b4:	441a      	add	r2, r3
 80068b6:	463b      	mov	r3, r7
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a1a      	ldr	r2, [r3, #32]
 80068c2:	463b      	mov	r3, r7
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d909      	bls.n	80068e0 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80068cc:	463b      	mov	r3, r7
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d6:	1ad2      	subs	r2, r2, r3
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	621a      	str	r2, [r3, #32]
 80068de:	e008      	b.n	80068f2 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80068e0:	463b      	mov	r3, r7
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80068ea:	463b      	mov	r3, r7
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80068f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80ab 	beq.w	8006a52 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d16f      	bne.n	80069ee <USB_EPStartXfer+0xda8>
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006916:	1d3b      	adds	r3, r7, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006926:	4413      	add	r3, r2
 8006928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	00da      	lsls	r2, r3, #3
 8006934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006938:	4413      	add	r3, r2
 800693a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800693e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d116      	bne.n	8006978 <USB_EPStartXfer+0xd32>
 800694a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006956:	b29a      	uxth	r2, r3
 8006958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696e:	b29a      	uxth	r2, r3
 8006970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	e05b      	b.n	8006a30 <USB_EPStartXfer+0xdea>
 8006978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697c:	2b3e      	cmp	r3, #62	; 0x3e
 800697e:	d818      	bhi.n	80069b2 <USB_EPStartXfer+0xd6c>
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800698a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <USB_EPStartXfer+0xd5a>
 8006996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800699a:	3301      	adds	r3, #1
 800699c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	029b      	lsls	r3, r3, #10
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	e03e      	b.n	8006a30 <USB_EPStartXfer+0xdea>
 80069b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USB_EPStartXfer+0xd8c>
 80069c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069cc:	3b01      	subs	r3, #1
 80069ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e020      	b.n	8006a30 <USB_EPStartXfer+0xdea>
 80069ee:	463b      	mov	r3, r7
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d11b      	bne.n	8006a30 <USB_EPStartXfer+0xdea>
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a08:	4413      	add	r3, r2
 8006a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a0e:	463b      	mov	r3, r7
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	00da      	lsls	r2, r3, #3
 8006a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a30:	463b      	mov	r3, r7
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	895b      	ldrh	r3, [r3, #10]
 8006a36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6959      	ldr	r1, [r3, #20]
 8006a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a4a:	1d38      	adds	r0, r7, #4
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f000 fd4c 	bl	80074ea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f107 020a 	add.w	r2, r7, #10
 8006a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a70:	8013      	strh	r3, [r2, #0]
 8006a72:	f107 030a 	add.w	r3, r7, #10
 8006a76:	f107 020a 	add.w	r2, r7, #10
 8006a7a:	8812      	ldrh	r2, [r2, #0]
 8006a7c:	f082 0210 	eor.w	r2, r2, #16
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	f107 030a 	add.w	r3, r7, #10
 8006a86:	f107 020a 	add.w	r2, r7, #10
 8006a8a:	8812      	ldrh	r2, [r2, #0]
 8006a8c:	f082 0220 	eor.w	r2, r2, #32
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	463b      	mov	r3, r7
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	f107 030a 	add.w	r3, r7, #10
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]
 8006aba:	e3b5      	b.n	8007228 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006abc:	463b      	mov	r3, r7
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	7b1b      	ldrb	r3, [r3, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 8090 	bne.w	8006be8 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	463b      	mov	r3, r7
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d90e      	bls.n	8006af6 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006ad8:	463b      	mov	r3, r7
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aec:	1ad2      	subs	r2, r2, r3
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	619a      	str	r2, [r3, #24]
 8006af4:	e008      	b.n	8006b08 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006b00:	463b      	mov	r3, r7
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b08:	1d3b      	adds	r3, r7, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b10:	1d3b      	adds	r3, r7, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b20:	4413      	add	r3, r2
 8006b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b26:	463b      	mov	r3, r7
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	00da      	lsls	r2, r3, #3
 8006b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d116      	bne.n	8006b72 <USB_EPStartXfer+0xf2c>
 8006b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e32c      	b.n	80071cc <USB_EPStartXfer+0x1586>
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	2b3e      	cmp	r3, #62	; 0x3e
 8006b78:	d818      	bhi.n	8006bac <USB_EPStartXfer+0xf66>
 8006b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <USB_EPStartXfer+0xf54>
 8006b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	029b      	lsls	r3, r3, #10
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ba8:	801a      	strh	r2, [r3, #0]
 8006baa:	e30f      	b.n	80071cc <USB_EPStartXfer+0x1586>
 8006bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <USB_EPStartXfer+0xf86>
 8006bc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	029b      	lsls	r3, r3, #10
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	e2f1      	b.n	80071cc <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006be8:	463b      	mov	r3, r7
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	78db      	ldrb	r3, [r3, #3]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	f040 818f 	bne.w	8006f12 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d175      	bne.n	8006cea <USB_EPStartXfer+0x10a4>
 8006bfe:	1d3b      	adds	r3, r7, #4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c06:	1d3b      	adds	r3, r7, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c16:	4413      	add	r3, r2
 8006c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c1c:	463b      	mov	r3, r7
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	00da      	lsls	r2, r3, #3
 8006c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c32:	463b      	mov	r3, r7
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d116      	bne.n	8006c6a <USB_EPStartXfer+0x1024>
 8006c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e065      	b.n	8006d36 <USB_EPStartXfer+0x10f0>
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b3e      	cmp	r3, #62	; 0x3e
 8006c72:	d81a      	bhi.n	8006caa <USB_EPStartXfer+0x1064>
 8006c74:	463b      	mov	r3, r7
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c80:	463b      	mov	r3, r7
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <USB_EPStartXfer+0x1052>
 8006c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c92:	3301      	adds	r3, #1
 8006c94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	029b      	lsls	r3, r3, #10
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	e045      	b.n	8006d36 <USB_EPStartXfer+0x10f0>
 8006caa:	463b      	mov	r3, r7
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <USB_EPStartXfer+0x1088>
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e025      	b.n	8006d36 <USB_EPStartXfer+0x10f0>
 8006cea:	463b      	mov	r3, r7
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d120      	bne.n	8006d36 <USB_EPStartXfer+0x10f0>
 8006cf4:	1d3b      	adds	r3, r7, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d12:	463b      	mov	r3, r7
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	00da      	lsls	r2, r3, #3
 8006d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d1e:	4413      	add	r3, r2
 8006d20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d28:	463b      	mov	r3, r7
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d3e:	463b      	mov	r3, r7
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d175      	bne.n	8006e34 <USB_EPStartXfer+0x11ee>
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d60:	4413      	add	r3, r2
 8006d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d66:	463b      	mov	r3, r7
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	00da      	lsls	r2, r3, #3
 8006d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d72:	4413      	add	r3, r2
 8006d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d116      	bne.n	8006db4 <USB_EPStartXfer+0x116e>
 8006d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e061      	b.n	8006e78 <USB_EPStartXfer+0x1232>
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b3e      	cmp	r3, #62	; 0x3e
 8006dbc:	d81a      	bhi.n	8006df4 <USB_EPStartXfer+0x11ae>
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	085b      	lsrs	r3, r3, #1
 8006dc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dca:	463b      	mov	r3, r7
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <USB_EPStartXfer+0x119c>
 8006dd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ddc:	3301      	adds	r3, #1
 8006dde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006de2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	029b      	lsls	r3, r3, #10
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	e041      	b.n	8006e78 <USB_EPStartXfer+0x1232>
 8006df4:	463b      	mov	r3, r7
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <USB_EPStartXfer+0x11d2>
 8006e0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e12:	3b01      	subs	r3, #1
 8006e14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	029b      	lsls	r3, r3, #10
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e021      	b.n	8006e78 <USB_EPStartXfer+0x1232>
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d11c      	bne.n	8006e78 <USB_EPStartXfer+0x1232>
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e4e:	4413      	add	r3, r2
 8006e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e54:	463b      	mov	r3, r7
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	00da      	lsls	r2, r3, #3
 8006e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e60:	4413      	add	r3, r2
 8006e62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e76:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 81a4 	beq.w	80071cc <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e84:	1d3b      	adds	r3, r7, #4
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	463b      	mov	r3, r7
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e98:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <USB_EPStartXfer+0x126a>
 8006ea4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10d      	bne.n	8006ecc <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006eb0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f040 8187 	bne.w	80071cc <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ebe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 8180 	bne.w	80071cc <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	441a      	add	r2, r3
 8006ef8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	8013      	strh	r3, [r2, #0]
 8006f10:	e15c      	b.n	80071cc <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	78db      	ldrb	r3, [r3, #3]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 8155 	bne.w	80071c8 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006f1e:	463b      	mov	r3, r7
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699a      	ldr	r2, [r3, #24]
 8006f24:	463b      	mov	r3, r7
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d90e      	bls.n	8006f4c <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006f2e:	463b      	mov	r3, r7
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006f38:	463b      	mov	r3, r7
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	1ad2      	subs	r2, r2, r3
 8006f44:	463b      	mov	r3, r7
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	619a      	str	r2, [r3, #24]
 8006f4a:	e008      	b.n	8006f5e <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006f56:	463b      	mov	r3, r7
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f5e:	463b      	mov	r3, r7
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d16f      	bne.n	8007048 <USB_EPStartXfer+0x1402>
 8006f68:	1d3b      	adds	r3, r7, #4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f70:	1d3b      	adds	r3, r7, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f80:	4413      	add	r3, r2
 8006f82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f86:	463b      	mov	r3, r7
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	00da      	lsls	r2, r3, #3
 8006f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d116      	bne.n	8006fd2 <USB_EPStartXfer+0x138c>
 8006fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e05f      	b.n	8007092 <USB_EPStartXfer+0x144c>
 8006fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006fd8:	d818      	bhi.n	800700c <USB_EPStartXfer+0x13c6>
 8006fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <USB_EPStartXfer+0x13b4>
 8006ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e042      	b.n	8007092 <USB_EPStartXfer+0x144c>
 800700c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <USB_EPStartXfer+0x13e6>
 8007022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007026:	3b01      	subs	r3, #1
 8007028:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800702c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e024      	b.n	8007092 <USB_EPStartXfer+0x144c>
 8007048:	463b      	mov	r3, r7
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d11f      	bne.n	8007092 <USB_EPStartXfer+0x144c>
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800705a:	1d3b      	adds	r3, r7, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007062:	b29b      	uxth	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	4413      	add	r3, r2
 800706c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007070:	463b      	mov	r3, r7
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	00da      	lsls	r2, r3, #3
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707c:	4413      	add	r3, r2
 800707e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007082:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708a:	b29a      	uxth	r2, r3
 800708c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800709a:	463b      	mov	r3, r7
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d16f      	bne.n	8007184 <USB_EPStartXfer+0x153e>
 80070a4:	1d3b      	adds	r3, r7, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070bc:	4413      	add	r3, r2
 80070be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070c2:	463b      	mov	r3, r7
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	00da      	lsls	r2, r3, #3
 80070ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ce:	4413      	add	r3, r2
 80070d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d116      	bne.n	800710e <USB_EPStartXfer+0x14c8>
 80070e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007104:	b29a      	uxth	r2, r3
 8007106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800710a:	801a      	strh	r2, [r3, #0]
 800710c:	e05e      	b.n	80071cc <USB_EPStartXfer+0x1586>
 800710e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007112:	2b3e      	cmp	r3, #62	; 0x3e
 8007114:	d818      	bhi.n	8007148 <USB_EPStartXfer+0x1502>
 8007116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <USB_EPStartXfer+0x14f0>
 800712c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007130:	3301      	adds	r3, #1
 8007132:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800713a:	b29b      	uxth	r3, r3
 800713c:	029b      	lsls	r3, r3, #10
 800713e:	b29a      	uxth	r2, r3
 8007140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	e041      	b.n	80071cc <USB_EPStartXfer+0x1586>
 8007148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <USB_EPStartXfer+0x1522>
 800715e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007162:	3b01      	subs	r3, #1
 8007164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007168:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800716c:	b29b      	uxth	r3, r3
 800716e:	029b      	lsls	r3, r3, #10
 8007170:	b29b      	uxth	r3, r3
 8007172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717a:	b29a      	uxth	r2, r3
 800717c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	e023      	b.n	80071cc <USB_EPStartXfer+0x1586>
 8007184:	463b      	mov	r3, r7
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d11e      	bne.n	80071cc <USB_EPStartXfer+0x1586>
 800718e:	1d3b      	adds	r3, r7, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	4413      	add	r3, r2
 80071a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071a4:	463b      	mov	r3, r7
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	00da      	lsls	r2, r3, #3
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b0:	4413      	add	r3, r2
 80071b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	e001      	b.n	80071cc <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e02e      	b.n	800722a <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	463b      	mov	r3, r7
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80071ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80071f6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80071fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	463b      	mov	r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d020      	beq.n	8007288 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725c:	81bb      	strh	r3, [r7, #12]
 800725e:	89bb      	ldrh	r3, [r7, #12]
 8007260:	f083 0310 	eor.w	r3, r3, #16
 8007264:	81bb      	strh	r3, [r7, #12]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	441a      	add	r2, r3
 8007270:	89bb      	ldrh	r3, [r7, #12]
 8007272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800727e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007282:	b29b      	uxth	r3, r3
 8007284:	8013      	strh	r3, [r2, #0]
 8007286:	e01f      	b.n	80072c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	81fb      	strh	r3, [r7, #14]
 80072a0:	89fb      	ldrh	r3, [r7, #14]
 80072a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072a6:	81fb      	strh	r3, [r7, #14]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	441a      	add	r2, r3
 80072b2:	89fb      	ldrh	r3, [r7, #14]
 80072b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	7b1b      	ldrb	r3, [r3, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 809d 	bne.w	8007424 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d04c      	beq.n	800738c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	823b      	strh	r3, [r7, #16]
 8007300:	8a3b      	ldrh	r3, [r7, #16]
 8007302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01b      	beq.n	8007342 <USB_EPClearStall+0x6c>
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	81fb      	strh	r3, [r7, #14]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	441a      	add	r2, r3
 800732c:	89fb      	ldrh	r3, [r7, #14]
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800733a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	78db      	ldrb	r3, [r3, #3]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d06c      	beq.n	8007424 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007360:	81bb      	strh	r3, [r7, #12]
 8007362:	89bb      	ldrh	r3, [r7, #12]
 8007364:	f083 0320 	eor.w	r3, r3, #32
 8007368:	81bb      	strh	r3, [r7, #12]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	89bb      	ldrh	r3, [r7, #12]
 8007376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]
 800738a:	e04b      	b.n	8007424 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	82fb      	strh	r3, [r7, #22]
 800739a:	8afb      	ldrh	r3, [r7, #22]
 800739c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01b      	beq.n	80073dc <USB_EPClearStall+0x106>
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	82bb      	strh	r3, [r7, #20]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	441a      	add	r2, r3
 80073c6:	8abb      	ldrh	r3, [r7, #20]
 80073c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d8:	b29b      	uxth	r3, r3
 80073da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	827b      	strh	r3, [r7, #18]
 80073f4:	8a7b      	ldrh	r3, [r7, #18]
 80073f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073fa:	827b      	strh	r3, [r7, #18]
 80073fc:	8a7b      	ldrh	r3, [r7, #18]
 80073fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007402:	827b      	strh	r3, [r7, #18]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	8a7b      	ldrh	r3, [r7, #18]
 8007410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007420:	b29b      	uxth	r3, r3
 8007422:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2280      	movs	r2, #128	; 0x80
 8007448:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007468:	b29b      	uxth	r3, r3
 800746a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007472:	b29a      	uxth	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007496:	b29b      	uxth	r3, r3
 8007498:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074c4:	68fb      	ldr	r3, [r7, #12]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b08d      	sub	sp, #52	; 0x34
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	4611      	mov	r1, r2
 80074f6:	461a      	mov	r2, r3
 80074f8:	460b      	mov	r3, r1
 80074fa:	80fb      	strh	r3, [r7, #6]
 80074fc:	4613      	mov	r3, r2
 80074fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007500:	88bb      	ldrh	r3, [r7, #4]
 8007502:	3301      	adds	r3, #1
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007510:	88fa      	ldrh	r2, [r7, #6]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007520:	e01b      	b.n	800755a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	3301      	adds	r3, #1
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	b29b      	uxth	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	b29a      	uxth	r2, r3
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	3302      	adds	r3, #2
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	3301      	adds	r3, #1
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	3b01      	subs	r3, #1
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e0      	bne.n	8007522 <USB_WritePMA+0x38>
  }
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3734      	adds	r7, #52	; 0x34
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800756e:	b480      	push	{r7}
 8007570:	b08b      	sub	sp, #44	; 0x2c
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	4611      	mov	r1, r2
 800757a:	461a      	mov	r2, r3
 800757c:	460b      	mov	r3, r1
 800757e:	80fb      	strh	r3, [r7, #6]
 8007580:	4613      	mov	r3, r2
 8007582:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007584:	88bb      	ldrh	r3, [r7, #4]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	b29b      	uxth	r3, r3
 800758a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800759e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
 80075a4:	e018      	b.n	80075d8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	3302      	adds	r3, #2
 80075b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	3301      	adds	r3, #1
 80075c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	3301      	adds	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	3b01      	subs	r3, #1
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e3      	bne.n	80075a6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80075de:	88bb      	ldrh	r3, [r7, #4]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	701a      	strb	r2, [r3, #0]
  }
}
 80075fa:	bf00      	nop
 80075fc:	372c      	adds	r7, #44	; 0x2c
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007612:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007616:	f002 f9f3 	bl	8009a00 <USBD_static_malloc>
 800761a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800762a:	2302      	movs	r3, #2
 800762c:	e066      	b.n	80076fc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	7c1b      	ldrb	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d119      	bne.n	8007672 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800763e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007642:	2202      	movs	r2, #2
 8007644:	2181      	movs	r1, #129	; 0x81
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 ffdc 	bl	8009604 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007656:	2202      	movs	r2, #2
 8007658:	2101      	movs	r1, #1
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 ffd2 	bl	8009604 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2210      	movs	r2, #16
 800766c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007670:	e016      	b.n	80076a0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007672:	2340      	movs	r3, #64	; 0x40
 8007674:	2202      	movs	r2, #2
 8007676:	2181      	movs	r1, #129	; 0x81
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 ffc3 	bl	8009604 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007684:	2340      	movs	r3, #64	; 0x40
 8007686:	2202      	movs	r2, #2
 8007688:	2101      	movs	r1, #1
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 ffba 	bl	8009604 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2210      	movs	r2, #16
 800769c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076a0:	2308      	movs	r3, #8
 80076a2:	2203      	movs	r2, #3
 80076a4:	2182      	movs	r1, #130	; 0x82
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 ffac 	bl	8009604 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7c1b      	ldrb	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d109      	bne.n	80076ea <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076e0:	2101      	movs	r1, #1
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f002 f90a 	bl	80098fc <USBD_LL_PrepareReceive>
 80076e8:	e007      	b.n	80076fa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076f0:	2340      	movs	r3, #64	; 0x40
 80076f2:	2101      	movs	r1, #1
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f002 f901 	bl	80098fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007710:	2181      	movs	r1, #129	; 0x81
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 ffb4 	bl	8009680 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800771e:	2101      	movs	r1, #1
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 ffad 	bl	8009680 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800772e:	2182      	movs	r1, #130	; 0x82
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 ffa5 	bl	8009680 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007760:	4618      	mov	r0, r3
 8007762:	f002 f95b 	bl	8009a1c <USBD_static_free>
    pdev->pClassData = NULL;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007788:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	e0af      	b.n	8007900 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d03f      	beq.n	800782c <USBD_CDC_Setup+0xb4>
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	f040 809f 	bne.w	80078f0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	88db      	ldrh	r3, [r3, #6]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d02e      	beq.n	8007818 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b25b      	sxtb	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da16      	bge.n	80077f2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80077d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	88d2      	ldrh	r2, [r2, #6]
 80077d6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	88db      	ldrh	r3, [r3, #6]
 80077dc:	2b07      	cmp	r3, #7
 80077de:	bf28      	it	cs
 80077e0:	2307      	movcs	r3, #7
 80077e2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	89fa      	ldrh	r2, [r7, #14]
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 facf 	bl	8008d8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80077f0:	e085      	b.n	80078fe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	785a      	ldrb	r2, [r3, #1]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	88db      	ldrh	r3, [r3, #6]
 8007800:	b2da      	uxtb	r2, r3
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007808:	6939      	ldr	r1, [r7, #16]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	461a      	mov	r2, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fae8 	bl	8008de6 <USBD_CtlPrepareRx>
      break;
 8007816:	e072      	b.n	80078fe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	7850      	ldrb	r0, [r2, #1]
 8007824:	2200      	movs	r2, #0
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	4798      	blx	r3
      break;
 800782a:	e068      	b.n	80078fe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b0b      	cmp	r3, #11
 8007832:	d852      	bhi.n	80078da <USBD_CDC_Setup+0x162>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <USBD_CDC_Setup+0xc4>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	0800786d 	.word	0x0800786d
 8007840:	080078e9 	.word	0x080078e9
 8007844:	080078db 	.word	0x080078db
 8007848:	080078db 	.word	0x080078db
 800784c:	080078db 	.word	0x080078db
 8007850:	080078db 	.word	0x080078db
 8007854:	080078db 	.word	0x080078db
 8007858:	080078db 	.word	0x080078db
 800785c:	080078db 	.word	0x080078db
 8007860:	080078db 	.word	0x080078db
 8007864:	08007897 	.word	0x08007897
 8007868:	080078c1 	.word	0x080078c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b03      	cmp	r3, #3
 8007876:	d107      	bne.n	8007888 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007878:	f107 030a 	add.w	r3, r7, #10
 800787c:	2202      	movs	r2, #2
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 fa84 	bl	8008d8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007886:	e032      	b.n	80078ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fa0e 	bl	8008cac <USBD_CtlError>
            ret = USBD_FAIL;
 8007890:	2303      	movs	r3, #3
 8007892:	75fb      	strb	r3, [r7, #23]
          break;
 8007894:	e02b      	b.n	80078ee <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d107      	bne.n	80078b2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078a2:	f107 030d 	add.w	r3, r7, #13
 80078a6:	2201      	movs	r2, #1
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fa6f 	bl	8008d8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078b0:	e01d      	b.n	80078ee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 f9f9 	bl	8008cac <USBD_CtlError>
            ret = USBD_FAIL;
 80078ba:	2303      	movs	r3, #3
 80078bc:	75fb      	strb	r3, [r7, #23]
          break;
 80078be:	e016      	b.n	80078ee <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d00f      	beq.n	80078ec <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 f9ec 	bl	8008cac <USBD_CtlError>
            ret = USBD_FAIL;
 80078d4:	2303      	movs	r3, #3
 80078d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078d8:	e008      	b.n	80078ec <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f9e5 	bl	8008cac <USBD_CtlError>
          ret = USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	75fb      	strb	r3, [r7, #23]
          break;
 80078e6:	e002      	b.n	80078ee <USBD_CDC_Setup+0x176>
          break;
 80078e8:	bf00      	nop
 80078ea:	e008      	b.n	80078fe <USBD_CDC_Setup+0x186>
          break;
 80078ec:	bf00      	nop
      }
      break;
 80078ee:	e006      	b.n	80078fe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 f9da 	bl	8008cac <USBD_CtlError>
      ret = USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	75fb      	strb	r3, [r7, #23]
      break;
 80078fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800791a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007926:	2303      	movs	r3, #3
 8007928:	e04f      	b.n	80079ca <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007930:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007932:	78fa      	ldrb	r2, [r7, #3]
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	3318      	adds	r3, #24
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d029      	beq.n	800799c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	440b      	add	r3, r1
 8007956:	3318      	adds	r3, #24
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	78f9      	ldrb	r1, [r7, #3]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	460b      	mov	r3, r1
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	4403      	add	r3, r0
 8007968:	3338      	adds	r3, #56	; 0x38
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007970:	fb03 f301 	mul.w	r3, r3, r1
 8007974:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007976:	2b00      	cmp	r3, #0
 8007978:	d110      	bne.n	800799c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	3318      	adds	r3, #24
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800798e:	78f9      	ldrb	r1, [r7, #3]
 8007990:	2300      	movs	r3, #0
 8007992:	2200      	movs	r2, #0
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 ff79 	bl	800988c <USBD_LL_Transmit>
 800799a:	e015      	b.n	80079c8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e015      	b.n	8007a20 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 ffb7 	bl	800996c <USBD_LL_GetRxDataSize>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e01b      	b.n	8007a7a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d015      	beq.n	8007a78 <USBD_CDC_EP0_RxReady+0x50>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a52:	2bff      	cmp	r3, #255	; 0xff
 8007a54:	d010      	beq.n	8007a78 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007a64:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	22ff      	movs	r2, #255	; 0xff
 8007a74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2243      	movs	r2, #67	; 0x43
 8007a90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007a92:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	20000094 	.word	0x20000094

08007aa4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2243      	movs	r2, #67	; 0x43
 8007ab0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007ab2:	4b03      	ldr	r3, [pc, #12]	; (8007ac0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	20000050 	.word	0x20000050

08007ac4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2243      	movs	r2, #67	; 0x43
 8007ad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007ad2:	4b03      	ldr	r3, [pc, #12]	; (8007ae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	200000d8 	.word	0x200000d8

08007ae4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	220a      	movs	r2, #10
 8007af0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007af2:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	2000000c 	.word	0x2000000c

08007b04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e004      	b.n	8007b22 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b087      	sub	sp, #28
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b40:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e008      	b.n	8007b5e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e004      	b.n	8007b90 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007baa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007bac:	2301      	movs	r3, #1
 8007bae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e01a      	b.n	8007bf4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d114      	bne.n	8007bf2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007be6:	2181      	movs	r1, #129	; 0x81
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fe4f 	bl	800988c <USBD_LL_Transmit>

    ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e016      	b.n	8007c48 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7c1b      	ldrb	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d109      	bne.n	8007c36 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fe64 	bl	80098fc <USBD_LL_PrepareReceive>
 8007c34:	e007      	b.n	8007c46 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c3c:	2340      	movs	r3, #64	; 0x40
 8007c3e:	2101      	movs	r1, #1
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fe5b 	bl	80098fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e01f      	b.n	8007ca8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	79fa      	ldrb	r2, [r7, #7]
 8007c9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f001 fc1d 	bl	80094dc <USBD_LL_Init>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e016      	b.n	8007cf6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	f107 020e 	add.w	r2, r7, #14
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	4602      	mov	r2, r0
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fc4a 	bl	80095a0 <USBD_LL_Start>
 8007d0c:	4603      	mov	r3, r0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	4611      	mov	r1, r2
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d007      	beq.n	8007d8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	4611      	mov	r1, r2
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
  }

  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 ff46 	bl	8008c38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dc8:	f003 031f 	and.w	r3, r3, #31
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d01a      	beq.n	8007e06 <USBD_LL_SetupStage+0x72>
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d822      	bhi.n	8007e1a <USBD_LL_SetupStage+0x86>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <USBD_LL_SetupStage+0x4a>
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d00a      	beq.n	8007df2 <USBD_LL_SetupStage+0x5e>
 8007ddc:	e01d      	b.n	8007e1a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9ee 	bl	80081c8 <USBD_StdDevReq>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
      break;
 8007df0:	e020      	b.n	8007e34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa52 	bl	80082a4 <USBD_StdItfReq>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
      break;
 8007e04:	e016      	b.n	8007e34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa91 	bl	8008336 <USBD_StdEPReq>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
      break;
 8007e18:	e00c      	b.n	8007e34 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 fc5f 	bl	80096ec <USBD_LL_StallEP>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]
      break;
 8007e32:	bf00      	nop
  }

  return ret;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	460b      	mov	r3, r1
 8007e48:	607a      	str	r2, [r7, #4]
 8007e4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d138      	bne.n	8007ec4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d14a      	bne.n	8007efa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d913      	bls.n	8007e98 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	1ad2      	subs	r2, r2, r3
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bf28      	it	cs
 8007e8a:	4613      	movcs	r3, r2
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 ffc5 	bl	8008e20 <USBD_CtlContinueRx>
 8007e96:	e030      	b.n	8007efa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d10b      	bne.n	8007ebc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 ffc0 	bl	8008e42 <USBD_CtlSendStatus>
 8007ec2:	e01a      	b.n	8007efa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d114      	bne.n	8007efa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	7afa      	ldrb	r2, [r7, #11]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	4798      	blx	r3
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	e000      	b.n	8007efc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d16b      	bne.n	8007ff0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d156      	bne.n	8007fd6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d914      	bls.n	8007f5e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	1ad2      	subs	r2, r2, r3
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	461a      	mov	r2, r3
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 ff3a 	bl	8008dc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f50:	2300      	movs	r3, #0
 8007f52:	2200      	movs	r2, #0
 8007f54:	2100      	movs	r1, #0
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f001 fcd0 	bl	80098fc <USBD_LL_PrepareReceive>
 8007f5c:	e03b      	b.n	8007fd6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d11c      	bne.n	8007fa4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d316      	bcc.n	8007fa4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d20f      	bcs.n	8007fa4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f84:	2200      	movs	r2, #0
 8007f86:	2100      	movs	r1, #0
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 ff1b 	bl	8008dc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f96:	2300      	movs	r3, #0
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f001 fcad 	bl	80098fc <USBD_LL_PrepareReceive>
 8007fa2:	e018      	b.n	8007fd6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d10b      	bne.n	8007fc8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fc8:	2180      	movs	r1, #128	; 0x80
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f001 fb8e 	bl	80096ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 ff49 	bl	8008e68 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d122      	bne.n	8008026 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff fe98 	bl	8007d16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fee:	e01a      	b.n	8008026 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d114      	bne.n	8008026 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	7afa      	ldrb	r2, [r7, #11]
 8008012:	4611      	mov	r1, r2
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	4798      	blx	r3
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	e000      	b.n	8008028 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	e02f      	b.n	80080c4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00f      	beq.n	800808e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6852      	ldr	r2, [r2, #4]
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	4611      	mov	r1, r2
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	2200      	movs	r2, #0
 8008092:	2100      	movs	r1, #0
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 fab5 	bl	8009604 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2240      	movs	r2, #64	; 0x40
 80080a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	2200      	movs	r2, #0
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 faa7 	bl	8009604 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2240      	movs	r2, #64	; 0x40
 80080c0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	78fa      	ldrb	r2, [r7, #3]
 80080dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2204      	movs	r2, #4
 8008106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b04      	cmp	r3, #4
 800812a:	d106      	bne.n	800813a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008132:	b2da      	uxtb	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800815a:	2303      	movs	r3, #3
 800815c:	e012      	b.n	8008184 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b03      	cmp	r3, #3
 8008168:	d10b      	bne.n	8008182 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3301      	adds	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081aa:	8a3b      	ldrh	r3, [r7, #16]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	b21a      	sxth	r2, r3
 80081b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b21b      	sxth	r3, r3
 80081b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081ba:	89fb      	ldrh	r3, [r7, #14]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d005      	beq.n	80081ee <USBD_StdDevReq+0x26>
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d853      	bhi.n	800828e <USBD_StdDevReq+0xc6>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <USBD_StdDevReq+0x3a>
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d14f      	bne.n	800828e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008200:	e04a      	b.n	8008298 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b09      	cmp	r3, #9
 8008208:	d83b      	bhi.n	8008282 <USBD_StdDevReq+0xba>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBD_StdDevReq+0x48>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008265 	.word	0x08008265
 8008214:	08008279 	.word	0x08008279
 8008218:	08008283 	.word	0x08008283
 800821c:	0800826f 	.word	0x0800826f
 8008220:	08008283 	.word	0x08008283
 8008224:	08008243 	.word	0x08008243
 8008228:	08008239 	.word	0x08008239
 800822c:	08008283 	.word	0x08008283
 8008230:	0800825b 	.word	0x0800825b
 8008234:	0800824d 	.word	0x0800824d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9de 	bl	80085fc <USBD_GetDescriptor>
          break;
 8008240:	e024      	b.n	800828c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fb6d 	bl	8008924 <USBD_SetAddress>
          break;
 800824a:	e01f      	b.n	800828c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fbac 	bl	80089ac <USBD_SetConfig>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
          break;
 8008258:	e018      	b.n	800828c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fc4b 	bl	8008af8 <USBD_GetConfig>
          break;
 8008262:	e013      	b.n	800828c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fc7c 	bl	8008b64 <USBD_GetStatus>
          break;
 800826c:	e00e      	b.n	800828c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fcab 	bl	8008bcc <USBD_SetFeature>
          break;
 8008276:	e009      	b.n	800828c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fcba 	bl	8008bf4 <USBD_ClrFeature>
          break;
 8008280:	e004      	b.n	800828c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fd11 	bl	8008cac <USBD_CtlError>
          break;
 800828a:	bf00      	nop
      }
      break;
 800828c:	e004      	b.n	8008298 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fd0b 	bl	8008cac <USBD_CtlError>
      break;
 8008296:	bf00      	nop
  }

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop

080082a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	d005      	beq.n	80082ca <USBD_StdItfReq+0x26>
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	d82f      	bhi.n	8008322 <USBD_StdItfReq+0x7e>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <USBD_StdItfReq+0x26>
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	d12b      	bne.n	8008322 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d81d      	bhi.n	8008314 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	889b      	ldrh	r3, [r3, #4]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d813      	bhi.n	800830a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	88db      	ldrh	r3, [r3, #6]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d110      	bne.n	800831e <USBD_StdItfReq+0x7a>
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10d      	bne.n	800831e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fd9d 	bl	8008e42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008308:	e009      	b.n	800831e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fccd 	bl	8008cac <USBD_CtlError>
          break;
 8008312:	e004      	b.n	800831e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fcc8 	bl	8008cac <USBD_CtlError>
          break;
 800831c:	e000      	b.n	8008320 <USBD_StdItfReq+0x7c>
          break;
 800831e:	bf00      	nop
      }
      break;
 8008320:	e004      	b.n	800832c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fcc1 	bl	8008cac <USBD_CtlError>
      break;
 800832a:	bf00      	nop
  }

  return ret;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	889b      	ldrh	r3, [r3, #4]
 8008348:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008352:	2b40      	cmp	r3, #64	; 0x40
 8008354:	d007      	beq.n	8008366 <USBD_StdEPReq+0x30>
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	f200 8145 	bhi.w	80085e6 <USBD_StdEPReq+0x2b0>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00c      	beq.n	800837a <USBD_StdEPReq+0x44>
 8008360:	2b20      	cmp	r3, #32
 8008362:	f040 8140 	bne.w	80085e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
      break;
 8008378:	e13a      	b.n	80085f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	785b      	ldrb	r3, [r3, #1]
 800837e:	2b03      	cmp	r3, #3
 8008380:	d007      	beq.n	8008392 <USBD_StdEPReq+0x5c>
 8008382:	2b03      	cmp	r3, #3
 8008384:	f300 8129 	bgt.w	80085da <USBD_StdEPReq+0x2a4>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d07f      	beq.n	800848c <USBD_StdEPReq+0x156>
 800838c:	2b01      	cmp	r3, #1
 800838e:	d03c      	beq.n	800840a <USBD_StdEPReq+0xd4>
 8008390:	e123      	b.n	80085da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d002      	beq.n	80083a4 <USBD_StdEPReq+0x6e>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d016      	beq.n	80083d0 <USBD_StdEPReq+0x9a>
 80083a2:	e02c      	b.n	80083fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00d      	beq.n	80083c6 <USBD_StdEPReq+0x90>
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b80      	cmp	r3, #128	; 0x80
 80083ae:	d00a      	beq.n	80083c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 f999 	bl	80096ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083ba:	2180      	movs	r1, #128	; 0x80
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f995 	bl	80096ec <USBD_LL_StallEP>
 80083c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083c4:	e020      	b.n	8008408 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fc6f 	bl	8008cac <USBD_CtlError>
              break;
 80083ce:	e01b      	b.n	8008408 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	885b      	ldrh	r3, [r3, #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10e      	bne.n	80083f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <USBD_StdEPReq+0xc0>
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b80      	cmp	r3, #128	; 0x80
 80083e2:	d008      	beq.n	80083f6 <USBD_StdEPReq+0xc0>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	88db      	ldrh	r3, [r3, #6]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 f97b 	bl	80096ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fd23 	bl	8008e42 <USBD_CtlSendStatus>

              break;
 80083fc:	e004      	b.n	8008408 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fc53 	bl	8008cac <USBD_CtlError>
              break;
 8008406:	bf00      	nop
          }
          break;
 8008408:	e0ec      	b.n	80085e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d002      	beq.n	800841c <USBD_StdEPReq+0xe6>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d016      	beq.n	8008448 <USBD_StdEPReq+0x112>
 800841a:	e030      	b.n	800847e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <USBD_StdEPReq+0x108>
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d00a      	beq.n	800843e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 f95d 	bl	80096ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008432:	2180      	movs	r1, #128	; 0x80
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f959 	bl	80096ec <USBD_LL_StallEP>
 800843a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800843c:	e025      	b.n	800848a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fc33 	bl	8008cac <USBD_CtlError>
              break;
 8008446:	e020      	b.n	800848a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	885b      	ldrh	r3, [r3, #2]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d11b      	bne.n	8008488 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 f97a 	bl	8009758 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fcec 	bl	8008e42 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800847c:	e004      	b.n	8008488 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fc13 	bl	8008cac <USBD_CtlError>
              break;
 8008486:	e000      	b.n	800848a <USBD_StdEPReq+0x154>
              break;
 8008488:	bf00      	nop
          }
          break;
 800848a:	e0ab      	b.n	80085e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d002      	beq.n	800849e <USBD_StdEPReq+0x168>
 8008498:	2b03      	cmp	r3, #3
 800849a:	d032      	beq.n	8008502 <USBD_StdEPReq+0x1cc>
 800849c:	e097      	b.n	80085ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <USBD_StdEPReq+0x17e>
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b80      	cmp	r3, #128	; 0x80
 80084a8:	d004      	beq.n	80084b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fbfd 	bl	8008cac <USBD_CtlError>
                break;
 80084b2:	e091      	b.n	80085d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da0b      	bge.n	80084d4 <USBD_StdEPReq+0x19e>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	3310      	adds	r3, #16
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	4413      	add	r3, r2
 80084d0:	3304      	adds	r3, #4
 80084d2:	e00b      	b.n	80084ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2202      	movs	r2, #2
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fc47 	bl	8008d8e <USBD_CtlSendData>
              break;
 8008500:	e06a      	b.n	80085d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008506:	2b00      	cmp	r3, #0
 8008508:	da11      	bge.n	800852e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	f003 020f 	and.w	r2, r3, #15
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	440b      	add	r3, r1
 800851c:	3324      	adds	r3, #36	; 0x24
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d117      	bne.n	8008554 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fbc0 	bl	8008cac <USBD_CtlError>
                  break;
 800852c:	e054      	b.n	80085d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	f003 020f 	and.w	r2, r3, #15
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d104      	bne.n	8008554 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fbad 	bl	8008cac <USBD_CtlError>
                  break;
 8008552:	e041      	b.n	80085d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008558:	2b00      	cmp	r3, #0
 800855a:	da0b      	bge.n	8008574 <USBD_StdEPReq+0x23e>
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	3310      	adds	r3, #16
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	4413      	add	r3, r2
 8008570:	3304      	adds	r3, #4
 8008572:	e00b      	b.n	800858c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	3304      	adds	r3, #4
 800858c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <USBD_StdEPReq+0x264>
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	2b80      	cmp	r3, #128	; 0x80
 8008598:	d103      	bne.n	80085a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	e00e      	b.n	80085c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 f90c 	bl	80097c4 <USBD_LL_IsStallEP>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2201      	movs	r2, #1
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	e002      	b.n	80085c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2202      	movs	r2, #2
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fbe1 	bl	8008d8e <USBD_CtlSendData>
              break;
 80085cc:	e004      	b.n	80085d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fb6b 	bl	8008cac <USBD_CtlError>
              break;
 80085d6:	bf00      	nop
          }
          break;
 80085d8:	e004      	b.n	80085e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fb65 	bl	8008cac <USBD_CtlError>
          break;
 80085e2:	bf00      	nop
      }
      break;
 80085e4:	e004      	b.n	80085f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb5f 	bl	8008cac <USBD_CtlError>
      break;
 80085ee:	bf00      	nop
  }

  return ret;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	2b0e      	cmp	r3, #14
 800861e:	f200 8152 	bhi.w	80088c6 <USBD_GetDescriptor+0x2ca>
 8008622:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <USBD_GetDescriptor+0x2c>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	08008699 	.word	0x08008699
 800862c:	080086b1 	.word	0x080086b1
 8008630:	080086f1 	.word	0x080086f1
 8008634:	080088c7 	.word	0x080088c7
 8008638:	080088c7 	.word	0x080088c7
 800863c:	08008867 	.word	0x08008867
 8008640:	08008893 	.word	0x08008893
 8008644:	080088c7 	.word	0x080088c7
 8008648:	080088c7 	.word	0x080088c7
 800864c:	080088c7 	.word	0x080088c7
 8008650:	080088c7 	.word	0x080088c7
 8008654:	080088c7 	.word	0x080088c7
 8008658:	080088c7 	.word	0x080088c7
 800865c:	080088c7 	.word	0x080088c7
 8008660:	08008665 	.word	0x08008665
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	7c12      	ldrb	r2, [r2, #16]
 800867c:	f107 0108 	add.w	r1, r7, #8
 8008680:	4610      	mov	r0, r2
 8008682:	4798      	blx	r3
 8008684:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008686:	e126      	b.n	80088d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb0e 	bl	8008cac <USBD_CtlError>
        err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
      break;
 8008696:	e11e      	b.n	80088d6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
      break;
 80086ae:	e112      	b.n	80088d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7c1b      	ldrb	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10d      	bne.n	80086d4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	f107 0208 	add.w	r2, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	2202      	movs	r2, #2
 80086d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086d2:	e100      	b.n	80088d6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	f107 0208 	add.w	r2, r7, #8
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
 80086e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	2202      	movs	r2, #2
 80086ec:	701a      	strb	r2, [r3, #0]
      break;
 80086ee:	e0f2      	b.n	80088d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	885b      	ldrh	r3, [r3, #2]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	f200 80ac 	bhi.w	8008854 <USBD_GetDescriptor+0x258>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <USBD_GetDescriptor+0x108>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	0800871d 	.word	0x0800871d
 8008708:	08008751 	.word	0x08008751
 800870c:	08008785 	.word	0x08008785
 8008710:	080087b9 	.word	0x080087b9
 8008714:	080087ed 	.word	0x080087ed
 8008718:	08008821 	.word	0x08008821
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	7c12      	ldrb	r2, [r2, #16]
 8008734:	f107 0108 	add.w	r1, r7, #8
 8008738:	4610      	mov	r0, r2
 800873a:	4798      	blx	r3
 800873c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873e:	e091      	b.n	8008864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fab2 	bl	8008cac <USBD_CtlError>
            err++;
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	3301      	adds	r3, #1
 800874c:	72fb      	strb	r3, [r7, #11]
          break;
 800874e:	e089      	b.n	8008864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	7c12      	ldrb	r2, [r2, #16]
 8008768:	f107 0108 	add.w	r1, r7, #8
 800876c:	4610      	mov	r0, r2
 800876e:	4798      	blx	r3
 8008770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008772:	e077      	b.n	8008864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa98 	bl	8008cac <USBD_CtlError>
            err++;
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	3301      	adds	r3, #1
 8008780:	72fb      	strb	r3, [r7, #11]
          break;
 8008782:	e06f      	b.n	8008864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e05d      	b.n	8008864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa7e 	bl	8008cac <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e055      	b.n	8008864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7c12      	ldrb	r2, [r2, #16]
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
 80087d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087da:	e043      	b.n	8008864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa64 	bl	8008cac <USBD_CtlError>
            err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ea:	e03b      	b.n	8008864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e029      	b.n	8008864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa4a 	bl	8008cac <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e021      	b.n	8008864 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e00f      	b.n	8008864 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa30 	bl	8008cac <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e007      	b.n	8008864 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa28 	bl	8008cac <USBD_CtlError>
          err++;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	3301      	adds	r3, #1
 8008860:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008862:	bf00      	nop
      }
      break;
 8008864:	e037      	b.n	80088d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	7c1b      	ldrb	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008876:	f107 0208 	add.w	r2, r7, #8
 800887a:	4610      	mov	r0, r2
 800887c:	4798      	blx	r3
 800887e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008880:	e029      	b.n	80088d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fa11 	bl	8008cac <USBD_CtlError>
        err++;
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	3301      	adds	r3, #1
 800888e:	72fb      	strb	r3, [r7, #11]
      break;
 8008890:	e021      	b.n	80088d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	7c1b      	ldrb	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10d      	bne.n	80088b6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	f107 0208 	add.w	r2, r7, #8
 80088a6:	4610      	mov	r0, r2
 80088a8:	4798      	blx	r3
 80088aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	2207      	movs	r2, #7
 80088b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b4:	e00f      	b.n	80088d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f9f7 	bl	8008cac <USBD_CtlError>
        err++;
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	3301      	adds	r3, #1
 80088c2:	72fb      	strb	r3, [r7, #11]
      break;
 80088c4:	e007      	b.n	80088d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f9ef 	bl	8008cac <USBD_CtlError>
      err++;
 80088ce:	7afb      	ldrb	r3, [r7, #11]
 80088d0:	3301      	adds	r3, #1
 80088d2:	72fb      	strb	r3, [r7, #11]
      break;
 80088d4:	bf00      	nop
  }

  if (err != 0U)
 80088d6:	7afb      	ldrb	r3, [r7, #11]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d11e      	bne.n	800891a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	88db      	ldrh	r3, [r3, #6]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d016      	beq.n	8008912 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80088e4:	893b      	ldrh	r3, [r7, #8]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00e      	beq.n	8008908 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	88da      	ldrh	r2, [r3, #6]
 80088ee:	893b      	ldrh	r3, [r7, #8]
 80088f0:	4293      	cmp	r3, r2
 80088f2:	bf28      	it	cs
 80088f4:	4613      	movcs	r3, r2
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088fa:	893b      	ldrh	r3, [r7, #8]
 80088fc:	461a      	mov	r2, r3
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fa44 	bl	8008d8e <USBD_CtlSendData>
 8008906:	e009      	b.n	800891c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f9ce 	bl	8008cac <USBD_CtlError>
 8008910:	e004      	b.n	800891c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa95 	bl	8008e42 <USBD_CtlSendStatus>
 8008918:	e000      	b.n	800891c <USBD_GetDescriptor+0x320>
    return;
 800891a:	bf00      	nop
  }
}
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop

08008924 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	889b      	ldrh	r3, [r3, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d131      	bne.n	800899a <USBD_SetAddress+0x76>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	88db      	ldrh	r3, [r3, #6]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d12d      	bne.n	800899a <USBD_SetAddress+0x76>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	885b      	ldrh	r3, [r3, #2]
 8008942:	2b7f      	cmp	r3, #127	; 0x7f
 8008944:	d829      	bhi.n	800899a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	885b      	ldrh	r3, [r3, #2]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008950:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b03      	cmp	r3, #3
 800895c:	d104      	bne.n	8008968 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9a3 	bl	8008cac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008966:	e01d      	b.n	80089a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	7bfa      	ldrb	r2, [r7, #15]
 800896c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 ff53 	bl	8009820 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa61 	bl	8008e42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d004      	beq.n	8008990 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2202      	movs	r2, #2
 800898a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898e:	e009      	b.n	80089a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008998:	e004      	b.n	80089a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f985 	bl	8008cac <USBD_CtlError>
  }
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	885b      	ldrh	r3, [r3, #2]
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	4b4c      	ldr	r3, [pc, #304]	; (8008af4 <USBD_SetConfig+0x148>)
 80089c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089c4:	4b4b      	ldr	r3, [pc, #300]	; (8008af4 <USBD_SetConfig+0x148>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d905      	bls.n	80089d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f96c 	bl	8008cac <USBD_CtlError>
    return USBD_FAIL;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e088      	b.n	8008aea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d002      	beq.n	80089ea <USBD_SetConfig+0x3e>
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d025      	beq.n	8008a34 <USBD_SetConfig+0x88>
 80089e8:	e071      	b.n	8008ace <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089ea:	4b42      	ldr	r3, [pc, #264]	; (8008af4 <USBD_SetConfig+0x148>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01c      	beq.n	8008a2c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80089f2:	4b40      	ldr	r3, [pc, #256]	; (8008af4 <USBD_SetConfig+0x148>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089fc:	4b3d      	ldr	r3, [pc, #244]	; (8008af4 <USBD_SetConfig+0x148>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff f992 	bl	8007d2c <USBD_SetClassConfig>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d004      	beq.n	8008a1c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f949 	bl	8008cac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a1a:	e065      	b.n	8008ae8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fa10 	bl	8008e42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2203      	movs	r2, #3
 8008a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a2a:	e05d      	b.n	8008ae8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fa08 	bl	8008e42 <USBD_CtlSendStatus>
      break;
 8008a32:	e059      	b.n	8008ae8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a34:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <USBD_SetConfig+0x148>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d112      	bne.n	8008a62 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a44:	4b2b      	ldr	r3, [pc, #172]	; (8008af4 <USBD_SetConfig+0x148>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a4e:	4b29      	ldr	r3, [pc, #164]	; (8008af4 <USBD_SetConfig+0x148>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff f985 	bl	8007d64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f9f1 	bl	8008e42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a60:	e042      	b.n	8008ae8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <USBD_SetConfig+0x148>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d02a      	beq.n	8008ac6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff f973 	bl	8007d64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a7e:	4b1d      	ldr	r3, [pc, #116]	; (8008af4 <USBD_SetConfig+0x148>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a88:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <USBD_SetConfig+0x148>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff f94c 	bl	8007d2c <USBD_SetClassConfig>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00f      	beq.n	8008abe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f903 	bl	8008cac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff f958 	bl	8007d64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008abc:	e014      	b.n	8008ae8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9bf 	bl	8008e42 <USBD_CtlSendStatus>
      break;
 8008ac4:	e010      	b.n	8008ae8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9bb 	bl	8008e42 <USBD_CtlSendStatus>
      break;
 8008acc:	e00c      	b.n	8008ae8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f8eb 	bl	8008cac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ad6:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <USBD_SetConfig+0x148>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff f941 	bl	8007d64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae6:	bf00      	nop
  }

  return ret;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	2000039c 	.word	0x2000039c

08008af8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	88db      	ldrh	r3, [r3, #6]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d004      	beq.n	8008b14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f8cd 	bl	8008cac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b12:	e023      	b.n	8008b5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	dc02      	bgt.n	8008b26 <USBD_GetConfig+0x2e>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dc03      	bgt.n	8008b2c <USBD_GetConfig+0x34>
 8008b24:	e015      	b.n	8008b52 <USBD_GetConfig+0x5a>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d00b      	beq.n	8008b42 <USBD_GetConfig+0x4a>
 8008b2a:	e012      	b.n	8008b52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3308      	adds	r3, #8
 8008b36:	2201      	movs	r2, #1
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f927 	bl	8008d8e <USBD_CtlSendData>
        break;
 8008b40:	e00c      	b.n	8008b5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3304      	adds	r3, #4
 8008b46:	2201      	movs	r2, #1
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f91f 	bl	8008d8e <USBD_CtlSendData>
        break;
 8008b50:	e004      	b.n	8008b5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8a9 	bl	8008cac <USBD_CtlError>
        break;
 8008b5a:	bf00      	nop
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d81e      	bhi.n	8008bba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	88db      	ldrh	r3, [r3, #6]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d004      	beq.n	8008b8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f890 	bl	8008cac <USBD_CtlError>
        break;
 8008b8c:	e01a      	b.n	8008bc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f043 0202 	orr.w	r2, r3, #2
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	330c      	adds	r3, #12
 8008bae:	2202      	movs	r2, #2
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f8eb 	bl	8008d8e <USBD_CtlSendData>
      break;
 8008bb8:	e004      	b.n	8008bc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f875 	bl	8008cac <USBD_CtlError>
      break;
 8008bc2:	bf00      	nop
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d106      	bne.n	8008bec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f92b 	bl	8008e42 <USBD_CtlSendStatus>
  }
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d80b      	bhi.n	8008c24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	885b      	ldrh	r3, [r3, #2]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d10c      	bne.n	8008c2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f910 	bl	8008e42 <USBD_CtlSendStatus>
      }
      break;
 8008c22:	e004      	b.n	8008c2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f840 	bl	8008cac <USBD_CtlError>
      break;
 8008c2c:	e000      	b.n	8008c30 <USBD_ClrFeature+0x3c>
      break;
 8008c2e:	bf00      	nop
  }
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f7ff fa92 	bl	800818c <SWAPBYTE>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff fa85 	bl	800818c <SWAPBYTE>
 8008c82:	4603      	mov	r3, r0
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3301      	adds	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fa78 	bl	800818c <SWAPBYTE>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	80da      	strh	r2, [r3, #6]
}
 8008ca4:	bf00      	nop
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cb6:	2180      	movs	r1, #128	; 0x80
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fd17 	bl	80096ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fd13 	bl	80096ec <USBD_LL_StallEP>
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b086      	sub	sp, #24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d036      	beq.n	8008d52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ce8:	6938      	ldr	r0, [r7, #16]
 8008cea:	f000 f836 	bl	8008d5a <USBD_GetLen>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	4413      	add	r3, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	4413      	add	r3, r2
 8008d14:	2203      	movs	r2, #3
 8008d16:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d1e:	e013      	b.n	8008d48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	4413      	add	r3, r2
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	7812      	ldrb	r2, [r2, #0]
 8008d2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	613b      	str	r3, [r7, #16]
    idx++;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	3301      	adds	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	3301      	adds	r3, #1
 8008d46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e7      	bne.n	8008d20 <USBD_GetString+0x52>
 8008d50:	e000      	b.n	8008d54 <USBD_GetString+0x86>
    return;
 8008d52:	bf00      	nop
  }
}
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d6a:	e005      	b.n	8008d78 <USBD_GetLen+0x1e>
  {
    len++;
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1f5      	bne.n	8008d6c <USBD_GetLen+0x12>
  }

  return len;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	2100      	movs	r1, #0
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fd69 	bl	800988c <USBD_LL_Transmit>

  return USBD_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fd58 	bl	800988c <USBD_LL_Transmit>

  return USBD_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2203      	movs	r2, #3
 8008df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	2100      	movs	r1, #0
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 fd73 	bl	80098fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	2100      	movs	r1, #0
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 fd62 	bl	80098fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e52:	2300      	movs	r3, #0
 8008e54:	2200      	movs	r2, #0
 8008e56:	2100      	movs	r1, #0
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fd17 	bl	800988c <USBD_LL_Transmit>

  return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2205      	movs	r2, #5
 8008e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fd3c 	bl	80098fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e94:	2200      	movs	r2, #0
 8008e96:	4912      	ldr	r1, [pc, #72]	; (8008ee0 <MX_USB_DEVICE_Init+0x50>)
 8008e98:	4812      	ldr	r0, [pc, #72]	; (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008e9a:	f7fe fed9 	bl	8007c50 <USBD_Init>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ea4:	f7f8 f96e 	bl	8001184 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ea8:	490f      	ldr	r1, [pc, #60]	; (8008ee8 <MX_USB_DEVICE_Init+0x58>)
 8008eaa:	480e      	ldr	r0, [pc, #56]	; (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008eac:	f7fe ff00 	bl	8007cb0 <USBD_RegisterClass>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008eb6:	f7f8 f965 	bl	8001184 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008eba:	490c      	ldr	r1, [pc, #48]	; (8008eec <MX_USB_DEVICE_Init+0x5c>)
 8008ebc:	4809      	ldr	r0, [pc, #36]	; (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008ebe:	f7fe fe21 	bl	8007b04 <USBD_CDC_RegisterInterface>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ec8:	f7f8 f95c 	bl	8001184 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ecc:	4805      	ldr	r0, [pc, #20]	; (8008ee4 <MX_USB_DEVICE_Init+0x54>)
 8008ece:	f7fe ff16 	bl	8007cfe <USBD_Start>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ed8:	f7f8 f954 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008edc:	bf00      	nop
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000130 	.word	0x20000130
 8008ee4:	20000670 	.word	0x20000670
 8008ee8:	20000018 	.word	0x20000018
 8008eec:	2000011c 	.word	0x2000011c

08008ef0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4905      	ldr	r1, [pc, #20]	; (8008f0c <CDC_Init_FS+0x1c>)
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <CDC_Init_FS+0x20>)
 8008efa:	f7fe fe18 	bl	8007b2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008efe:	4905      	ldr	r1, [pc, #20]	; (8008f14 <CDC_Init_FS+0x24>)
 8008f00:	4803      	ldr	r0, [pc, #12]	; (8008f10 <CDC_Init_FS+0x20>)
 8008f02:	f7fe fe32 	bl	8007b6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000d28 	.word	0x20000d28
 8008f10:	20000670 	.word	0x20000670
 8008f14:	20000940 	.word	0x20000940

08008f18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b23      	cmp	r3, #35	; 0x23
 8008f3c:	d84a      	bhi.n	8008fd4 <CDC_Control_FS+0xac>
 8008f3e:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <CDC_Control_FS+0x1c>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008fd5 	.word	0x08008fd5
 8008f48:	08008fd5 	.word	0x08008fd5
 8008f4c:	08008fd5 	.word	0x08008fd5
 8008f50:	08008fd5 	.word	0x08008fd5
 8008f54:	08008fd5 	.word	0x08008fd5
 8008f58:	08008fd5 	.word	0x08008fd5
 8008f5c:	08008fd5 	.word	0x08008fd5
 8008f60:	08008fd5 	.word	0x08008fd5
 8008f64:	08008fd5 	.word	0x08008fd5
 8008f68:	08008fd5 	.word	0x08008fd5
 8008f6c:	08008fd5 	.word	0x08008fd5
 8008f70:	08008fd5 	.word	0x08008fd5
 8008f74:	08008fd5 	.word	0x08008fd5
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08008fd5 	.word	0x08008fd5
 8008f80:	08008fd5 	.word	0x08008fd5
 8008f84:	08008fd5 	.word	0x08008fd5
 8008f88:	08008fd5 	.word	0x08008fd5
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fd5 	.word	0x08008fd5
 8008f98:	08008fd5 	.word	0x08008fd5
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fd5 	.word	0x08008fd5
 8008fa4:	08008fd5 	.word	0x08008fd5
 8008fa8:	08008fd5 	.word	0x08008fd5
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fd5 	.word	0x08008fd5
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fd5 	.word	0x08008fd5
 8008fc0:	08008fd5 	.word	0x08008fd5
 8008fc4:	08008fd5 	.word	0x08008fd5
 8008fc8:	08008fd5 	.word	0x08008fd5
 8008fcc:	08008fd5 	.word	0x08008fd5
 8008fd0:	08008fd5 	.word	0x08008fd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fd4:	bf00      	nop
  }

  return (USBD_OK);
 8008fd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4810      	ldr	r0, [pc, #64]	; (8009034 <CDC_Receive_FS+0x50>)
 8008ff2:	f7fe fdba 	bl	8007b6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ff6:	480f      	ldr	r0, [pc, #60]	; (8009034 <CDC_Receive_FS+0x50>)
 8008ff8:	f7fe fe00 	bl	8007bfc <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	73fb      	strb	r3, [r7, #15]
  memset (usbBuffer, '\0', 64);
 8009002:	2240      	movs	r2, #64	; 0x40
 8009004:	2100      	movs	r1, #0
 8009006:	480c      	ldr	r0, [pc, #48]	; (8009038 <CDC_Receive_FS+0x54>)
 8009008:	f000 fd50 	bl	8009aac <memset>
  memcpy (usbBuffer, Buf, len);
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	461a      	mov	r2, r3
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	4809      	ldr	r0, [pc, #36]	; (8009038 <CDC_Receive_FS+0x54>)
 8009014:	f000 fd3c 	bl	8009a90 <memcpy>
  memset (Buf, '\0', len);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	461a      	mov	r2, r3
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fd44 	bl	8009aac <memset>
  onUsbReceive();
 8009024:	f7f7 fffe 	bl	8001024 <onUsbReceive>
  return (USBD_OK);
 8009028:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000670 	.word	0x20000670
 8009038:	2000062c 	.word	0x2000062c

0800903c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <CDC_Transmit_FS+0x48>)
 800904e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009052:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800905e:	2301      	movs	r3, #1
 8009060:	e00b      	b.n	800907a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009062:	887b      	ldrh	r3, [r7, #2]
 8009064:	461a      	mov	r2, r3
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	4806      	ldr	r0, [pc, #24]	; (8009084 <CDC_Transmit_FS+0x48>)
 800906a:	f7fe fd60 	bl	8007b2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800906e:	4805      	ldr	r0, [pc, #20]	; (8009084 <CDC_Transmit_FS+0x48>)
 8009070:	f7fe fd94 	bl	8007b9c <USBD_CDC_TransmitPacket>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20000670 	.word	0x20000670

08009088 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800909a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	6039      	str	r1, [r7, #0]
 80090b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2212      	movs	r2, #18
 80090bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090be:	4b03      	ldr	r3, [pc, #12]	; (80090cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	20000150 	.word	0x20000150

080090d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2204      	movs	r2, #4
 80090e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090e2:	4b03      	ldr	r3, [pc, #12]	; (80090f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	20000170 	.word	0x20000170

080090f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d105      	bne.n	8009112 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4907      	ldr	r1, [pc, #28]	; (8009128 <USBD_FS_ProductStrDescriptor+0x34>)
 800910a:	4808      	ldr	r0, [pc, #32]	; (800912c <USBD_FS_ProductStrDescriptor+0x38>)
 800910c:	f7ff fddf 	bl	8008cce <USBD_GetString>
 8009110:	e004      	b.n	800911c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4904      	ldr	r1, [pc, #16]	; (8009128 <USBD_FS_ProductStrDescriptor+0x34>)
 8009116:	4805      	ldr	r0, [pc, #20]	; (800912c <USBD_FS_ProductStrDescriptor+0x38>)
 8009118:	f7ff fdd9 	bl	8008cce <USBD_GetString>
  }
  return USBD_StrDesc;
 800911c:	4b02      	ldr	r3, [pc, #8]	; (8009128 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20001110 	.word	0x20001110
 800912c:	0800c828 	.word	0x0800c828

08009130 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	4904      	ldr	r1, [pc, #16]	; (8009150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009140:	4804      	ldr	r0, [pc, #16]	; (8009154 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009142:	f7ff fdc4 	bl	8008cce <USBD_GetString>
  return USBD_StrDesc;
 8009146:	4b02      	ldr	r3, [pc, #8]	; (8009150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20001110 	.word	0x20001110
 8009154:	0800c840 	.word	0x0800c840

08009158 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	6039      	str	r1, [r7, #0]
 8009162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	221a      	movs	r2, #26
 8009168:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800916a:	f000 f855 	bl	8009218 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800916e:	4b02      	ldr	r3, [pc, #8]	; (8009178 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000174 	.word	0x20000174

0800917c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d105      	bne.n	800919a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	4907      	ldr	r1, [pc, #28]	; (80091b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009192:	4808      	ldr	r0, [pc, #32]	; (80091b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009194:	f7ff fd9b 	bl	8008cce <USBD_GetString>
 8009198:	e004      	b.n	80091a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	4904      	ldr	r1, [pc, #16]	; (80091b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800919e:	4805      	ldr	r0, [pc, #20]	; (80091b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091a0:	f7ff fd95 	bl	8008cce <USBD_GetString>
  }
  return USBD_StrDesc;
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20001110 	.word	0x20001110
 80091b4:	0800c854 	.word	0x0800c854

080091b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	4907      	ldr	r1, [pc, #28]	; (80091ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091ce:	4808      	ldr	r0, [pc, #32]	; (80091f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091d0:	f7ff fd7d 	bl	8008cce <USBD_GetString>
 80091d4:	e004      	b.n	80091e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	4904      	ldr	r1, [pc, #16]	; (80091ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091da:	4805      	ldr	r0, [pc, #20]	; (80091f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091dc:	f7ff fd77 	bl	8008cce <USBD_GetString>
  }
  return USBD_StrDesc;
 80091e0:	4b02      	ldr	r3, [pc, #8]	; (80091ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20001110 	.word	0x20001110
 80091f0:	0800c860 	.word	0x0800c860

080091f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	220c      	movs	r2, #12
 8009204:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009206:	4b03      	ldr	r3, [pc, #12]	; (8009214 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	20000164 	.word	0x20000164

08009218 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800921e:	4b0f      	ldr	r3, [pc, #60]	; (800925c <Get_SerialNum+0x44>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009224:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <Get_SerialNum+0x48>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800922a:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <Get_SerialNum+0x4c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800923e:	2208      	movs	r2, #8
 8009240:	4909      	ldr	r1, [pc, #36]	; (8009268 <Get_SerialNum+0x50>)
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f814 	bl	8009270 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009248:	2204      	movs	r2, #4
 800924a:	4908      	ldr	r1, [pc, #32]	; (800926c <Get_SerialNum+0x54>)
 800924c:	68b8      	ldr	r0, [r7, #8]
 800924e:	f000 f80f 	bl	8009270 <IntToUnicode>
  }
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	1fff7590 	.word	0x1fff7590
 8009260:	1fff7594 	.word	0x1fff7594
 8009264:	1fff7598 	.word	0x1fff7598
 8009268:	20000176 	.word	0x20000176
 800926c:	20000186 	.word	0x20000186

08009270 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
 8009286:	e027      	b.n	80092d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	0f1b      	lsrs	r3, r3, #28
 800928c:	2b09      	cmp	r3, #9
 800928e:	d80b      	bhi.n	80092a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	0f1b      	lsrs	r3, r3, #28
 8009294:	b2da      	uxtb	r2, r3
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4619      	mov	r1, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	440b      	add	r3, r1
 80092a0:	3230      	adds	r2, #48	; 0x30
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e00a      	b.n	80092be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	0f1b      	lsrs	r3, r3, #28
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	4619      	mov	r1, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	440b      	add	r3, r1
 80092b8:	3237      	adds	r2, #55	; 0x37
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	3301      	adds	r3, #1
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	4413      	add	r3, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	3301      	adds	r3, #1
 80092d6:	75fb      	strb	r3, [r7, #23]
 80092d8:	7dfa      	ldrb	r2, [r7, #23]
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d3d3      	bcc.n	8009288 <IntToUnicode+0x18>
  }
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	; 0x28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f8:	f107 0314 	add.w	r3, r7, #20
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	605a      	str	r2, [r3, #4]
 8009302:	609a      	str	r2, [r3, #8]
 8009304:	60da      	str	r2, [r3, #12]
 8009306:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1c      	ldr	r2, [pc, #112]	; (8009380 <HAL_PCD_MspInit+0x90>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d131      	bne.n	8009376 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <HAL_PCD_MspInit+0x94>)
 8009314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009316:	4a1b      	ldr	r2, [pc, #108]	; (8009384 <HAL_PCD_MspInit+0x94>)
 8009318:	f043 0301 	orr.w	r3, r3, #1
 800931c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800931e:	4b19      	ldr	r3, [pc, #100]	; (8009384 <HAL_PCD_MspInit+0x94>)
 8009320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800932a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800932e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009330:	2302      	movs	r3, #2
 8009332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009334:	2300      	movs	r3, #0
 8009336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009338:	2303      	movs	r3, #3
 800933a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800933c:	230a      	movs	r3, #10
 800933e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009340:	f107 0314 	add.w	r3, r7, #20
 8009344:	4619      	mov	r1, r3
 8009346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800934a:	f7f8 fa89 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800934e:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <HAL_PCD_MspInit+0x94>)
 8009350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009352:	4a0c      	ldr	r2, [pc, #48]	; (8009384 <HAL_PCD_MspInit+0x94>)
 8009354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009358:	6593      	str	r3, [r2, #88]	; 0x58
 800935a:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <HAL_PCD_MspInit+0x94>)
 800935c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	2043      	movs	r0, #67	; 0x43
 800936c:	f7f8 fa41 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009370:	2043      	movs	r0, #67	; 0x43
 8009372:	f7f8 fa5a 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009376:	bf00      	nop
 8009378:	3728      	adds	r7, #40	; 0x28
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	40006800 	.word	0x40006800
 8009384:	40021000 	.word	0x40021000

08009388 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7fe fcf8 	bl	8007d94 <USBD_LL_SetupStage>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	440b      	add	r3, r1
 80093cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	4619      	mov	r1, r3
 80093d6:	f7fe fd32 	bl	8007e3e <USBD_LL_DataOutStage>
}
 80093da:	bf00      	nop
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	460b      	mov	r3, r1
 80093ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	440b      	add	r3, r1
 8009402:	333c      	adds	r3, #60	; 0x3c
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	78fb      	ldrb	r3, [r7, #3]
 8009408:	4619      	mov	r1, r3
 800940a:	f7fe fd7b 	bl	8007f04 <USBD_LL_DataInStage>
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe fe8f 	bl	8008148 <USBD_LL_SOF>
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800943a:	2301      	movs	r3, #1
 800943c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d001      	beq.n	800944a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009446:	f7f7 fe9d 	bl	8001184 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009450:	7bfa      	ldrb	r2, [r7, #15]
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe fe39 	bl	80080cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009460:	4618      	mov	r0, r3
 8009462:	f7fe fde5 	bl	8008030 <USBD_LL_Reset>
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe fe34 	bl	80080ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <HAL_PCD_SuspendCallback+0x30>)
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	4a03      	ldr	r2, [pc, #12]	; (80094a0 <HAL_PCD_SuspendCallback+0x30>)
 8009492:	f043 0306 	orr.w	r3, r3, #6
 8009496:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	e000ed00 	.word	0xe000ed00

080094a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094b4:	4b08      	ldr	r3, [pc, #32]	; (80094d8 <HAL_PCD_ResumeCallback+0x34>)
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	4a07      	ldr	r2, [pc, #28]	; (80094d8 <HAL_PCD_ResumeCallback+0x34>)
 80094ba:	f023 0306 	bic.w	r3, r3, #6
 80094be:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80094c0:	f000 fab6 	bl	8009a30 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fe24 	bl	8008118 <USBD_LL_Resume>
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	e000ed00 	.word	0xe000ed00

080094dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80094e4:	f7fa f87a 	bl	80035dc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80094e8:	4a2b      	ldr	r2, [pc, #172]	; (8009598 <USBD_LL_Init+0xbc>)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a29      	ldr	r2, [pc, #164]	; (8009598 <USBD_LL_Init+0xbc>)
 80094f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80094f8:	4b27      	ldr	r3, [pc, #156]	; (8009598 <USBD_LL_Init+0xbc>)
 80094fa:	4a28      	ldr	r2, [pc, #160]	; (800959c <USBD_LL_Init+0xc0>)
 80094fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80094fe:	4b26      	ldr	r3, [pc, #152]	; (8009598 <USBD_LL_Init+0xbc>)
 8009500:	2208      	movs	r2, #8
 8009502:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009504:	4b24      	ldr	r3, [pc, #144]	; (8009598 <USBD_LL_Init+0xbc>)
 8009506:	2202      	movs	r2, #2
 8009508:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800950a:	4b23      	ldr	r3, [pc, #140]	; (8009598 <USBD_LL_Init+0xbc>)
 800950c:	2202      	movs	r2, #2
 800950e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009510:	4b21      	ldr	r3, [pc, #132]	; (8009598 <USBD_LL_Init+0xbc>)
 8009512:	2200      	movs	r2, #0
 8009514:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009516:	4b20      	ldr	r3, [pc, #128]	; (8009598 <USBD_LL_Init+0xbc>)
 8009518:	2200      	movs	r2, #0
 800951a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <USBD_LL_Init+0xbc>)
 800951e:	2200      	movs	r2, #0
 8009520:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009522:	4b1d      	ldr	r3, [pc, #116]	; (8009598 <USBD_LL_Init+0xbc>)
 8009524:	2200      	movs	r2, #0
 8009526:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009528:	481b      	ldr	r0, [pc, #108]	; (8009598 <USBD_LL_Init+0xbc>)
 800952a:	f7f8 fb23 	bl	8001b74 <HAL_PCD_Init>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009534:	f7f7 fe26 	bl	8001184 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800953e:	2318      	movs	r3, #24
 8009540:	2200      	movs	r2, #0
 8009542:	2100      	movs	r1, #0
 8009544:	f7f9 ff78 	bl	8003438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800954e:	2358      	movs	r3, #88	; 0x58
 8009550:	2200      	movs	r2, #0
 8009552:	2180      	movs	r1, #128	; 0x80
 8009554:	f7f9 ff70 	bl	8003438 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800955e:	23c0      	movs	r3, #192	; 0xc0
 8009560:	2200      	movs	r2, #0
 8009562:	2181      	movs	r1, #129	; 0x81
 8009564:	f7f9 ff68 	bl	8003438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800956e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009572:	2200      	movs	r2, #0
 8009574:	2101      	movs	r1, #1
 8009576:	f7f9 ff5f 	bl	8003438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009584:	2200      	movs	r2, #0
 8009586:	2182      	movs	r1, #130	; 0x82
 8009588:	f7f9 ff56 	bl	8003438 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20001310 	.word	0x20001310
 800959c:	40006800 	.word	0x40006800

080095a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f8 fbee 	bl	8001d98 <HAL_PCD_Start>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d816      	bhi.n	80095f4 <USBD_LL_Start+0x54>
 80095c6:	a201      	add	r2, pc, #4	; (adr r2, 80095cc <USBD_LL_Start+0x2c>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	080095dd 	.word	0x080095dd
 80095d0:	080095e3 	.word	0x080095e3
 80095d4:	080095e9 	.word	0x080095e9
 80095d8:	080095ef 	.word	0x080095ef
    case HAL_OK :
      usb_status = USBD_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
    break;
 80095e0:	e00b      	b.n	80095fa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095e2:	2303      	movs	r3, #3
 80095e4:	73fb      	strb	r3, [r7, #15]
    break;
 80095e6:	e008      	b.n	80095fa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095e8:	2301      	movs	r3, #1
 80095ea:	73fb      	strb	r3, [r7, #15]
    break;
 80095ec:	e005      	b.n	80095fa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ee:	2303      	movs	r3, #3
 80095f0:	73fb      	strb	r3, [r7, #15]
    break;
 80095f2:	e002      	b.n	80095fa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80095f4:	2303      	movs	r3, #3
 80095f6:	73fb      	strb	r3, [r7, #15]
    break;
 80095f8:	bf00      	nop
  }
  return usb_status;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	461a      	mov	r2, r3
 8009612:	4603      	mov	r3, r0
 8009614:	70fb      	strb	r3, [r7, #3]
 8009616:	460b      	mov	r3, r1
 8009618:	70bb      	strb	r3, [r7, #2]
 800961a:	4613      	mov	r3, r2
 800961c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800962c:	78bb      	ldrb	r3, [r7, #2]
 800962e:	883a      	ldrh	r2, [r7, #0]
 8009630:	78f9      	ldrb	r1, [r7, #3]
 8009632:	f7f8 fd46 	bl	80020c2 <HAL_PCD_EP_Open>
 8009636:	4603      	mov	r3, r0
 8009638:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d817      	bhi.n	8009670 <USBD_LL_OpenEP+0x6c>
 8009640:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <USBD_LL_OpenEP+0x44>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009659 	.word	0x08009659
 800964c:	0800965f 	.word	0x0800965f
 8009650:	08009665 	.word	0x08009665
 8009654:	0800966b 	.word	0x0800966b
    case HAL_OK :
      usb_status = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
    break;
 800965c:	e00b      	b.n	8009676 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800965e:	2303      	movs	r3, #3
 8009660:	73fb      	strb	r3, [r7, #15]
    break;
 8009662:	e008      	b.n	8009676 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009664:	2301      	movs	r3, #1
 8009666:	73fb      	strb	r3, [r7, #15]
    break;
 8009668:	e005      	b.n	8009676 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	73fb      	strb	r3, [r7, #15]
    break;
 800966e:	e002      	b.n	8009676 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009670:	2303      	movs	r3, #3
 8009672:	73fb      	strb	r3, [r7, #15]
    break;
 8009674:	bf00      	nop
  }
  return usb_status;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f8 fd75 	bl	800218e <HAL_PCD_EP_Close>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d816      	bhi.n	80096dc <USBD_LL_CloseEP+0x5c>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <USBD_LL_CloseEP+0x34>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096cb 	.word	0x080096cb
 80096bc:	080096d1 	.word	0x080096d1
 80096c0:	080096d7 	.word	0x080096d7
    case HAL_OK :
      usb_status = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
    break;
 80096c8:	e00b      	b.n	80096e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096ca:	2303      	movs	r3, #3
 80096cc:	73fb      	strb	r3, [r7, #15]
    break;
 80096ce:	e008      	b.n	80096e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096d0:	2301      	movs	r3, #1
 80096d2:	73fb      	strb	r3, [r7, #15]
    break;
 80096d4:	e005      	b.n	80096e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096d6:	2303      	movs	r3, #3
 80096d8:	73fb      	strb	r3, [r7, #15]
    break;
 80096da:	e002      	b.n	80096e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	73fb      	strb	r3, [r7, #15]
    break;
 80096e0:	bf00      	nop
  }
  return usb_status;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7f8 fe1f 	bl	800234e <HAL_PCD_EP_SetStall>
 8009710:	4603      	mov	r3, r0
 8009712:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	2b03      	cmp	r3, #3
 8009718:	d816      	bhi.n	8009748 <USBD_LL_StallEP+0x5c>
 800971a:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <USBD_LL_StallEP+0x34>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009731 	.word	0x08009731
 8009724:	08009737 	.word	0x08009737
 8009728:	0800973d 	.word	0x0800973d
 800972c:	08009743 	.word	0x08009743
    case HAL_OK :
      usb_status = USBD_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]
    break;
 8009734:	e00b      	b.n	800974e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009736:	2303      	movs	r3, #3
 8009738:	73fb      	strb	r3, [r7, #15]
    break;
 800973a:	e008      	b.n	800974e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
    break;
 8009740:	e005      	b.n	800974e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009742:	2303      	movs	r3, #3
 8009744:	73fb      	strb	r3, [r7, #15]
    break;
 8009746:	e002      	b.n	800974e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009748:	2303      	movs	r3, #3
 800974a:	73fb      	strb	r3, [r7, #15]
    break;
 800974c:	bf00      	nop
  }
  return usb_status;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7f8 fe49 	bl	800240e <HAL_PCD_EP_ClrStall>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b03      	cmp	r3, #3
 8009784:	d816      	bhi.n	80097b4 <USBD_LL_ClearStallEP+0x5c>
 8009786:	a201      	add	r2, pc, #4	; (adr r2, 800978c <USBD_LL_ClearStallEP+0x34>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	0800979d 	.word	0x0800979d
 8009790:	080097a3 	.word	0x080097a3
 8009794:	080097a9 	.word	0x080097a9
 8009798:	080097af 	.word	0x080097af
    case HAL_OK :
      usb_status = USBD_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
    break;
 80097a0:	e00b      	b.n	80097ba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097a2:	2303      	movs	r3, #3
 80097a4:	73fb      	strb	r3, [r7, #15]
    break;
 80097a6:	e008      	b.n	80097ba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097a8:	2301      	movs	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]
    break;
 80097ac:	e005      	b.n	80097ba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ae:	2303      	movs	r3, #3
 80097b0:	73fb      	strb	r3, [r7, #15]
    break;
 80097b2:	e002      	b.n	80097ba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80097b4:	2303      	movs	r3, #3
 80097b6:	73fb      	strb	r3, [r7, #15]
    break;
 80097b8:	bf00      	nop
  }
  return usb_status;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	da0c      	bge.n	80097fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	440b      	add	r3, r1
 80097f4:	3302      	adds	r3, #2
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	e00b      	b.n	8009812 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009800:	68f9      	ldr	r1, [r7, #12]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	440b      	add	r3, r1
 800980c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009810:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	4611      	mov	r1, r2
 800983e:	4618      	mov	r0, r3
 8009840:	f7f8 fc1a 	bl	8002078 <HAL_PCD_SetAddress>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b03      	cmp	r3, #3
 800984c:	d816      	bhi.n	800987c <USBD_LL_SetUSBAddress+0x5c>
 800984e:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <USBD_LL_SetUSBAddress+0x34>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	08009865 	.word	0x08009865
 8009858:	0800986b 	.word	0x0800986b
 800985c:	08009871 	.word	0x08009871
 8009860:	08009877 	.word	0x08009877
    case HAL_OK :
      usb_status = USBD_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
    break;
 8009868:	e00b      	b.n	8009882 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800986a:	2303      	movs	r3, #3
 800986c:	73fb      	strb	r3, [r7, #15]
    break;
 800986e:	e008      	b.n	8009882 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009870:	2301      	movs	r3, #1
 8009872:	73fb      	strb	r3, [r7, #15]
    break;
 8009874:	e005      	b.n	8009882 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009876:	2303      	movs	r3, #3
 8009878:	73fb      	strb	r3, [r7, #15]
    break;
 800987a:	e002      	b.n	8009882 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800987c:	2303      	movs	r3, #3
 800987e:	73fb      	strb	r3, [r7, #15]
    break;
 8009880:	bf00      	nop
  }
  return usb_status;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	460b      	mov	r3, r1
 800989a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098aa:	7af9      	ldrb	r1, [r7, #11]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	f7f8 fd0a 	bl	80022c8 <HAL_PCD_EP_Transmit>
 80098b4:	4603      	mov	r3, r0
 80098b6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80098b8:	7dbb      	ldrb	r3, [r7, #22]
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d816      	bhi.n	80098ec <USBD_LL_Transmit+0x60>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <USBD_LL_Transmit+0x38>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098db 	.word	0x080098db
 80098cc:	080098e1 	.word	0x080098e1
 80098d0:	080098e7 	.word	0x080098e7
    case HAL_OK :
      usb_status = USBD_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	75fb      	strb	r3, [r7, #23]
    break;
 80098d8:	e00b      	b.n	80098f2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098da:	2303      	movs	r3, #3
 80098dc:	75fb      	strb	r3, [r7, #23]
    break;
 80098de:	e008      	b.n	80098f2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
    break;
 80098e4:	e005      	b.n	80098f2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098e6:	2303      	movs	r3, #3
 80098e8:	75fb      	strb	r3, [r7, #23]
    break;
 80098ea:	e002      	b.n	80098f2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80098ec:	2303      	movs	r3, #3
 80098ee:	75fb      	strb	r3, [r7, #23]
    break;
 80098f0:	bf00      	nop
  }
  return usb_status;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	607a      	str	r2, [r7, #4]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	460b      	mov	r3, r1
 800990a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800991a:	7af9      	ldrb	r1, [r7, #11]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	f7f8 fc7d 	bl	800221e <HAL_PCD_EP_Receive>
 8009924:	4603      	mov	r3, r0
 8009926:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009928:	7dbb      	ldrb	r3, [r7, #22]
 800992a:	2b03      	cmp	r3, #3
 800992c:	d816      	bhi.n	800995c <USBD_LL_PrepareReceive+0x60>
 800992e:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <USBD_LL_PrepareReceive+0x38>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	08009945 	.word	0x08009945
 8009938:	0800994b 	.word	0x0800994b
 800993c:	08009951 	.word	0x08009951
 8009940:	08009957 	.word	0x08009957
    case HAL_OK :
      usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	75fb      	strb	r3, [r7, #23]
    break;
 8009948:	e00b      	b.n	8009962 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800994a:	2303      	movs	r3, #3
 800994c:	75fb      	strb	r3, [r7, #23]
    break;
 800994e:	e008      	b.n	8009962 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009950:	2301      	movs	r3, #1
 8009952:	75fb      	strb	r3, [r7, #23]
    break;
 8009954:	e005      	b.n	8009962 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009956:	2303      	movs	r3, #3
 8009958:	75fb      	strb	r3, [r7, #23]
    break;
 800995a:	e002      	b.n	8009962 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800995c:	2303      	movs	r3, #3
 800995e:	75fb      	strb	r3, [r7, #23]
    break;
 8009960:	bf00      	nop
  }
  return usb_status;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800997e:	78fa      	ldrb	r2, [r7, #3]
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f7f8 fc88 	bl	8002298 <HAL_PCD_EP_GetRxCount>
 8009988:	4603      	mov	r3, r0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <HAL_PCDEx_LPM_Callback+0x18>
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d013      	beq.n	80099d2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80099aa:	e023      	b.n	80099f4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099b4:	f000 f83c 	bl	8009a30 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099b8:	4b10      	ldr	r3, [pc, #64]	; (80099fc <HAL_PCDEx_LPM_Callback+0x68>)
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	4a0f      	ldr	r2, [pc, #60]	; (80099fc <HAL_PCDEx_LPM_Callback+0x68>)
 80099be:	f023 0306 	bic.w	r3, r3, #6
 80099c2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fba4 	bl	8008118 <USBD_LL_Resume>
    break;
 80099d0:	e010      	b.n	80099f4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe fb87 	bl	80080ec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099e6:	4b05      	ldr	r3, [pc, #20]	; (80099fc <HAL_PCDEx_LPM_Callback+0x68>)
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	4a04      	ldr	r2, [pc, #16]	; (80099fc <HAL_PCDEx_LPM_Callback+0x68>)
 80099ec:	f043 0306 	orr.w	r3, r3, #6
 80099f0:	6113      	str	r3, [r2, #16]
    break;
 80099f2:	bf00      	nop
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	e000ed00 	.word	0xe000ed00

08009a00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a08:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <USBD_static_malloc+0x18>)
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	200003a0 	.word	0x200003a0

08009a1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]

}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a34:	f7f7 f926 	bl	8000c84 <SystemClock_Config>
}
 8009a38:	bf00      	nop
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <__errno>:
 8009a3c:	4b01      	ldr	r3, [pc, #4]	; (8009a44 <__errno+0x8>)
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20000190 	.word	0x20000190

08009a48 <__libc_init_array>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	4d0d      	ldr	r5, [pc, #52]	; (8009a80 <__libc_init_array+0x38>)
 8009a4c:	4c0d      	ldr	r4, [pc, #52]	; (8009a84 <__libc_init_array+0x3c>)
 8009a4e:	1b64      	subs	r4, r4, r5
 8009a50:	10a4      	asrs	r4, r4, #2
 8009a52:	2600      	movs	r6, #0
 8009a54:	42a6      	cmp	r6, r4
 8009a56:	d109      	bne.n	8009a6c <__libc_init_array+0x24>
 8009a58:	4d0b      	ldr	r5, [pc, #44]	; (8009a88 <__libc_init_array+0x40>)
 8009a5a:	4c0c      	ldr	r4, [pc, #48]	; (8009a8c <__libc_init_array+0x44>)
 8009a5c:	f002 feb4 	bl	800c7c8 <_init>
 8009a60:	1b64      	subs	r4, r4, r5
 8009a62:	10a4      	asrs	r4, r4, #2
 8009a64:	2600      	movs	r6, #0
 8009a66:	42a6      	cmp	r6, r4
 8009a68:	d105      	bne.n	8009a76 <__libc_init_array+0x2e>
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a70:	4798      	blx	r3
 8009a72:	3601      	adds	r6, #1
 8009a74:	e7ee      	b.n	8009a54 <__libc_init_array+0xc>
 8009a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a7a:	4798      	blx	r3
 8009a7c:	3601      	adds	r6, #1
 8009a7e:	e7f2      	b.n	8009a66 <__libc_init_array+0x1e>
 8009a80:	0800cc94 	.word	0x0800cc94
 8009a84:	0800cc94 	.word	0x0800cc94
 8009a88:	0800cc94 	.word	0x0800cc94
 8009a8c:	0800cc98 	.word	0x0800cc98

08009a90 <memcpy>:
 8009a90:	440a      	add	r2, r1
 8009a92:	4291      	cmp	r1, r2
 8009a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a98:	d100      	bne.n	8009a9c <memcpy+0xc>
 8009a9a:	4770      	bx	lr
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa6:	4291      	cmp	r1, r2
 8009aa8:	d1f9      	bne.n	8009a9e <memcpy+0xe>
 8009aaa:	bd10      	pop	{r4, pc}

08009aac <memset>:
 8009aac:	4402      	add	r2, r0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d100      	bne.n	8009ab6 <memset+0xa>
 8009ab4:	4770      	bx	lr
 8009ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aba:	e7f9      	b.n	8009ab0 <memset+0x4>

08009abc <__cvt>:
 8009abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac0:	ec55 4b10 	vmov	r4, r5, d0
 8009ac4:	2d00      	cmp	r5, #0
 8009ac6:	460e      	mov	r6, r1
 8009ac8:	4619      	mov	r1, r3
 8009aca:	462b      	mov	r3, r5
 8009acc:	bfbb      	ittet	lt
 8009ace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ad2:	461d      	movlt	r5, r3
 8009ad4:	2300      	movge	r3, #0
 8009ad6:	232d      	movlt	r3, #45	; 0x2d
 8009ad8:	700b      	strb	r3, [r1, #0]
 8009ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009adc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ae0:	4691      	mov	r9, r2
 8009ae2:	f023 0820 	bic.w	r8, r3, #32
 8009ae6:	bfbc      	itt	lt
 8009ae8:	4622      	movlt	r2, r4
 8009aea:	4614      	movlt	r4, r2
 8009aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009af0:	d005      	beq.n	8009afe <__cvt+0x42>
 8009af2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009af6:	d100      	bne.n	8009afa <__cvt+0x3e>
 8009af8:	3601      	adds	r6, #1
 8009afa:	2102      	movs	r1, #2
 8009afc:	e000      	b.n	8009b00 <__cvt+0x44>
 8009afe:	2103      	movs	r1, #3
 8009b00:	ab03      	add	r3, sp, #12
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	ab02      	add	r3, sp, #8
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	ec45 4b10 	vmov	d0, r4, r5
 8009b0c:	4653      	mov	r3, sl
 8009b0e:	4632      	mov	r2, r6
 8009b10:	f000 fcea 	bl	800a4e8 <_dtoa_r>
 8009b14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b18:	4607      	mov	r7, r0
 8009b1a:	d102      	bne.n	8009b22 <__cvt+0x66>
 8009b1c:	f019 0f01 	tst.w	r9, #1
 8009b20:	d022      	beq.n	8009b68 <__cvt+0xac>
 8009b22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b26:	eb07 0906 	add.w	r9, r7, r6
 8009b2a:	d110      	bne.n	8009b4e <__cvt+0x92>
 8009b2c:	783b      	ldrb	r3, [r7, #0]
 8009b2e:	2b30      	cmp	r3, #48	; 0x30
 8009b30:	d10a      	bne.n	8009b48 <__cvt+0x8c>
 8009b32:	2200      	movs	r2, #0
 8009b34:	2300      	movs	r3, #0
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7f6 ffd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b3e:	b918      	cbnz	r0, 8009b48 <__cvt+0x8c>
 8009b40:	f1c6 0601 	rsb	r6, r6, #1
 8009b44:	f8ca 6000 	str.w	r6, [sl]
 8009b48:	f8da 3000 	ldr.w	r3, [sl]
 8009b4c:	4499      	add	r9, r3
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2300      	movs	r3, #0
 8009b52:	4620      	mov	r0, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	f7f6 ffc7 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b5a:	b108      	cbz	r0, 8009b60 <__cvt+0xa4>
 8009b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b60:	2230      	movs	r2, #48	; 0x30
 8009b62:	9b03      	ldr	r3, [sp, #12]
 8009b64:	454b      	cmp	r3, r9
 8009b66:	d307      	bcc.n	8009b78 <__cvt+0xbc>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b6c:	1bdb      	subs	r3, r3, r7
 8009b6e:	4638      	mov	r0, r7
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	b004      	add	sp, #16
 8009b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b78:	1c59      	adds	r1, r3, #1
 8009b7a:	9103      	str	r1, [sp, #12]
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e7f0      	b.n	8009b62 <__cvt+0xa6>

08009b80 <__exponent>:
 8009b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b82:	4603      	mov	r3, r0
 8009b84:	2900      	cmp	r1, #0
 8009b86:	bfb8      	it	lt
 8009b88:	4249      	neglt	r1, r1
 8009b8a:	f803 2b02 	strb.w	r2, [r3], #2
 8009b8e:	bfb4      	ite	lt
 8009b90:	222d      	movlt	r2, #45	; 0x2d
 8009b92:	222b      	movge	r2, #43	; 0x2b
 8009b94:	2909      	cmp	r1, #9
 8009b96:	7042      	strb	r2, [r0, #1]
 8009b98:	dd2a      	ble.n	8009bf0 <__exponent+0x70>
 8009b9a:	f10d 0407 	add.w	r4, sp, #7
 8009b9e:	46a4      	mov	ip, r4
 8009ba0:	270a      	movs	r7, #10
 8009ba2:	46a6      	mov	lr, r4
 8009ba4:	460a      	mov	r2, r1
 8009ba6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009baa:	fb07 1516 	mls	r5, r7, r6, r1
 8009bae:	3530      	adds	r5, #48	; 0x30
 8009bb0:	2a63      	cmp	r2, #99	; 0x63
 8009bb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009bb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009bba:	4631      	mov	r1, r6
 8009bbc:	dcf1      	bgt.n	8009ba2 <__exponent+0x22>
 8009bbe:	3130      	adds	r1, #48	; 0x30
 8009bc0:	f1ae 0502 	sub.w	r5, lr, #2
 8009bc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009bc8:	1c44      	adds	r4, r0, #1
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4561      	cmp	r1, ip
 8009bce:	d30a      	bcc.n	8009be6 <__exponent+0x66>
 8009bd0:	f10d 0209 	add.w	r2, sp, #9
 8009bd4:	eba2 020e 	sub.w	r2, r2, lr
 8009bd8:	4565      	cmp	r5, ip
 8009bda:	bf88      	it	hi
 8009bdc:	2200      	movhi	r2, #0
 8009bde:	4413      	add	r3, r2
 8009be0:	1a18      	subs	r0, r3, r0
 8009be2:	b003      	add	sp, #12
 8009be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009bee:	e7ed      	b.n	8009bcc <__exponent+0x4c>
 8009bf0:	2330      	movs	r3, #48	; 0x30
 8009bf2:	3130      	adds	r1, #48	; 0x30
 8009bf4:	7083      	strb	r3, [r0, #2]
 8009bf6:	70c1      	strb	r1, [r0, #3]
 8009bf8:	1d03      	adds	r3, r0, #4
 8009bfa:	e7f1      	b.n	8009be0 <__exponent+0x60>

08009bfc <_printf_float>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	ed2d 8b02 	vpush	{d8}
 8009c04:	b08d      	sub	sp, #52	; 0x34
 8009c06:	460c      	mov	r4, r1
 8009c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c0c:	4616      	mov	r6, r2
 8009c0e:	461f      	mov	r7, r3
 8009c10:	4605      	mov	r5, r0
 8009c12:	f001 fa55 	bl	800b0c0 <_localeconv_r>
 8009c16:	f8d0 a000 	ldr.w	sl, [r0]
 8009c1a:	4650      	mov	r0, sl
 8009c1c:	f7f6 fae2 	bl	80001e4 <strlen>
 8009c20:	2300      	movs	r3, #0
 8009c22:	930a      	str	r3, [sp, #40]	; 0x28
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	9305      	str	r3, [sp, #20]
 8009c28:	f8d8 3000 	ldr.w	r3, [r8]
 8009c2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c30:	3307      	adds	r3, #7
 8009c32:	f023 0307 	bic.w	r3, r3, #7
 8009c36:	f103 0208 	add.w	r2, r3, #8
 8009c3a:	f8c8 2000 	str.w	r2, [r8]
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c4e:	9307      	str	r3, [sp, #28]
 8009c50:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c54:	ee08 0a10 	vmov	s16, r0
 8009c58:	4b9f      	ldr	r3, [pc, #636]	; (8009ed8 <_printf_float+0x2dc>)
 8009c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c62:	f7f6 ff73 	bl	8000b4c <__aeabi_dcmpun>
 8009c66:	bb88      	cbnz	r0, 8009ccc <_printf_float+0xd0>
 8009c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c6c:	4b9a      	ldr	r3, [pc, #616]	; (8009ed8 <_printf_float+0x2dc>)
 8009c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c72:	f7f6 ff4d 	bl	8000b10 <__aeabi_dcmple>
 8009c76:	bb48      	cbnz	r0, 8009ccc <_printf_float+0xd0>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f7f6 ff3c 	bl	8000afc <__aeabi_dcmplt>
 8009c84:	b110      	cbz	r0, 8009c8c <_printf_float+0x90>
 8009c86:	232d      	movs	r3, #45	; 0x2d
 8009c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c8c:	4b93      	ldr	r3, [pc, #588]	; (8009edc <_printf_float+0x2e0>)
 8009c8e:	4894      	ldr	r0, [pc, #592]	; (8009ee0 <_printf_float+0x2e4>)
 8009c90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c94:	bf94      	ite	ls
 8009c96:	4698      	movls	r8, r3
 8009c98:	4680      	movhi	r8, r0
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	f023 0204 	bic.w	r2, r3, #4
 8009ca4:	6022      	str	r2, [r4, #0]
 8009ca6:	f04f 0900 	mov.w	r9, #0
 8009caa:	9700      	str	r7, [sp, #0]
 8009cac:	4633      	mov	r3, r6
 8009cae:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f000 f9d8 	bl	800a068 <_printf_common>
 8009cb8:	3001      	adds	r0, #1
 8009cba:	f040 8090 	bne.w	8009dde <_printf_float+0x1e2>
 8009cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc2:	b00d      	add	sp, #52	; 0x34
 8009cc4:	ecbd 8b02 	vpop	{d8}
 8009cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	4642      	mov	r2, r8
 8009cce:	464b      	mov	r3, r9
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	f7f6 ff3a 	bl	8000b4c <__aeabi_dcmpun>
 8009cd8:	b140      	cbz	r0, 8009cec <_printf_float+0xf0>
 8009cda:	464b      	mov	r3, r9
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bfbc      	itt	lt
 8009ce0:	232d      	movlt	r3, #45	; 0x2d
 8009ce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ce6:	487f      	ldr	r0, [pc, #508]	; (8009ee4 <_printf_float+0x2e8>)
 8009ce8:	4b7f      	ldr	r3, [pc, #508]	; (8009ee8 <_printf_float+0x2ec>)
 8009cea:	e7d1      	b.n	8009c90 <_printf_float+0x94>
 8009cec:	6863      	ldr	r3, [r4, #4]
 8009cee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009cf2:	9206      	str	r2, [sp, #24]
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	d13f      	bne.n	8009d78 <_printf_float+0x17c>
 8009cf8:	2306      	movs	r3, #6
 8009cfa:	6063      	str	r3, [r4, #4]
 8009cfc:	9b05      	ldr	r3, [sp, #20]
 8009cfe:	6861      	ldr	r1, [r4, #4]
 8009d00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d04:	2300      	movs	r3, #0
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	ab0a      	add	r3, sp, #40	; 0x28
 8009d0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d0e:	ab09      	add	r3, sp, #36	; 0x24
 8009d10:	ec49 8b10 	vmov	d0, r8, r9
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	6022      	str	r2, [r4, #0]
 8009d18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f7ff fecd 	bl	8009abc <__cvt>
 8009d22:	9b06      	ldr	r3, [sp, #24]
 8009d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d26:	2b47      	cmp	r3, #71	; 0x47
 8009d28:	4680      	mov	r8, r0
 8009d2a:	d108      	bne.n	8009d3e <_printf_float+0x142>
 8009d2c:	1cc8      	adds	r0, r1, #3
 8009d2e:	db02      	blt.n	8009d36 <_printf_float+0x13a>
 8009d30:	6863      	ldr	r3, [r4, #4]
 8009d32:	4299      	cmp	r1, r3
 8009d34:	dd41      	ble.n	8009dba <_printf_float+0x1be>
 8009d36:	f1ab 0b02 	sub.w	fp, fp, #2
 8009d3a:	fa5f fb8b 	uxtb.w	fp, fp
 8009d3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d42:	d820      	bhi.n	8009d86 <_printf_float+0x18a>
 8009d44:	3901      	subs	r1, #1
 8009d46:	465a      	mov	r2, fp
 8009d48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d4c:	9109      	str	r1, [sp, #36]	; 0x24
 8009d4e:	f7ff ff17 	bl	8009b80 <__exponent>
 8009d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d54:	1813      	adds	r3, r2, r0
 8009d56:	2a01      	cmp	r2, #1
 8009d58:	4681      	mov	r9, r0
 8009d5a:	6123      	str	r3, [r4, #16]
 8009d5c:	dc02      	bgt.n	8009d64 <_printf_float+0x168>
 8009d5e:	6822      	ldr	r2, [r4, #0]
 8009d60:	07d2      	lsls	r2, r2, #31
 8009d62:	d501      	bpl.n	8009d68 <_printf_float+0x16c>
 8009d64:	3301      	adds	r3, #1
 8009d66:	6123      	str	r3, [r4, #16]
 8009d68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d09c      	beq.n	8009caa <_printf_float+0xae>
 8009d70:	232d      	movs	r3, #45	; 0x2d
 8009d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d76:	e798      	b.n	8009caa <_printf_float+0xae>
 8009d78:	9a06      	ldr	r2, [sp, #24]
 8009d7a:	2a47      	cmp	r2, #71	; 0x47
 8009d7c:	d1be      	bne.n	8009cfc <_printf_float+0x100>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1bc      	bne.n	8009cfc <_printf_float+0x100>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e7b9      	b.n	8009cfa <_printf_float+0xfe>
 8009d86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d8a:	d118      	bne.n	8009dbe <_printf_float+0x1c2>
 8009d8c:	2900      	cmp	r1, #0
 8009d8e:	6863      	ldr	r3, [r4, #4]
 8009d90:	dd0b      	ble.n	8009daa <_printf_float+0x1ae>
 8009d92:	6121      	str	r1, [r4, #16]
 8009d94:	b913      	cbnz	r3, 8009d9c <_printf_float+0x1a0>
 8009d96:	6822      	ldr	r2, [r4, #0]
 8009d98:	07d0      	lsls	r0, r2, #31
 8009d9a:	d502      	bpl.n	8009da2 <_printf_float+0x1a6>
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	440b      	add	r3, r1
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009da4:	f04f 0900 	mov.w	r9, #0
 8009da8:	e7de      	b.n	8009d68 <_printf_float+0x16c>
 8009daa:	b913      	cbnz	r3, 8009db2 <_printf_float+0x1b6>
 8009dac:	6822      	ldr	r2, [r4, #0]
 8009dae:	07d2      	lsls	r2, r2, #31
 8009db0:	d501      	bpl.n	8009db6 <_printf_float+0x1ba>
 8009db2:	3302      	adds	r3, #2
 8009db4:	e7f4      	b.n	8009da0 <_printf_float+0x1a4>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e7f2      	b.n	8009da0 <_printf_float+0x1a4>
 8009dba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	db05      	blt.n	8009dd0 <_printf_float+0x1d4>
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	6121      	str	r1, [r4, #16]
 8009dc8:	07d8      	lsls	r0, r3, #31
 8009dca:	d5ea      	bpl.n	8009da2 <_printf_float+0x1a6>
 8009dcc:	1c4b      	adds	r3, r1, #1
 8009dce:	e7e7      	b.n	8009da0 <_printf_float+0x1a4>
 8009dd0:	2900      	cmp	r1, #0
 8009dd2:	bfd4      	ite	le
 8009dd4:	f1c1 0202 	rsble	r2, r1, #2
 8009dd8:	2201      	movgt	r2, #1
 8009dda:	4413      	add	r3, r2
 8009ddc:	e7e0      	b.n	8009da0 <_printf_float+0x1a4>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	055a      	lsls	r2, r3, #21
 8009de2:	d407      	bmi.n	8009df4 <_printf_float+0x1f8>
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	4642      	mov	r2, r8
 8009de8:	4631      	mov	r1, r6
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	d12c      	bne.n	8009e4c <_printf_float+0x250>
 8009df2:	e764      	b.n	8009cbe <_printf_float+0xc2>
 8009df4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009df8:	f240 80e0 	bls.w	8009fbc <_printf_float+0x3c0>
 8009dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e00:	2200      	movs	r2, #0
 8009e02:	2300      	movs	r3, #0
 8009e04:	f7f6 fe70 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d034      	beq.n	8009e76 <_printf_float+0x27a>
 8009e0c:	4a37      	ldr	r2, [pc, #220]	; (8009eec <_printf_float+0x2f0>)
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	47b8      	blx	r7
 8009e16:	3001      	adds	r0, #1
 8009e18:	f43f af51 	beq.w	8009cbe <_printf_float+0xc2>
 8009e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e20:	429a      	cmp	r2, r3
 8009e22:	db02      	blt.n	8009e2a <_printf_float+0x22e>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	07d8      	lsls	r0, r3, #31
 8009e28:	d510      	bpl.n	8009e4c <_printf_float+0x250>
 8009e2a:	ee18 3a10 	vmov	r3, s16
 8009e2e:	4652      	mov	r2, sl
 8009e30:	4631      	mov	r1, r6
 8009e32:	4628      	mov	r0, r5
 8009e34:	47b8      	blx	r7
 8009e36:	3001      	adds	r0, #1
 8009e38:	f43f af41 	beq.w	8009cbe <_printf_float+0xc2>
 8009e3c:	f04f 0800 	mov.w	r8, #0
 8009e40:	f104 091a 	add.w	r9, r4, #26
 8009e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e46:	3b01      	subs	r3, #1
 8009e48:	4543      	cmp	r3, r8
 8009e4a:	dc09      	bgt.n	8009e60 <_printf_float+0x264>
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	079b      	lsls	r3, r3, #30
 8009e50:	f100 8105 	bmi.w	800a05e <_printf_float+0x462>
 8009e54:	68e0      	ldr	r0, [r4, #12]
 8009e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e58:	4298      	cmp	r0, r3
 8009e5a:	bfb8      	it	lt
 8009e5c:	4618      	movlt	r0, r3
 8009e5e:	e730      	b.n	8009cc2 <_printf_float+0xc6>
 8009e60:	2301      	movs	r3, #1
 8009e62:	464a      	mov	r2, r9
 8009e64:	4631      	mov	r1, r6
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f af27 	beq.w	8009cbe <_printf_float+0xc2>
 8009e70:	f108 0801 	add.w	r8, r8, #1
 8009e74:	e7e6      	b.n	8009e44 <_printf_float+0x248>
 8009e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc39      	bgt.n	8009ef0 <_printf_float+0x2f4>
 8009e7c:	4a1b      	ldr	r2, [pc, #108]	; (8009eec <_printf_float+0x2f0>)
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	47b8      	blx	r7
 8009e86:	3001      	adds	r0, #1
 8009e88:	f43f af19 	beq.w	8009cbe <_printf_float+0xc2>
 8009e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e90:	4313      	orrs	r3, r2
 8009e92:	d102      	bne.n	8009e9a <_printf_float+0x29e>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	07d9      	lsls	r1, r3, #31
 8009e98:	d5d8      	bpl.n	8009e4c <_printf_float+0x250>
 8009e9a:	ee18 3a10 	vmov	r3, s16
 8009e9e:	4652      	mov	r2, sl
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b8      	blx	r7
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	f43f af09 	beq.w	8009cbe <_printf_float+0xc2>
 8009eac:	f04f 0900 	mov.w	r9, #0
 8009eb0:	f104 0a1a 	add.w	sl, r4, #26
 8009eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb6:	425b      	negs	r3, r3
 8009eb8:	454b      	cmp	r3, r9
 8009eba:	dc01      	bgt.n	8009ec0 <_printf_float+0x2c4>
 8009ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ebe:	e792      	b.n	8009de6 <_printf_float+0x1ea>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	4652      	mov	r2, sl
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f43f aef7 	beq.w	8009cbe <_printf_float+0xc2>
 8009ed0:	f109 0901 	add.w	r9, r9, #1
 8009ed4:	e7ee      	b.n	8009eb4 <_printf_float+0x2b8>
 8009ed6:	bf00      	nop
 8009ed8:	7fefffff 	.word	0x7fefffff
 8009edc:	0800c8b4 	.word	0x0800c8b4
 8009ee0:	0800c8b8 	.word	0x0800c8b8
 8009ee4:	0800c8c0 	.word	0x0800c8c0
 8009ee8:	0800c8bc 	.word	0x0800c8bc
 8009eec:	0800c8c4 	.word	0x0800c8c4
 8009ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	bfa8      	it	ge
 8009ef8:	461a      	movge	r2, r3
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	4691      	mov	r9, r2
 8009efe:	dc37      	bgt.n	8009f70 <_printf_float+0x374>
 8009f00:	f04f 0b00 	mov.w	fp, #0
 8009f04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f08:	f104 021a 	add.w	r2, r4, #26
 8009f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f0e:	9305      	str	r3, [sp, #20]
 8009f10:	eba3 0309 	sub.w	r3, r3, r9
 8009f14:	455b      	cmp	r3, fp
 8009f16:	dc33      	bgt.n	8009f80 <_printf_float+0x384>
 8009f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	db3b      	blt.n	8009f98 <_printf_float+0x39c>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	07da      	lsls	r2, r3, #31
 8009f24:	d438      	bmi.n	8009f98 <_printf_float+0x39c>
 8009f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	eba2 0901 	sub.w	r9, r2, r1
 8009f32:	4599      	cmp	r9, r3
 8009f34:	bfa8      	it	ge
 8009f36:	4699      	movge	r9, r3
 8009f38:	f1b9 0f00 	cmp.w	r9, #0
 8009f3c:	dc35      	bgt.n	8009faa <_printf_float+0x3ae>
 8009f3e:	f04f 0800 	mov.w	r8, #0
 8009f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f46:	f104 0a1a 	add.w	sl, r4, #26
 8009f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f4e:	1a9b      	subs	r3, r3, r2
 8009f50:	eba3 0309 	sub.w	r3, r3, r9
 8009f54:	4543      	cmp	r3, r8
 8009f56:	f77f af79 	ble.w	8009e4c <_printf_float+0x250>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	4631      	mov	r1, r6
 8009f60:	4628      	mov	r0, r5
 8009f62:	47b8      	blx	r7
 8009f64:	3001      	adds	r0, #1
 8009f66:	f43f aeaa 	beq.w	8009cbe <_printf_float+0xc2>
 8009f6a:	f108 0801 	add.w	r8, r8, #1
 8009f6e:	e7ec      	b.n	8009f4a <_printf_float+0x34e>
 8009f70:	4613      	mov	r3, r2
 8009f72:	4631      	mov	r1, r6
 8009f74:	4642      	mov	r2, r8
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b8      	blx	r7
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	d1c0      	bne.n	8009f00 <_printf_float+0x304>
 8009f7e:	e69e      	b.n	8009cbe <_printf_float+0xc2>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4631      	mov	r1, r6
 8009f84:	4628      	mov	r0, r5
 8009f86:	9205      	str	r2, [sp, #20]
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f ae97 	beq.w	8009cbe <_printf_float+0xc2>
 8009f90:	9a05      	ldr	r2, [sp, #20]
 8009f92:	f10b 0b01 	add.w	fp, fp, #1
 8009f96:	e7b9      	b.n	8009f0c <_printf_float+0x310>
 8009f98:	ee18 3a10 	vmov	r3, s16
 8009f9c:	4652      	mov	r2, sl
 8009f9e:	4631      	mov	r1, r6
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	47b8      	blx	r7
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d1be      	bne.n	8009f26 <_printf_float+0x32a>
 8009fa8:	e689      	b.n	8009cbe <_printf_float+0xc2>
 8009faa:	9a05      	ldr	r2, [sp, #20]
 8009fac:	464b      	mov	r3, r9
 8009fae:	4442      	add	r2, r8
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	47b8      	blx	r7
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d1c1      	bne.n	8009f3e <_printf_float+0x342>
 8009fba:	e680      	b.n	8009cbe <_printf_float+0xc2>
 8009fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fbe:	2a01      	cmp	r2, #1
 8009fc0:	dc01      	bgt.n	8009fc6 <_printf_float+0x3ca>
 8009fc2:	07db      	lsls	r3, r3, #31
 8009fc4:	d538      	bpl.n	800a038 <_printf_float+0x43c>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4642      	mov	r2, r8
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f ae74 	beq.w	8009cbe <_printf_float+0xc2>
 8009fd6:	ee18 3a10 	vmov	r3, s16
 8009fda:	4652      	mov	r2, sl
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f43f ae6b 	beq.w	8009cbe <_printf_float+0xc2>
 8009fe8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f7f6 fd7a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ff4:	b9d8      	cbnz	r0, 800a02e <_printf_float+0x432>
 8009ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff8:	f108 0201 	add.w	r2, r8, #1
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	4631      	mov	r1, r6
 800a000:	4628      	mov	r0, r5
 800a002:	47b8      	blx	r7
 800a004:	3001      	adds	r0, #1
 800a006:	d10e      	bne.n	800a026 <_printf_float+0x42a>
 800a008:	e659      	b.n	8009cbe <_printf_float+0xc2>
 800a00a:	2301      	movs	r3, #1
 800a00c:	4652      	mov	r2, sl
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	47b8      	blx	r7
 800a014:	3001      	adds	r0, #1
 800a016:	f43f ae52 	beq.w	8009cbe <_printf_float+0xc2>
 800a01a:	f108 0801 	add.w	r8, r8, #1
 800a01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a020:	3b01      	subs	r3, #1
 800a022:	4543      	cmp	r3, r8
 800a024:	dcf1      	bgt.n	800a00a <_printf_float+0x40e>
 800a026:	464b      	mov	r3, r9
 800a028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a02c:	e6dc      	b.n	8009de8 <_printf_float+0x1ec>
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	f104 0a1a 	add.w	sl, r4, #26
 800a036:	e7f2      	b.n	800a01e <_printf_float+0x422>
 800a038:	2301      	movs	r3, #1
 800a03a:	4642      	mov	r2, r8
 800a03c:	e7df      	b.n	8009ffe <_printf_float+0x402>
 800a03e:	2301      	movs	r3, #1
 800a040:	464a      	mov	r2, r9
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	47b8      	blx	r7
 800a048:	3001      	adds	r0, #1
 800a04a:	f43f ae38 	beq.w	8009cbe <_printf_float+0xc2>
 800a04e:	f108 0801 	add.w	r8, r8, #1
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a056:	1a5b      	subs	r3, r3, r1
 800a058:	4543      	cmp	r3, r8
 800a05a:	dcf0      	bgt.n	800a03e <_printf_float+0x442>
 800a05c:	e6fa      	b.n	8009e54 <_printf_float+0x258>
 800a05e:	f04f 0800 	mov.w	r8, #0
 800a062:	f104 0919 	add.w	r9, r4, #25
 800a066:	e7f4      	b.n	800a052 <_printf_float+0x456>

0800a068 <_printf_common>:
 800a068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a06c:	4616      	mov	r6, r2
 800a06e:	4699      	mov	r9, r3
 800a070:	688a      	ldr	r2, [r1, #8]
 800a072:	690b      	ldr	r3, [r1, #16]
 800a074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a078:	4293      	cmp	r3, r2
 800a07a:	bfb8      	it	lt
 800a07c:	4613      	movlt	r3, r2
 800a07e:	6033      	str	r3, [r6, #0]
 800a080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a084:	4607      	mov	r7, r0
 800a086:	460c      	mov	r4, r1
 800a088:	b10a      	cbz	r2, 800a08e <_printf_common+0x26>
 800a08a:	3301      	adds	r3, #1
 800a08c:	6033      	str	r3, [r6, #0]
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	0699      	lsls	r1, r3, #26
 800a092:	bf42      	ittt	mi
 800a094:	6833      	ldrmi	r3, [r6, #0]
 800a096:	3302      	addmi	r3, #2
 800a098:	6033      	strmi	r3, [r6, #0]
 800a09a:	6825      	ldr	r5, [r4, #0]
 800a09c:	f015 0506 	ands.w	r5, r5, #6
 800a0a0:	d106      	bne.n	800a0b0 <_printf_common+0x48>
 800a0a2:	f104 0a19 	add.w	sl, r4, #25
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	6832      	ldr	r2, [r6, #0]
 800a0aa:	1a9b      	subs	r3, r3, r2
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dc26      	bgt.n	800a0fe <_printf_common+0x96>
 800a0b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0b4:	1e13      	subs	r3, r2, #0
 800a0b6:	6822      	ldr	r2, [r4, #0]
 800a0b8:	bf18      	it	ne
 800a0ba:	2301      	movne	r3, #1
 800a0bc:	0692      	lsls	r2, r2, #26
 800a0be:	d42b      	bmi.n	800a118 <_printf_common+0xb0>
 800a0c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	47c0      	blx	r8
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d01e      	beq.n	800a10c <_printf_common+0xa4>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	68e5      	ldr	r5, [r4, #12]
 800a0d2:	6832      	ldr	r2, [r6, #0]
 800a0d4:	f003 0306 	and.w	r3, r3, #6
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	bf08      	it	eq
 800a0dc:	1aad      	subeq	r5, r5, r2
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	6922      	ldr	r2, [r4, #16]
 800a0e2:	bf0c      	ite	eq
 800a0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0e8:	2500      	movne	r5, #0
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	bfc4      	itt	gt
 800a0ee:	1a9b      	subgt	r3, r3, r2
 800a0f0:	18ed      	addgt	r5, r5, r3
 800a0f2:	2600      	movs	r6, #0
 800a0f4:	341a      	adds	r4, #26
 800a0f6:	42b5      	cmp	r5, r6
 800a0f8:	d11a      	bne.n	800a130 <_printf_common+0xc8>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	e008      	b.n	800a110 <_printf_common+0xa8>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4652      	mov	r2, sl
 800a102:	4649      	mov	r1, r9
 800a104:	4638      	mov	r0, r7
 800a106:	47c0      	blx	r8
 800a108:	3001      	adds	r0, #1
 800a10a:	d103      	bne.n	800a114 <_printf_common+0xac>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a114:	3501      	adds	r5, #1
 800a116:	e7c6      	b.n	800a0a6 <_printf_common+0x3e>
 800a118:	18e1      	adds	r1, r4, r3
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	2030      	movs	r0, #48	; 0x30
 800a11e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a122:	4422      	add	r2, r4
 800a124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a12c:	3302      	adds	r3, #2
 800a12e:	e7c7      	b.n	800a0c0 <_printf_common+0x58>
 800a130:	2301      	movs	r3, #1
 800a132:	4622      	mov	r2, r4
 800a134:	4649      	mov	r1, r9
 800a136:	4638      	mov	r0, r7
 800a138:	47c0      	blx	r8
 800a13a:	3001      	adds	r0, #1
 800a13c:	d0e6      	beq.n	800a10c <_printf_common+0xa4>
 800a13e:	3601      	adds	r6, #1
 800a140:	e7d9      	b.n	800a0f6 <_printf_common+0x8e>
	...

0800a144 <_printf_i>:
 800a144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a148:	460c      	mov	r4, r1
 800a14a:	4691      	mov	r9, r2
 800a14c:	7e27      	ldrb	r7, [r4, #24]
 800a14e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a150:	2f78      	cmp	r7, #120	; 0x78
 800a152:	4680      	mov	r8, r0
 800a154:	469a      	mov	sl, r3
 800a156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a15a:	d807      	bhi.n	800a16c <_printf_i+0x28>
 800a15c:	2f62      	cmp	r7, #98	; 0x62
 800a15e:	d80a      	bhi.n	800a176 <_printf_i+0x32>
 800a160:	2f00      	cmp	r7, #0
 800a162:	f000 80d8 	beq.w	800a316 <_printf_i+0x1d2>
 800a166:	2f58      	cmp	r7, #88	; 0x58
 800a168:	f000 80a3 	beq.w	800a2b2 <_printf_i+0x16e>
 800a16c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a174:	e03a      	b.n	800a1ec <_printf_i+0xa8>
 800a176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a17a:	2b15      	cmp	r3, #21
 800a17c:	d8f6      	bhi.n	800a16c <_printf_i+0x28>
 800a17e:	a001      	add	r0, pc, #4	; (adr r0, 800a184 <_printf_i+0x40>)
 800a180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a184:	0800a1dd 	.word	0x0800a1dd
 800a188:	0800a1f1 	.word	0x0800a1f1
 800a18c:	0800a16d 	.word	0x0800a16d
 800a190:	0800a16d 	.word	0x0800a16d
 800a194:	0800a16d 	.word	0x0800a16d
 800a198:	0800a16d 	.word	0x0800a16d
 800a19c:	0800a1f1 	.word	0x0800a1f1
 800a1a0:	0800a16d 	.word	0x0800a16d
 800a1a4:	0800a16d 	.word	0x0800a16d
 800a1a8:	0800a16d 	.word	0x0800a16d
 800a1ac:	0800a16d 	.word	0x0800a16d
 800a1b0:	0800a2fd 	.word	0x0800a2fd
 800a1b4:	0800a221 	.word	0x0800a221
 800a1b8:	0800a2df 	.word	0x0800a2df
 800a1bc:	0800a16d 	.word	0x0800a16d
 800a1c0:	0800a16d 	.word	0x0800a16d
 800a1c4:	0800a31f 	.word	0x0800a31f
 800a1c8:	0800a16d 	.word	0x0800a16d
 800a1cc:	0800a221 	.word	0x0800a221
 800a1d0:	0800a16d 	.word	0x0800a16d
 800a1d4:	0800a16d 	.word	0x0800a16d
 800a1d8:	0800a2e7 	.word	0x0800a2e7
 800a1dc:	680b      	ldr	r3, [r1, #0]
 800a1de:	1d1a      	adds	r2, r3, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	600a      	str	r2, [r1, #0]
 800a1e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0a3      	b.n	800a338 <_printf_i+0x1f4>
 800a1f0:	6825      	ldr	r5, [r4, #0]
 800a1f2:	6808      	ldr	r0, [r1, #0]
 800a1f4:	062e      	lsls	r6, r5, #24
 800a1f6:	f100 0304 	add.w	r3, r0, #4
 800a1fa:	d50a      	bpl.n	800a212 <_printf_i+0xce>
 800a1fc:	6805      	ldr	r5, [r0, #0]
 800a1fe:	600b      	str	r3, [r1, #0]
 800a200:	2d00      	cmp	r5, #0
 800a202:	da03      	bge.n	800a20c <_printf_i+0xc8>
 800a204:	232d      	movs	r3, #45	; 0x2d
 800a206:	426d      	negs	r5, r5
 800a208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a20c:	485e      	ldr	r0, [pc, #376]	; (800a388 <_printf_i+0x244>)
 800a20e:	230a      	movs	r3, #10
 800a210:	e019      	b.n	800a246 <_printf_i+0x102>
 800a212:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a216:	6805      	ldr	r5, [r0, #0]
 800a218:	600b      	str	r3, [r1, #0]
 800a21a:	bf18      	it	ne
 800a21c:	b22d      	sxthne	r5, r5
 800a21e:	e7ef      	b.n	800a200 <_printf_i+0xbc>
 800a220:	680b      	ldr	r3, [r1, #0]
 800a222:	6825      	ldr	r5, [r4, #0]
 800a224:	1d18      	adds	r0, r3, #4
 800a226:	6008      	str	r0, [r1, #0]
 800a228:	0628      	lsls	r0, r5, #24
 800a22a:	d501      	bpl.n	800a230 <_printf_i+0xec>
 800a22c:	681d      	ldr	r5, [r3, #0]
 800a22e:	e002      	b.n	800a236 <_printf_i+0xf2>
 800a230:	0669      	lsls	r1, r5, #25
 800a232:	d5fb      	bpl.n	800a22c <_printf_i+0xe8>
 800a234:	881d      	ldrh	r5, [r3, #0]
 800a236:	4854      	ldr	r0, [pc, #336]	; (800a388 <_printf_i+0x244>)
 800a238:	2f6f      	cmp	r7, #111	; 0x6f
 800a23a:	bf0c      	ite	eq
 800a23c:	2308      	moveq	r3, #8
 800a23e:	230a      	movne	r3, #10
 800a240:	2100      	movs	r1, #0
 800a242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a246:	6866      	ldr	r6, [r4, #4]
 800a248:	60a6      	str	r6, [r4, #8]
 800a24a:	2e00      	cmp	r6, #0
 800a24c:	bfa2      	ittt	ge
 800a24e:	6821      	ldrge	r1, [r4, #0]
 800a250:	f021 0104 	bicge.w	r1, r1, #4
 800a254:	6021      	strge	r1, [r4, #0]
 800a256:	b90d      	cbnz	r5, 800a25c <_printf_i+0x118>
 800a258:	2e00      	cmp	r6, #0
 800a25a:	d04d      	beq.n	800a2f8 <_printf_i+0x1b4>
 800a25c:	4616      	mov	r6, r2
 800a25e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a262:	fb03 5711 	mls	r7, r3, r1, r5
 800a266:	5dc7      	ldrb	r7, [r0, r7]
 800a268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a26c:	462f      	mov	r7, r5
 800a26e:	42bb      	cmp	r3, r7
 800a270:	460d      	mov	r5, r1
 800a272:	d9f4      	bls.n	800a25e <_printf_i+0x11a>
 800a274:	2b08      	cmp	r3, #8
 800a276:	d10b      	bne.n	800a290 <_printf_i+0x14c>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	07df      	lsls	r7, r3, #31
 800a27c:	d508      	bpl.n	800a290 <_printf_i+0x14c>
 800a27e:	6923      	ldr	r3, [r4, #16]
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	4299      	cmp	r1, r3
 800a284:	bfde      	ittt	le
 800a286:	2330      	movle	r3, #48	; 0x30
 800a288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a28c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a290:	1b92      	subs	r2, r2, r6
 800a292:	6122      	str	r2, [r4, #16]
 800a294:	f8cd a000 	str.w	sl, [sp]
 800a298:	464b      	mov	r3, r9
 800a29a:	aa03      	add	r2, sp, #12
 800a29c:	4621      	mov	r1, r4
 800a29e:	4640      	mov	r0, r8
 800a2a0:	f7ff fee2 	bl	800a068 <_printf_common>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d14c      	bne.n	800a342 <_printf_i+0x1fe>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	b004      	add	sp, #16
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	4835      	ldr	r0, [pc, #212]	; (800a388 <_printf_i+0x244>)
 800a2b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	680e      	ldr	r6, [r1, #0]
 800a2bc:	061f      	lsls	r7, r3, #24
 800a2be:	f856 5b04 	ldr.w	r5, [r6], #4
 800a2c2:	600e      	str	r6, [r1, #0]
 800a2c4:	d514      	bpl.n	800a2f0 <_printf_i+0x1ac>
 800a2c6:	07d9      	lsls	r1, r3, #31
 800a2c8:	bf44      	itt	mi
 800a2ca:	f043 0320 	orrmi.w	r3, r3, #32
 800a2ce:	6023      	strmi	r3, [r4, #0]
 800a2d0:	b91d      	cbnz	r5, 800a2da <_printf_i+0x196>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	f023 0320 	bic.w	r3, r3, #32
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	2310      	movs	r3, #16
 800a2dc:	e7b0      	b.n	800a240 <_printf_i+0xfc>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	2378      	movs	r3, #120	; 0x78
 800a2e8:	4828      	ldr	r0, [pc, #160]	; (800a38c <_printf_i+0x248>)
 800a2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2ee:	e7e3      	b.n	800a2b8 <_printf_i+0x174>
 800a2f0:	065e      	lsls	r6, r3, #25
 800a2f2:	bf48      	it	mi
 800a2f4:	b2ad      	uxthmi	r5, r5
 800a2f6:	e7e6      	b.n	800a2c6 <_printf_i+0x182>
 800a2f8:	4616      	mov	r6, r2
 800a2fa:	e7bb      	b.n	800a274 <_printf_i+0x130>
 800a2fc:	680b      	ldr	r3, [r1, #0]
 800a2fe:	6826      	ldr	r6, [r4, #0]
 800a300:	6960      	ldr	r0, [r4, #20]
 800a302:	1d1d      	adds	r5, r3, #4
 800a304:	600d      	str	r5, [r1, #0]
 800a306:	0635      	lsls	r5, r6, #24
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	d501      	bpl.n	800a310 <_printf_i+0x1cc>
 800a30c:	6018      	str	r0, [r3, #0]
 800a30e:	e002      	b.n	800a316 <_printf_i+0x1d2>
 800a310:	0671      	lsls	r1, r6, #25
 800a312:	d5fb      	bpl.n	800a30c <_printf_i+0x1c8>
 800a314:	8018      	strh	r0, [r3, #0]
 800a316:	2300      	movs	r3, #0
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	4616      	mov	r6, r2
 800a31c:	e7ba      	b.n	800a294 <_printf_i+0x150>
 800a31e:	680b      	ldr	r3, [r1, #0]
 800a320:	1d1a      	adds	r2, r3, #4
 800a322:	600a      	str	r2, [r1, #0]
 800a324:	681e      	ldr	r6, [r3, #0]
 800a326:	6862      	ldr	r2, [r4, #4]
 800a328:	2100      	movs	r1, #0
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7f5 ff68 	bl	8000200 <memchr>
 800a330:	b108      	cbz	r0, 800a336 <_printf_i+0x1f2>
 800a332:	1b80      	subs	r0, r0, r6
 800a334:	6060      	str	r0, [r4, #4]
 800a336:	6863      	ldr	r3, [r4, #4]
 800a338:	6123      	str	r3, [r4, #16]
 800a33a:	2300      	movs	r3, #0
 800a33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a340:	e7a8      	b.n	800a294 <_printf_i+0x150>
 800a342:	6923      	ldr	r3, [r4, #16]
 800a344:	4632      	mov	r2, r6
 800a346:	4649      	mov	r1, r9
 800a348:	4640      	mov	r0, r8
 800a34a:	47d0      	blx	sl
 800a34c:	3001      	adds	r0, #1
 800a34e:	d0ab      	beq.n	800a2a8 <_printf_i+0x164>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	079b      	lsls	r3, r3, #30
 800a354:	d413      	bmi.n	800a37e <_printf_i+0x23a>
 800a356:	68e0      	ldr	r0, [r4, #12]
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	4298      	cmp	r0, r3
 800a35c:	bfb8      	it	lt
 800a35e:	4618      	movlt	r0, r3
 800a360:	e7a4      	b.n	800a2ac <_printf_i+0x168>
 800a362:	2301      	movs	r3, #1
 800a364:	4632      	mov	r2, r6
 800a366:	4649      	mov	r1, r9
 800a368:	4640      	mov	r0, r8
 800a36a:	47d0      	blx	sl
 800a36c:	3001      	adds	r0, #1
 800a36e:	d09b      	beq.n	800a2a8 <_printf_i+0x164>
 800a370:	3501      	adds	r5, #1
 800a372:	68e3      	ldr	r3, [r4, #12]
 800a374:	9903      	ldr	r1, [sp, #12]
 800a376:	1a5b      	subs	r3, r3, r1
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dcf2      	bgt.n	800a362 <_printf_i+0x21e>
 800a37c:	e7eb      	b.n	800a356 <_printf_i+0x212>
 800a37e:	2500      	movs	r5, #0
 800a380:	f104 0619 	add.w	r6, r4, #25
 800a384:	e7f5      	b.n	800a372 <_printf_i+0x22e>
 800a386:	bf00      	nop
 800a388:	0800c8c6 	.word	0x0800c8c6
 800a38c:	0800c8d7 	.word	0x0800c8d7

0800a390 <siprintf>:
 800a390:	b40e      	push	{r1, r2, r3}
 800a392:	b500      	push	{lr}
 800a394:	b09c      	sub	sp, #112	; 0x70
 800a396:	ab1d      	add	r3, sp, #116	; 0x74
 800a398:	9002      	str	r0, [sp, #8]
 800a39a:	9006      	str	r0, [sp, #24]
 800a39c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3a0:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <siprintf+0x38>)
 800a3a2:	9107      	str	r1, [sp, #28]
 800a3a4:	9104      	str	r1, [sp, #16]
 800a3a6:	4909      	ldr	r1, [pc, #36]	; (800a3cc <siprintf+0x3c>)
 800a3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ac:	9105      	str	r1, [sp, #20]
 800a3ae:	6800      	ldr	r0, [r0, #0]
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	a902      	add	r1, sp, #8
 800a3b4:	f001 fb24 	bl	800ba00 <_svfiprintf_r>
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	b01c      	add	sp, #112	; 0x70
 800a3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3c4:	b003      	add	sp, #12
 800a3c6:	4770      	bx	lr
 800a3c8:	20000190 	.word	0x20000190
 800a3cc:	ffff0208 	.word	0xffff0208

0800a3d0 <quorem>:
 800a3d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	6903      	ldr	r3, [r0, #16]
 800a3d6:	690c      	ldr	r4, [r1, #16]
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	4607      	mov	r7, r0
 800a3dc:	f2c0 8081 	blt.w	800a4e2 <quorem+0x112>
 800a3e0:	3c01      	subs	r4, #1
 800a3e2:	f101 0814 	add.w	r8, r1, #20
 800a3e6:	f100 0514 	add.w	r5, r0, #20
 800a3ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a400:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a404:	fbb2 f6f3 	udiv	r6, r2, r3
 800a408:	d331      	bcc.n	800a46e <quorem+0x9e>
 800a40a:	f04f 0e00 	mov.w	lr, #0
 800a40e:	4640      	mov	r0, r8
 800a410:	46ac      	mov	ip, r5
 800a412:	46f2      	mov	sl, lr
 800a414:	f850 2b04 	ldr.w	r2, [r0], #4
 800a418:	b293      	uxth	r3, r2
 800a41a:	fb06 e303 	mla	r3, r6, r3, lr
 800a41e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a422:	b29b      	uxth	r3, r3
 800a424:	ebaa 0303 	sub.w	r3, sl, r3
 800a428:	0c12      	lsrs	r2, r2, #16
 800a42a:	f8dc a000 	ldr.w	sl, [ip]
 800a42e:	fb06 e202 	mla	r2, r6, r2, lr
 800a432:	fa13 f38a 	uxtah	r3, r3, sl
 800a436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a43a:	fa1f fa82 	uxth.w	sl, r2
 800a43e:	f8dc 2000 	ldr.w	r2, [ip]
 800a442:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a446:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a450:	4581      	cmp	r9, r0
 800a452:	f84c 3b04 	str.w	r3, [ip], #4
 800a456:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a45a:	d2db      	bcs.n	800a414 <quorem+0x44>
 800a45c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a460:	b92b      	cbnz	r3, 800a46e <quorem+0x9e>
 800a462:	9b01      	ldr	r3, [sp, #4]
 800a464:	3b04      	subs	r3, #4
 800a466:	429d      	cmp	r5, r3
 800a468:	461a      	mov	r2, r3
 800a46a:	d32e      	bcc.n	800a4ca <quorem+0xfa>
 800a46c:	613c      	str	r4, [r7, #16]
 800a46e:	4638      	mov	r0, r7
 800a470:	f001 f8b0 	bl	800b5d4 <__mcmp>
 800a474:	2800      	cmp	r0, #0
 800a476:	db24      	blt.n	800a4c2 <quorem+0xf2>
 800a478:	3601      	adds	r6, #1
 800a47a:	4628      	mov	r0, r5
 800a47c:	f04f 0c00 	mov.w	ip, #0
 800a480:	f858 2b04 	ldr.w	r2, [r8], #4
 800a484:	f8d0 e000 	ldr.w	lr, [r0]
 800a488:	b293      	uxth	r3, r2
 800a48a:	ebac 0303 	sub.w	r3, ip, r3
 800a48e:	0c12      	lsrs	r2, r2, #16
 800a490:	fa13 f38e 	uxtah	r3, r3, lr
 800a494:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a2:	45c1      	cmp	r9, r8
 800a4a4:	f840 3b04 	str.w	r3, [r0], #4
 800a4a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4ac:	d2e8      	bcs.n	800a480 <quorem+0xb0>
 800a4ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4b6:	b922      	cbnz	r2, 800a4c2 <quorem+0xf2>
 800a4b8:	3b04      	subs	r3, #4
 800a4ba:	429d      	cmp	r5, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	d30a      	bcc.n	800a4d6 <quorem+0x106>
 800a4c0:	613c      	str	r4, [r7, #16]
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	b003      	add	sp, #12
 800a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ca:	6812      	ldr	r2, [r2, #0]
 800a4cc:	3b04      	subs	r3, #4
 800a4ce:	2a00      	cmp	r2, #0
 800a4d0:	d1cc      	bne.n	800a46c <quorem+0x9c>
 800a4d2:	3c01      	subs	r4, #1
 800a4d4:	e7c7      	b.n	800a466 <quorem+0x96>
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	3b04      	subs	r3, #4
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d1f0      	bne.n	800a4c0 <quorem+0xf0>
 800a4de:	3c01      	subs	r4, #1
 800a4e0:	e7eb      	b.n	800a4ba <quorem+0xea>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	e7ee      	b.n	800a4c4 <quorem+0xf4>
	...

0800a4e8 <_dtoa_r>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	ed2d 8b02 	vpush	{d8}
 800a4f0:	ec57 6b10 	vmov	r6, r7, d0
 800a4f4:	b095      	sub	sp, #84	; 0x54
 800a4f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a4fc:	9105      	str	r1, [sp, #20]
 800a4fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a502:	4604      	mov	r4, r0
 800a504:	9209      	str	r2, [sp, #36]	; 0x24
 800a506:	930f      	str	r3, [sp, #60]	; 0x3c
 800a508:	b975      	cbnz	r5, 800a528 <_dtoa_r+0x40>
 800a50a:	2010      	movs	r0, #16
 800a50c:	f000 fddc 	bl	800b0c8 <malloc>
 800a510:	4602      	mov	r2, r0
 800a512:	6260      	str	r0, [r4, #36]	; 0x24
 800a514:	b920      	cbnz	r0, 800a520 <_dtoa_r+0x38>
 800a516:	4bb2      	ldr	r3, [pc, #712]	; (800a7e0 <_dtoa_r+0x2f8>)
 800a518:	21ea      	movs	r1, #234	; 0xea
 800a51a:	48b2      	ldr	r0, [pc, #712]	; (800a7e4 <_dtoa_r+0x2fc>)
 800a51c:	f001 fb80 	bl	800bc20 <__assert_func>
 800a520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a524:	6005      	str	r5, [r0, #0]
 800a526:	60c5      	str	r5, [r0, #12]
 800a528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a52a:	6819      	ldr	r1, [r3, #0]
 800a52c:	b151      	cbz	r1, 800a544 <_dtoa_r+0x5c>
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	604a      	str	r2, [r1, #4]
 800a532:	2301      	movs	r3, #1
 800a534:	4093      	lsls	r3, r2
 800a536:	608b      	str	r3, [r1, #8]
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fe0d 	bl	800b158 <_Bfree>
 800a53e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a540:	2200      	movs	r2, #0
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	1e3b      	subs	r3, r7, #0
 800a546:	bfb9      	ittee	lt
 800a548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a54c:	9303      	strlt	r3, [sp, #12]
 800a54e:	2300      	movge	r3, #0
 800a550:	f8c8 3000 	strge.w	r3, [r8]
 800a554:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a558:	4ba3      	ldr	r3, [pc, #652]	; (800a7e8 <_dtoa_r+0x300>)
 800a55a:	bfbc      	itt	lt
 800a55c:	2201      	movlt	r2, #1
 800a55e:	f8c8 2000 	strlt.w	r2, [r8]
 800a562:	ea33 0309 	bics.w	r3, r3, r9
 800a566:	d11b      	bne.n	800a5a0 <_dtoa_r+0xb8>
 800a568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a56a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a574:	4333      	orrs	r3, r6
 800a576:	f000 857a 	beq.w	800b06e <_dtoa_r+0xb86>
 800a57a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a57c:	b963      	cbnz	r3, 800a598 <_dtoa_r+0xb0>
 800a57e:	4b9b      	ldr	r3, [pc, #620]	; (800a7ec <_dtoa_r+0x304>)
 800a580:	e024      	b.n	800a5cc <_dtoa_r+0xe4>
 800a582:	4b9b      	ldr	r3, [pc, #620]	; (800a7f0 <_dtoa_r+0x308>)
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	3308      	adds	r3, #8
 800a588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	9800      	ldr	r0, [sp, #0]
 800a58e:	b015      	add	sp, #84	; 0x54
 800a590:	ecbd 8b02 	vpop	{d8}
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	4b94      	ldr	r3, [pc, #592]	; (800a7ec <_dtoa_r+0x304>)
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	3303      	adds	r3, #3
 800a59e:	e7f3      	b.n	800a588 <_dtoa_r+0xa0>
 800a5a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	ec51 0b17 	vmov	r0, r1, d7
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a5b0:	f7f6 fa9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	b158      	cbz	r0, 800a5d0 <_dtoa_r+0xe8>
 800a5b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 8551 	beq.w	800b068 <_dtoa_r+0xb80>
 800a5c6:	488b      	ldr	r0, [pc, #556]	; (800a7f4 <_dtoa_r+0x30c>)
 800a5c8:	6018      	str	r0, [r3, #0]
 800a5ca:	1e43      	subs	r3, r0, #1
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	e7dd      	b.n	800a58c <_dtoa_r+0xa4>
 800a5d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a5d4:	aa12      	add	r2, sp, #72	; 0x48
 800a5d6:	a913      	add	r1, sp, #76	; 0x4c
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f001 f89f 	bl	800b71c <__d2b>
 800a5de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5e2:	4683      	mov	fp, r0
 800a5e4:	2d00      	cmp	r5, #0
 800a5e6:	d07c      	beq.n	800a6e2 <_dtoa_r+0x1fa>
 800a5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a5ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a5f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a5fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a5fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a602:	4b7d      	ldr	r3, [pc, #500]	; (800a7f8 <_dtoa_r+0x310>)
 800a604:	2200      	movs	r2, #0
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	f7f5 fe4d 	bl	80002a8 <__aeabi_dsub>
 800a60e:	a36e      	add	r3, pc, #440	; (adr r3, 800a7c8 <_dtoa_r+0x2e0>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7f6 f800 	bl	8000618 <__aeabi_dmul>
 800a618:	a36d      	add	r3, pc, #436	; (adr r3, 800a7d0 <_dtoa_r+0x2e8>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f7f5 fe45 	bl	80002ac <__adddf3>
 800a622:	4606      	mov	r6, r0
 800a624:	4628      	mov	r0, r5
 800a626:	460f      	mov	r7, r1
 800a628:	f7f5 ff8c 	bl	8000544 <__aeabi_i2d>
 800a62c:	a36a      	add	r3, pc, #424	; (adr r3, 800a7d8 <_dtoa_r+0x2f0>)
 800a62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a632:	f7f5 fff1 	bl	8000618 <__aeabi_dmul>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4630      	mov	r0, r6
 800a63c:	4639      	mov	r1, r7
 800a63e:	f7f5 fe35 	bl	80002ac <__adddf3>
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	f7f6 fa97 	bl	8000b78 <__aeabi_d2iz>
 800a64a:	2200      	movs	r2, #0
 800a64c:	4682      	mov	sl, r0
 800a64e:	2300      	movs	r3, #0
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 fa52 	bl	8000afc <__aeabi_dcmplt>
 800a658:	b148      	cbz	r0, 800a66e <_dtoa_r+0x186>
 800a65a:	4650      	mov	r0, sl
 800a65c:	f7f5 ff72 	bl	8000544 <__aeabi_i2d>
 800a660:	4632      	mov	r2, r6
 800a662:	463b      	mov	r3, r7
 800a664:	f7f6 fa40 	bl	8000ae8 <__aeabi_dcmpeq>
 800a668:	b908      	cbnz	r0, 800a66e <_dtoa_r+0x186>
 800a66a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a66e:	f1ba 0f16 	cmp.w	sl, #22
 800a672:	d854      	bhi.n	800a71e <_dtoa_r+0x236>
 800a674:	4b61      	ldr	r3, [pc, #388]	; (800a7fc <_dtoa_r+0x314>)
 800a676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a682:	f7f6 fa3b 	bl	8000afc <__aeabi_dcmplt>
 800a686:	2800      	cmp	r0, #0
 800a688:	d04b      	beq.n	800a722 <_dtoa_r+0x23a>
 800a68a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a68e:	2300      	movs	r3, #0
 800a690:	930e      	str	r3, [sp, #56]	; 0x38
 800a692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a694:	1b5d      	subs	r5, r3, r5
 800a696:	1e6b      	subs	r3, r5, #1
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	bf43      	ittte	mi
 800a69c:	2300      	movmi	r3, #0
 800a69e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a6a2:	9304      	strmi	r3, [sp, #16]
 800a6a4:	f04f 0800 	movpl.w	r8, #0
 800a6a8:	f1ba 0f00 	cmp.w	sl, #0
 800a6ac:	db3b      	blt.n	800a726 <_dtoa_r+0x23e>
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a6b4:	4453      	add	r3, sl
 800a6b6:	9304      	str	r3, [sp, #16]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9306      	str	r3, [sp, #24]
 800a6bc:	9b05      	ldr	r3, [sp, #20]
 800a6be:	2b09      	cmp	r3, #9
 800a6c0:	d869      	bhi.n	800a796 <_dtoa_r+0x2ae>
 800a6c2:	2b05      	cmp	r3, #5
 800a6c4:	bfc4      	itt	gt
 800a6c6:	3b04      	subgt	r3, #4
 800a6c8:	9305      	strgt	r3, [sp, #20]
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	f1a3 0302 	sub.w	r3, r3, #2
 800a6d0:	bfcc      	ite	gt
 800a6d2:	2500      	movgt	r5, #0
 800a6d4:	2501      	movle	r5, #1
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d869      	bhi.n	800a7ae <_dtoa_r+0x2c6>
 800a6da:	e8df f003 	tbb	[pc, r3]
 800a6de:	4e2c      	.short	0x4e2c
 800a6e0:	5a4c      	.short	0x5a4c
 800a6e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a6e6:	441d      	add	r5, r3
 800a6e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	bfc1      	itttt	gt
 800a6f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a6f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a6f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a6fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a700:	bfda      	itte	le
 800a702:	f1c3 0320 	rsble	r3, r3, #32
 800a706:	fa06 f003 	lslle.w	r0, r6, r3
 800a70a:	4318      	orrgt	r0, r3
 800a70c:	f7f5 ff0a 	bl	8000524 <__aeabi_ui2d>
 800a710:	2301      	movs	r3, #1
 800a712:	4606      	mov	r6, r0
 800a714:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a718:	3d01      	subs	r5, #1
 800a71a:	9310      	str	r3, [sp, #64]	; 0x40
 800a71c:	e771      	b.n	800a602 <_dtoa_r+0x11a>
 800a71e:	2301      	movs	r3, #1
 800a720:	e7b6      	b.n	800a690 <_dtoa_r+0x1a8>
 800a722:	900e      	str	r0, [sp, #56]	; 0x38
 800a724:	e7b5      	b.n	800a692 <_dtoa_r+0x1aa>
 800a726:	f1ca 0300 	rsb	r3, sl, #0
 800a72a:	9306      	str	r3, [sp, #24]
 800a72c:	2300      	movs	r3, #0
 800a72e:	eba8 080a 	sub.w	r8, r8, sl
 800a732:	930d      	str	r3, [sp, #52]	; 0x34
 800a734:	e7c2      	b.n	800a6bc <_dtoa_r+0x1d4>
 800a736:	2300      	movs	r3, #0
 800a738:	9308      	str	r3, [sp, #32]
 800a73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	dc39      	bgt.n	800a7b4 <_dtoa_r+0x2cc>
 800a740:	f04f 0901 	mov.w	r9, #1
 800a744:	f8cd 9004 	str.w	r9, [sp, #4]
 800a748:	464b      	mov	r3, r9
 800a74a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a74e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a750:	2200      	movs	r2, #0
 800a752:	6042      	str	r2, [r0, #4]
 800a754:	2204      	movs	r2, #4
 800a756:	f102 0614 	add.w	r6, r2, #20
 800a75a:	429e      	cmp	r6, r3
 800a75c:	6841      	ldr	r1, [r0, #4]
 800a75e:	d92f      	bls.n	800a7c0 <_dtoa_r+0x2d8>
 800a760:	4620      	mov	r0, r4
 800a762:	f000 fcb9 	bl	800b0d8 <_Balloc>
 800a766:	9000      	str	r0, [sp, #0]
 800a768:	2800      	cmp	r0, #0
 800a76a:	d14b      	bne.n	800a804 <_dtoa_r+0x31c>
 800a76c:	4b24      	ldr	r3, [pc, #144]	; (800a800 <_dtoa_r+0x318>)
 800a76e:	4602      	mov	r2, r0
 800a770:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a774:	e6d1      	b.n	800a51a <_dtoa_r+0x32>
 800a776:	2301      	movs	r3, #1
 800a778:	e7de      	b.n	800a738 <_dtoa_r+0x250>
 800a77a:	2300      	movs	r3, #0
 800a77c:	9308      	str	r3, [sp, #32]
 800a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a780:	eb0a 0903 	add.w	r9, sl, r3
 800a784:	f109 0301 	add.w	r3, r9, #1
 800a788:	2b01      	cmp	r3, #1
 800a78a:	9301      	str	r3, [sp, #4]
 800a78c:	bfb8      	it	lt
 800a78e:	2301      	movlt	r3, #1
 800a790:	e7dd      	b.n	800a74e <_dtoa_r+0x266>
 800a792:	2301      	movs	r3, #1
 800a794:	e7f2      	b.n	800a77c <_dtoa_r+0x294>
 800a796:	2501      	movs	r5, #1
 800a798:	2300      	movs	r3, #0
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	9508      	str	r5, [sp, #32]
 800a79e:	f04f 39ff 	mov.w	r9, #4294967295
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7a8:	2312      	movs	r3, #18
 800a7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ac:	e7cf      	b.n	800a74e <_dtoa_r+0x266>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	9308      	str	r3, [sp, #32]
 800a7b2:	e7f4      	b.n	800a79e <_dtoa_r+0x2b6>
 800a7b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a7b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7bc:	464b      	mov	r3, r9
 800a7be:	e7c6      	b.n	800a74e <_dtoa_r+0x266>
 800a7c0:	3101      	adds	r1, #1
 800a7c2:	6041      	str	r1, [r0, #4]
 800a7c4:	0052      	lsls	r2, r2, #1
 800a7c6:	e7c6      	b.n	800a756 <_dtoa_r+0x26e>
 800a7c8:	636f4361 	.word	0x636f4361
 800a7cc:	3fd287a7 	.word	0x3fd287a7
 800a7d0:	8b60c8b3 	.word	0x8b60c8b3
 800a7d4:	3fc68a28 	.word	0x3fc68a28
 800a7d8:	509f79fb 	.word	0x509f79fb
 800a7dc:	3fd34413 	.word	0x3fd34413
 800a7e0:	0800c8f5 	.word	0x0800c8f5
 800a7e4:	0800c90c 	.word	0x0800c90c
 800a7e8:	7ff00000 	.word	0x7ff00000
 800a7ec:	0800c8f1 	.word	0x0800c8f1
 800a7f0:	0800c8e8 	.word	0x0800c8e8
 800a7f4:	0800c8c5 	.word	0x0800c8c5
 800a7f8:	3ff80000 	.word	0x3ff80000
 800a7fc:	0800ca08 	.word	0x0800ca08
 800a800:	0800c96b 	.word	0x0800c96b
 800a804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a806:	9a00      	ldr	r2, [sp, #0]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	9b01      	ldr	r3, [sp, #4]
 800a80c:	2b0e      	cmp	r3, #14
 800a80e:	f200 80ad 	bhi.w	800a96c <_dtoa_r+0x484>
 800a812:	2d00      	cmp	r5, #0
 800a814:	f000 80aa 	beq.w	800a96c <_dtoa_r+0x484>
 800a818:	f1ba 0f00 	cmp.w	sl, #0
 800a81c:	dd36      	ble.n	800a88c <_dtoa_r+0x3a4>
 800a81e:	4ac3      	ldr	r2, [pc, #780]	; (800ab2c <_dtoa_r+0x644>)
 800a820:	f00a 030f 	and.w	r3, sl, #15
 800a824:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a828:	ed93 7b00 	vldr	d7, [r3]
 800a82c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a830:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a834:	eeb0 8a47 	vmov.f32	s16, s14
 800a838:	eef0 8a67 	vmov.f32	s17, s15
 800a83c:	d016      	beq.n	800a86c <_dtoa_r+0x384>
 800a83e:	4bbc      	ldr	r3, [pc, #752]	; (800ab30 <_dtoa_r+0x648>)
 800a840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a848:	f7f6 f810 	bl	800086c <__aeabi_ddiv>
 800a84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a850:	f007 070f 	and.w	r7, r7, #15
 800a854:	2503      	movs	r5, #3
 800a856:	4eb6      	ldr	r6, [pc, #728]	; (800ab30 <_dtoa_r+0x648>)
 800a858:	b957      	cbnz	r7, 800a870 <_dtoa_r+0x388>
 800a85a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a85e:	ec53 2b18 	vmov	r2, r3, d8
 800a862:	f7f6 f803 	bl	800086c <__aeabi_ddiv>
 800a866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a86a:	e029      	b.n	800a8c0 <_dtoa_r+0x3d8>
 800a86c:	2502      	movs	r5, #2
 800a86e:	e7f2      	b.n	800a856 <_dtoa_r+0x36e>
 800a870:	07f9      	lsls	r1, r7, #31
 800a872:	d508      	bpl.n	800a886 <_dtoa_r+0x39e>
 800a874:	ec51 0b18 	vmov	r0, r1, d8
 800a878:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a87c:	f7f5 fecc 	bl	8000618 <__aeabi_dmul>
 800a880:	ec41 0b18 	vmov	d8, r0, r1
 800a884:	3501      	adds	r5, #1
 800a886:	107f      	asrs	r7, r7, #1
 800a888:	3608      	adds	r6, #8
 800a88a:	e7e5      	b.n	800a858 <_dtoa_r+0x370>
 800a88c:	f000 80a6 	beq.w	800a9dc <_dtoa_r+0x4f4>
 800a890:	f1ca 0600 	rsb	r6, sl, #0
 800a894:	4ba5      	ldr	r3, [pc, #660]	; (800ab2c <_dtoa_r+0x644>)
 800a896:	4fa6      	ldr	r7, [pc, #664]	; (800ab30 <_dtoa_r+0x648>)
 800a898:	f006 020f 	and.w	r2, r6, #15
 800a89c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8a8:	f7f5 feb6 	bl	8000618 <__aeabi_dmul>
 800a8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8b0:	1136      	asrs	r6, r6, #4
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	2502      	movs	r5, #2
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	f040 8085 	bne.w	800a9c6 <_dtoa_r+0x4de>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1d2      	bne.n	800a866 <_dtoa_r+0x37e>
 800a8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 808c 	beq.w	800a9e0 <_dtoa_r+0x4f8>
 800a8c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8cc:	4b99      	ldr	r3, [pc, #612]	; (800ab34 <_dtoa_r+0x64c>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f6 f912 	bl	8000afc <__aeabi_dcmplt>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	f000 8081 	beq.w	800a9e0 <_dtoa_r+0x4f8>
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d07d      	beq.n	800a9e0 <_dtoa_r+0x4f8>
 800a8e4:	f1b9 0f00 	cmp.w	r9, #0
 800a8e8:	dd3c      	ble.n	800a964 <_dtoa_r+0x47c>
 800a8ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	4b91      	ldr	r3, [pc, #580]	; (800ab38 <_dtoa_r+0x650>)
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	f7f5 fe8e 	bl	8000618 <__aeabi_dmul>
 800a8fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a900:	3501      	adds	r5, #1
 800a902:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a906:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a90a:	4628      	mov	r0, r5
 800a90c:	f7f5 fe1a 	bl	8000544 <__aeabi_i2d>
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	f7f5 fe80 	bl	8000618 <__aeabi_dmul>
 800a918:	4b88      	ldr	r3, [pc, #544]	; (800ab3c <_dtoa_r+0x654>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	f7f5 fcc6 	bl	80002ac <__adddf3>
 800a920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a928:	9303      	str	r3, [sp, #12]
 800a92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d15c      	bne.n	800a9ea <_dtoa_r+0x502>
 800a930:	4b83      	ldr	r3, [pc, #524]	; (800ab40 <_dtoa_r+0x658>)
 800a932:	2200      	movs	r2, #0
 800a934:	4630      	mov	r0, r6
 800a936:	4639      	mov	r1, r7
 800a938:	f7f5 fcb6 	bl	80002a8 <__aeabi_dsub>
 800a93c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a940:	4606      	mov	r6, r0
 800a942:	460f      	mov	r7, r1
 800a944:	f7f6 f8f8 	bl	8000b38 <__aeabi_dcmpgt>
 800a948:	2800      	cmp	r0, #0
 800a94a:	f040 8296 	bne.w	800ae7a <_dtoa_r+0x992>
 800a94e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a952:	4630      	mov	r0, r6
 800a954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a958:	4639      	mov	r1, r7
 800a95a:	f7f6 f8cf 	bl	8000afc <__aeabi_dcmplt>
 800a95e:	2800      	cmp	r0, #0
 800a960:	f040 8288 	bne.w	800ae74 <_dtoa_r+0x98c>
 800a964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a968:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a96c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f2c0 8158 	blt.w	800ac24 <_dtoa_r+0x73c>
 800a974:	f1ba 0f0e 	cmp.w	sl, #14
 800a978:	f300 8154 	bgt.w	800ac24 <_dtoa_r+0x73c>
 800a97c:	4b6b      	ldr	r3, [pc, #428]	; (800ab2c <_dtoa_r+0x644>)
 800a97e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a982:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f280 80e3 	bge.w	800ab54 <_dtoa_r+0x66c>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	f300 80df 	bgt.w	800ab54 <_dtoa_r+0x66c>
 800a996:	f040 826d 	bne.w	800ae74 <_dtoa_r+0x98c>
 800a99a:	4b69      	ldr	r3, [pc, #420]	; (800ab40 <_dtoa_r+0x658>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	4640      	mov	r0, r8
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	f7f5 fe39 	bl	8000618 <__aeabi_dmul>
 800a9a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9aa:	f7f6 f8bb 	bl	8000b24 <__aeabi_dcmpge>
 800a9ae:	9e01      	ldr	r6, [sp, #4]
 800a9b0:	4637      	mov	r7, r6
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	f040 8243 	bne.w	800ae3e <_dtoa_r+0x956>
 800a9b8:	9d00      	ldr	r5, [sp, #0]
 800a9ba:	2331      	movs	r3, #49	; 0x31
 800a9bc:	f805 3b01 	strb.w	r3, [r5], #1
 800a9c0:	f10a 0a01 	add.w	sl, sl, #1
 800a9c4:	e23f      	b.n	800ae46 <_dtoa_r+0x95e>
 800a9c6:	07f2      	lsls	r2, r6, #31
 800a9c8:	d505      	bpl.n	800a9d6 <_dtoa_r+0x4ee>
 800a9ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ce:	f7f5 fe23 	bl	8000618 <__aeabi_dmul>
 800a9d2:	3501      	adds	r5, #1
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	1076      	asrs	r6, r6, #1
 800a9d8:	3708      	adds	r7, #8
 800a9da:	e76c      	b.n	800a8b6 <_dtoa_r+0x3ce>
 800a9dc:	2502      	movs	r5, #2
 800a9de:	e76f      	b.n	800a8c0 <_dtoa_r+0x3d8>
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a9e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e8:	e78d      	b.n	800a906 <_dtoa_r+0x41e>
 800a9ea:	9900      	ldr	r1, [sp, #0]
 800a9ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a9ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9f0:	4b4e      	ldr	r3, [pc, #312]	; (800ab2c <_dtoa_r+0x644>)
 800a9f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9f6:	4401      	add	r1, r0
 800a9f8:	9102      	str	r1, [sp, #8]
 800a9fa:	9908      	ldr	r1, [sp, #32]
 800a9fc:	eeb0 8a47 	vmov.f32	s16, s14
 800aa00:	eef0 8a67 	vmov.f32	s17, s15
 800aa04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa0c:	2900      	cmp	r1, #0
 800aa0e:	d045      	beq.n	800aa9c <_dtoa_r+0x5b4>
 800aa10:	494c      	ldr	r1, [pc, #304]	; (800ab44 <_dtoa_r+0x65c>)
 800aa12:	2000      	movs	r0, #0
 800aa14:	f7f5 ff2a 	bl	800086c <__aeabi_ddiv>
 800aa18:	ec53 2b18 	vmov	r2, r3, d8
 800aa1c:	f7f5 fc44 	bl	80002a8 <__aeabi_dsub>
 800aa20:	9d00      	ldr	r5, [sp, #0]
 800aa22:	ec41 0b18 	vmov	d8, r0, r1
 800aa26:	4639      	mov	r1, r7
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7f6 f8a5 	bl	8000b78 <__aeabi_d2iz>
 800aa2e:	900c      	str	r0, [sp, #48]	; 0x30
 800aa30:	f7f5 fd88 	bl	8000544 <__aeabi_i2d>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 fc34 	bl	80002a8 <__aeabi_dsub>
 800aa40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa42:	3330      	adds	r3, #48	; 0x30
 800aa44:	f805 3b01 	strb.w	r3, [r5], #1
 800aa48:	ec53 2b18 	vmov	r2, r3, d8
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	f7f6 f854 	bl	8000afc <__aeabi_dcmplt>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d165      	bne.n	800ab24 <_dtoa_r+0x63c>
 800aa58:	4632      	mov	r2, r6
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	4935      	ldr	r1, [pc, #212]	; (800ab34 <_dtoa_r+0x64c>)
 800aa5e:	2000      	movs	r0, #0
 800aa60:	f7f5 fc22 	bl	80002a8 <__aeabi_dsub>
 800aa64:	ec53 2b18 	vmov	r2, r3, d8
 800aa68:	f7f6 f848 	bl	8000afc <__aeabi_dcmplt>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	f040 80b9 	bne.w	800abe4 <_dtoa_r+0x6fc>
 800aa72:	9b02      	ldr	r3, [sp, #8]
 800aa74:	429d      	cmp	r5, r3
 800aa76:	f43f af75 	beq.w	800a964 <_dtoa_r+0x47c>
 800aa7a:	4b2f      	ldr	r3, [pc, #188]	; (800ab38 <_dtoa_r+0x650>)
 800aa7c:	ec51 0b18 	vmov	r0, r1, d8
 800aa80:	2200      	movs	r2, #0
 800aa82:	f7f5 fdc9 	bl	8000618 <__aeabi_dmul>
 800aa86:	4b2c      	ldr	r3, [pc, #176]	; (800ab38 <_dtoa_r+0x650>)
 800aa88:	ec41 0b18 	vmov	d8, r0, r1
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4630      	mov	r0, r6
 800aa90:	4639      	mov	r1, r7
 800aa92:	f7f5 fdc1 	bl	8000618 <__aeabi_dmul>
 800aa96:	4606      	mov	r6, r0
 800aa98:	460f      	mov	r7, r1
 800aa9a:	e7c4      	b.n	800aa26 <_dtoa_r+0x53e>
 800aa9c:	ec51 0b17 	vmov	r0, r1, d7
 800aaa0:	f7f5 fdba 	bl	8000618 <__aeabi_dmul>
 800aaa4:	9b02      	ldr	r3, [sp, #8]
 800aaa6:	9d00      	ldr	r5, [sp, #0]
 800aaa8:	930c      	str	r3, [sp, #48]	; 0x30
 800aaaa:	ec41 0b18 	vmov	d8, r0, r1
 800aaae:	4639      	mov	r1, r7
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7f6 f861 	bl	8000b78 <__aeabi_d2iz>
 800aab6:	9011      	str	r0, [sp, #68]	; 0x44
 800aab8:	f7f5 fd44 	bl	8000544 <__aeabi_i2d>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4630      	mov	r0, r6
 800aac2:	4639      	mov	r1, r7
 800aac4:	f7f5 fbf0 	bl	80002a8 <__aeabi_dsub>
 800aac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaca:	3330      	adds	r3, #48	; 0x30
 800aacc:	f805 3b01 	strb.w	r3, [r5], #1
 800aad0:	9b02      	ldr	r3, [sp, #8]
 800aad2:	429d      	cmp	r5, r3
 800aad4:	4606      	mov	r6, r0
 800aad6:	460f      	mov	r7, r1
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	d134      	bne.n	800ab48 <_dtoa_r+0x660>
 800aade:	4b19      	ldr	r3, [pc, #100]	; (800ab44 <_dtoa_r+0x65c>)
 800aae0:	ec51 0b18 	vmov	r0, r1, d8
 800aae4:	f7f5 fbe2 	bl	80002ac <__adddf3>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4630      	mov	r0, r6
 800aaee:	4639      	mov	r1, r7
 800aaf0:	f7f6 f822 	bl	8000b38 <__aeabi_dcmpgt>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d175      	bne.n	800abe4 <_dtoa_r+0x6fc>
 800aaf8:	ec53 2b18 	vmov	r2, r3, d8
 800aafc:	4911      	ldr	r1, [pc, #68]	; (800ab44 <_dtoa_r+0x65c>)
 800aafe:	2000      	movs	r0, #0
 800ab00:	f7f5 fbd2 	bl	80002a8 <__aeabi_dsub>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f5 fff6 	bl	8000afc <__aeabi_dcmplt>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f43f af27 	beq.w	800a964 <_dtoa_r+0x47c>
 800ab16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab18:	1e6b      	subs	r3, r5, #1
 800ab1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab20:	2b30      	cmp	r3, #48	; 0x30
 800ab22:	d0f8      	beq.n	800ab16 <_dtoa_r+0x62e>
 800ab24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ab28:	e04a      	b.n	800abc0 <_dtoa_r+0x6d8>
 800ab2a:	bf00      	nop
 800ab2c:	0800ca08 	.word	0x0800ca08
 800ab30:	0800c9e0 	.word	0x0800c9e0
 800ab34:	3ff00000 	.word	0x3ff00000
 800ab38:	40240000 	.word	0x40240000
 800ab3c:	401c0000 	.word	0x401c0000
 800ab40:	40140000 	.word	0x40140000
 800ab44:	3fe00000 	.word	0x3fe00000
 800ab48:	4baf      	ldr	r3, [pc, #700]	; (800ae08 <_dtoa_r+0x920>)
 800ab4a:	f7f5 fd65 	bl	8000618 <__aeabi_dmul>
 800ab4e:	4606      	mov	r6, r0
 800ab50:	460f      	mov	r7, r1
 800ab52:	e7ac      	b.n	800aaae <_dtoa_r+0x5c6>
 800ab54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab58:	9d00      	ldr	r5, [sp, #0]
 800ab5a:	4642      	mov	r2, r8
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	4630      	mov	r0, r6
 800ab60:	4639      	mov	r1, r7
 800ab62:	f7f5 fe83 	bl	800086c <__aeabi_ddiv>
 800ab66:	f7f6 f807 	bl	8000b78 <__aeabi_d2iz>
 800ab6a:	9002      	str	r0, [sp, #8]
 800ab6c:	f7f5 fcea 	bl	8000544 <__aeabi_i2d>
 800ab70:	4642      	mov	r2, r8
 800ab72:	464b      	mov	r3, r9
 800ab74:	f7f5 fd50 	bl	8000618 <__aeabi_dmul>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	4639      	mov	r1, r7
 800ab80:	f7f5 fb92 	bl	80002a8 <__aeabi_dsub>
 800ab84:	9e02      	ldr	r6, [sp, #8]
 800ab86:	9f01      	ldr	r7, [sp, #4]
 800ab88:	3630      	adds	r6, #48	; 0x30
 800ab8a:	f805 6b01 	strb.w	r6, [r5], #1
 800ab8e:	9e00      	ldr	r6, [sp, #0]
 800ab90:	1bae      	subs	r6, r5, r6
 800ab92:	42b7      	cmp	r7, r6
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	d137      	bne.n	800ac0a <_dtoa_r+0x722>
 800ab9a:	f7f5 fb87 	bl	80002ac <__adddf3>
 800ab9e:	4642      	mov	r2, r8
 800aba0:	464b      	mov	r3, r9
 800aba2:	4606      	mov	r6, r0
 800aba4:	460f      	mov	r7, r1
 800aba6:	f7f5 ffc7 	bl	8000b38 <__aeabi_dcmpgt>
 800abaa:	b9c8      	cbnz	r0, 800abe0 <_dtoa_r+0x6f8>
 800abac:	4642      	mov	r2, r8
 800abae:	464b      	mov	r3, r9
 800abb0:	4630      	mov	r0, r6
 800abb2:	4639      	mov	r1, r7
 800abb4:	f7f5 ff98 	bl	8000ae8 <__aeabi_dcmpeq>
 800abb8:	b110      	cbz	r0, 800abc0 <_dtoa_r+0x6d8>
 800abba:	9b02      	ldr	r3, [sp, #8]
 800abbc:	07d9      	lsls	r1, r3, #31
 800abbe:	d40f      	bmi.n	800abe0 <_dtoa_r+0x6f8>
 800abc0:	4620      	mov	r0, r4
 800abc2:	4659      	mov	r1, fp
 800abc4:	f000 fac8 	bl	800b158 <_Bfree>
 800abc8:	2300      	movs	r3, #0
 800abca:	702b      	strb	r3, [r5, #0]
 800abcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abce:	f10a 0001 	add.w	r0, sl, #1
 800abd2:	6018      	str	r0, [r3, #0]
 800abd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f43f acd8 	beq.w	800a58c <_dtoa_r+0xa4>
 800abdc:	601d      	str	r5, [r3, #0]
 800abde:	e4d5      	b.n	800a58c <_dtoa_r+0xa4>
 800abe0:	f8cd a01c 	str.w	sl, [sp, #28]
 800abe4:	462b      	mov	r3, r5
 800abe6:	461d      	mov	r5, r3
 800abe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abec:	2a39      	cmp	r2, #57	; 0x39
 800abee:	d108      	bne.n	800ac02 <_dtoa_r+0x71a>
 800abf0:	9a00      	ldr	r2, [sp, #0]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d1f7      	bne.n	800abe6 <_dtoa_r+0x6fe>
 800abf6:	9a07      	ldr	r2, [sp, #28]
 800abf8:	9900      	ldr	r1, [sp, #0]
 800abfa:	3201      	adds	r2, #1
 800abfc:	9207      	str	r2, [sp, #28]
 800abfe:	2230      	movs	r2, #48	; 0x30
 800ac00:	700a      	strb	r2, [r1, #0]
 800ac02:	781a      	ldrb	r2, [r3, #0]
 800ac04:	3201      	adds	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	e78c      	b.n	800ab24 <_dtoa_r+0x63c>
 800ac0a:	4b7f      	ldr	r3, [pc, #508]	; (800ae08 <_dtoa_r+0x920>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f7f5 fd03 	bl	8000618 <__aeabi_dmul>
 800ac12:	2200      	movs	r2, #0
 800ac14:	2300      	movs	r3, #0
 800ac16:	4606      	mov	r6, r0
 800ac18:	460f      	mov	r7, r1
 800ac1a:	f7f5 ff65 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d09b      	beq.n	800ab5a <_dtoa_r+0x672>
 800ac22:	e7cd      	b.n	800abc0 <_dtoa_r+0x6d8>
 800ac24:	9a08      	ldr	r2, [sp, #32]
 800ac26:	2a00      	cmp	r2, #0
 800ac28:	f000 80c4 	beq.w	800adb4 <_dtoa_r+0x8cc>
 800ac2c:	9a05      	ldr	r2, [sp, #20]
 800ac2e:	2a01      	cmp	r2, #1
 800ac30:	f300 80a8 	bgt.w	800ad84 <_dtoa_r+0x89c>
 800ac34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	f000 80a0 	beq.w	800ad7c <_dtoa_r+0x894>
 800ac3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac40:	9e06      	ldr	r6, [sp, #24]
 800ac42:	4645      	mov	r5, r8
 800ac44:	9a04      	ldr	r2, [sp, #16]
 800ac46:	2101      	movs	r1, #1
 800ac48:	441a      	add	r2, r3
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	4498      	add	r8, r3
 800ac4e:	9204      	str	r2, [sp, #16]
 800ac50:	f000 fb3e 	bl	800b2d0 <__i2b>
 800ac54:	4607      	mov	r7, r0
 800ac56:	2d00      	cmp	r5, #0
 800ac58:	dd0b      	ble.n	800ac72 <_dtoa_r+0x78a>
 800ac5a:	9b04      	ldr	r3, [sp, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dd08      	ble.n	800ac72 <_dtoa_r+0x78a>
 800ac60:	42ab      	cmp	r3, r5
 800ac62:	9a04      	ldr	r2, [sp, #16]
 800ac64:	bfa8      	it	ge
 800ac66:	462b      	movge	r3, r5
 800ac68:	eba8 0803 	sub.w	r8, r8, r3
 800ac6c:	1aed      	subs	r5, r5, r3
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	9b06      	ldr	r3, [sp, #24]
 800ac74:	b1fb      	cbz	r3, 800acb6 <_dtoa_r+0x7ce>
 800ac76:	9b08      	ldr	r3, [sp, #32]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 809f 	beq.w	800adbc <_dtoa_r+0x8d4>
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	dd11      	ble.n	800aca6 <_dtoa_r+0x7be>
 800ac82:	4639      	mov	r1, r7
 800ac84:	4632      	mov	r2, r6
 800ac86:	4620      	mov	r0, r4
 800ac88:	f000 fbde 	bl	800b448 <__pow5mult>
 800ac8c:	465a      	mov	r2, fp
 800ac8e:	4601      	mov	r1, r0
 800ac90:	4607      	mov	r7, r0
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fb32 	bl	800b2fc <__multiply>
 800ac98:	4659      	mov	r1, fp
 800ac9a:	9007      	str	r0, [sp, #28]
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 fa5b 	bl	800b158 <_Bfree>
 800aca2:	9b07      	ldr	r3, [sp, #28]
 800aca4:	469b      	mov	fp, r3
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	1b9a      	subs	r2, r3, r6
 800acaa:	d004      	beq.n	800acb6 <_dtoa_r+0x7ce>
 800acac:	4659      	mov	r1, fp
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 fbca 	bl	800b448 <__pow5mult>
 800acb4:	4683      	mov	fp, r0
 800acb6:	2101      	movs	r1, #1
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 fb09 	bl	800b2d0 <__i2b>
 800acbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	4606      	mov	r6, r0
 800acc4:	dd7c      	ble.n	800adc0 <_dtoa_r+0x8d8>
 800acc6:	461a      	mov	r2, r3
 800acc8:	4601      	mov	r1, r0
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fbbc 	bl	800b448 <__pow5mult>
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	4606      	mov	r6, r0
 800acd6:	dd76      	ble.n	800adc6 <_dtoa_r+0x8de>
 800acd8:	2300      	movs	r3, #0
 800acda:	9306      	str	r3, [sp, #24]
 800acdc:	6933      	ldr	r3, [r6, #16]
 800acde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ace2:	6918      	ldr	r0, [r3, #16]
 800ace4:	f000 faa4 	bl	800b230 <__hi0bits>
 800ace8:	f1c0 0020 	rsb	r0, r0, #32
 800acec:	9b04      	ldr	r3, [sp, #16]
 800acee:	4418      	add	r0, r3
 800acf0:	f010 001f 	ands.w	r0, r0, #31
 800acf4:	f000 8086 	beq.w	800ae04 <_dtoa_r+0x91c>
 800acf8:	f1c0 0320 	rsb	r3, r0, #32
 800acfc:	2b04      	cmp	r3, #4
 800acfe:	dd7f      	ble.n	800ae00 <_dtoa_r+0x918>
 800ad00:	f1c0 001c 	rsb	r0, r0, #28
 800ad04:	9b04      	ldr	r3, [sp, #16]
 800ad06:	4403      	add	r3, r0
 800ad08:	4480      	add	r8, r0
 800ad0a:	4405      	add	r5, r0
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	f1b8 0f00 	cmp.w	r8, #0
 800ad12:	dd05      	ble.n	800ad20 <_dtoa_r+0x838>
 800ad14:	4659      	mov	r1, fp
 800ad16:	4642      	mov	r2, r8
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 fbef 	bl	800b4fc <__lshift>
 800ad1e:	4683      	mov	fp, r0
 800ad20:	9b04      	ldr	r3, [sp, #16]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dd05      	ble.n	800ad32 <_dtoa_r+0x84a>
 800ad26:	4631      	mov	r1, r6
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fbe6 	bl	800b4fc <__lshift>
 800ad30:	4606      	mov	r6, r0
 800ad32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d069      	beq.n	800ae0c <_dtoa_r+0x924>
 800ad38:	4631      	mov	r1, r6
 800ad3a:	4658      	mov	r0, fp
 800ad3c:	f000 fc4a 	bl	800b5d4 <__mcmp>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	da63      	bge.n	800ae0c <_dtoa_r+0x924>
 800ad44:	2300      	movs	r3, #0
 800ad46:	4659      	mov	r1, fp
 800ad48:	220a      	movs	r2, #10
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fa26 	bl	800b19c <__multadd>
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad56:	4683      	mov	fp, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 818f 	beq.w	800b07c <_dtoa_r+0xb94>
 800ad5e:	4639      	mov	r1, r7
 800ad60:	2300      	movs	r3, #0
 800ad62:	220a      	movs	r2, #10
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fa19 	bl	800b19c <__multadd>
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	4607      	mov	r7, r0
 800ad70:	f300 808e 	bgt.w	800ae90 <_dtoa_r+0x9a8>
 800ad74:	9b05      	ldr	r3, [sp, #20]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	dc50      	bgt.n	800ae1c <_dtoa_r+0x934>
 800ad7a:	e089      	b.n	800ae90 <_dtoa_r+0x9a8>
 800ad7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad82:	e75d      	b.n	800ac40 <_dtoa_r+0x758>
 800ad84:	9b01      	ldr	r3, [sp, #4]
 800ad86:	1e5e      	subs	r6, r3, #1
 800ad88:	9b06      	ldr	r3, [sp, #24]
 800ad8a:	42b3      	cmp	r3, r6
 800ad8c:	bfbf      	itttt	lt
 800ad8e:	9b06      	ldrlt	r3, [sp, #24]
 800ad90:	9606      	strlt	r6, [sp, #24]
 800ad92:	1af2      	sublt	r2, r6, r3
 800ad94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ad96:	bfb6      	itet	lt
 800ad98:	189b      	addlt	r3, r3, r2
 800ad9a:	1b9e      	subge	r6, r3, r6
 800ad9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	bfb8      	it	lt
 800ada2:	2600      	movlt	r6, #0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bfb5      	itete	lt
 800ada8:	eba8 0503 	sublt.w	r5, r8, r3
 800adac:	9b01      	ldrge	r3, [sp, #4]
 800adae:	2300      	movlt	r3, #0
 800adb0:	4645      	movge	r5, r8
 800adb2:	e747      	b.n	800ac44 <_dtoa_r+0x75c>
 800adb4:	9e06      	ldr	r6, [sp, #24]
 800adb6:	9f08      	ldr	r7, [sp, #32]
 800adb8:	4645      	mov	r5, r8
 800adba:	e74c      	b.n	800ac56 <_dtoa_r+0x76e>
 800adbc:	9a06      	ldr	r2, [sp, #24]
 800adbe:	e775      	b.n	800acac <_dtoa_r+0x7c4>
 800adc0:	9b05      	ldr	r3, [sp, #20]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	dc18      	bgt.n	800adf8 <_dtoa_r+0x910>
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	b9b3      	cbnz	r3, 800adf8 <_dtoa_r+0x910>
 800adca:	9b03      	ldr	r3, [sp, #12]
 800adcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800add0:	b9a3      	cbnz	r3, 800adfc <_dtoa_r+0x914>
 800add2:	9b03      	ldr	r3, [sp, #12]
 800add4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800add8:	0d1b      	lsrs	r3, r3, #20
 800adda:	051b      	lsls	r3, r3, #20
 800addc:	b12b      	cbz	r3, 800adea <_dtoa_r+0x902>
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	3301      	adds	r3, #1
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	f108 0801 	add.w	r8, r8, #1
 800ade8:	2301      	movs	r3, #1
 800adea:	9306      	str	r3, [sp, #24]
 800adec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f47f af74 	bne.w	800acdc <_dtoa_r+0x7f4>
 800adf4:	2001      	movs	r0, #1
 800adf6:	e779      	b.n	800acec <_dtoa_r+0x804>
 800adf8:	2300      	movs	r3, #0
 800adfa:	e7f6      	b.n	800adea <_dtoa_r+0x902>
 800adfc:	9b02      	ldr	r3, [sp, #8]
 800adfe:	e7f4      	b.n	800adea <_dtoa_r+0x902>
 800ae00:	d085      	beq.n	800ad0e <_dtoa_r+0x826>
 800ae02:	4618      	mov	r0, r3
 800ae04:	301c      	adds	r0, #28
 800ae06:	e77d      	b.n	800ad04 <_dtoa_r+0x81c>
 800ae08:	40240000 	.word	0x40240000
 800ae0c:	9b01      	ldr	r3, [sp, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	dc38      	bgt.n	800ae84 <_dtoa_r+0x99c>
 800ae12:	9b05      	ldr	r3, [sp, #20]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	dd35      	ble.n	800ae84 <_dtoa_r+0x99c>
 800ae18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ae1c:	f1b9 0f00 	cmp.w	r9, #0
 800ae20:	d10d      	bne.n	800ae3e <_dtoa_r+0x956>
 800ae22:	4631      	mov	r1, r6
 800ae24:	464b      	mov	r3, r9
 800ae26:	2205      	movs	r2, #5
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 f9b7 	bl	800b19c <__multadd>
 800ae2e:	4601      	mov	r1, r0
 800ae30:	4606      	mov	r6, r0
 800ae32:	4658      	mov	r0, fp
 800ae34:	f000 fbce 	bl	800b5d4 <__mcmp>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	f73f adbd 	bgt.w	800a9b8 <_dtoa_r+0x4d0>
 800ae3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae40:	9d00      	ldr	r5, [sp, #0]
 800ae42:	ea6f 0a03 	mvn.w	sl, r3
 800ae46:	f04f 0800 	mov.w	r8, #0
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f000 f983 	bl	800b158 <_Bfree>
 800ae52:	2f00      	cmp	r7, #0
 800ae54:	f43f aeb4 	beq.w	800abc0 <_dtoa_r+0x6d8>
 800ae58:	f1b8 0f00 	cmp.w	r8, #0
 800ae5c:	d005      	beq.n	800ae6a <_dtoa_r+0x982>
 800ae5e:	45b8      	cmp	r8, r7
 800ae60:	d003      	beq.n	800ae6a <_dtoa_r+0x982>
 800ae62:	4641      	mov	r1, r8
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 f977 	bl	800b158 <_Bfree>
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 f973 	bl	800b158 <_Bfree>
 800ae72:	e6a5      	b.n	800abc0 <_dtoa_r+0x6d8>
 800ae74:	2600      	movs	r6, #0
 800ae76:	4637      	mov	r7, r6
 800ae78:	e7e1      	b.n	800ae3e <_dtoa_r+0x956>
 800ae7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ae7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ae80:	4637      	mov	r7, r6
 800ae82:	e599      	b.n	800a9b8 <_dtoa_r+0x4d0>
 800ae84:	9b08      	ldr	r3, [sp, #32]
 800ae86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80fd 	beq.w	800b08a <_dtoa_r+0xba2>
 800ae90:	2d00      	cmp	r5, #0
 800ae92:	dd05      	ble.n	800aea0 <_dtoa_r+0x9b8>
 800ae94:	4639      	mov	r1, r7
 800ae96:	462a      	mov	r2, r5
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fb2f 	bl	800b4fc <__lshift>
 800ae9e:	4607      	mov	r7, r0
 800aea0:	9b06      	ldr	r3, [sp, #24]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d05c      	beq.n	800af60 <_dtoa_r+0xa78>
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 f915 	bl	800b0d8 <_Balloc>
 800aeae:	4605      	mov	r5, r0
 800aeb0:	b928      	cbnz	r0, 800aebe <_dtoa_r+0x9d6>
 800aeb2:	4b80      	ldr	r3, [pc, #512]	; (800b0b4 <_dtoa_r+0xbcc>)
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aeba:	f7ff bb2e 	b.w	800a51a <_dtoa_r+0x32>
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	3202      	adds	r2, #2
 800aec2:	0092      	lsls	r2, r2, #2
 800aec4:	f107 010c 	add.w	r1, r7, #12
 800aec8:	300c      	adds	r0, #12
 800aeca:	f7fe fde1 	bl	8009a90 <memcpy>
 800aece:	2201      	movs	r2, #1
 800aed0:	4629      	mov	r1, r5
 800aed2:	4620      	mov	r0, r4
 800aed4:	f000 fb12 	bl	800b4fc <__lshift>
 800aed8:	9b00      	ldr	r3, [sp, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	9b00      	ldr	r3, [sp, #0]
 800aee0:	444b      	add	r3, r9
 800aee2:	9307      	str	r3, [sp, #28]
 800aee4:	9b02      	ldr	r3, [sp, #8]
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	46b8      	mov	r8, r7
 800aeec:	9306      	str	r3, [sp, #24]
 800aeee:	4607      	mov	r7, r0
 800aef0:	9b01      	ldr	r3, [sp, #4]
 800aef2:	4631      	mov	r1, r6
 800aef4:	3b01      	subs	r3, #1
 800aef6:	4658      	mov	r0, fp
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	f7ff fa69 	bl	800a3d0 <quorem>
 800aefe:	4603      	mov	r3, r0
 800af00:	3330      	adds	r3, #48	; 0x30
 800af02:	9004      	str	r0, [sp, #16]
 800af04:	4641      	mov	r1, r8
 800af06:	4658      	mov	r0, fp
 800af08:	9308      	str	r3, [sp, #32]
 800af0a:	f000 fb63 	bl	800b5d4 <__mcmp>
 800af0e:	463a      	mov	r2, r7
 800af10:	4681      	mov	r9, r0
 800af12:	4631      	mov	r1, r6
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fb79 	bl	800b60c <__mdiff>
 800af1a:	68c2      	ldr	r2, [r0, #12]
 800af1c:	9b08      	ldr	r3, [sp, #32]
 800af1e:	4605      	mov	r5, r0
 800af20:	bb02      	cbnz	r2, 800af64 <_dtoa_r+0xa7c>
 800af22:	4601      	mov	r1, r0
 800af24:	4658      	mov	r0, fp
 800af26:	f000 fb55 	bl	800b5d4 <__mcmp>
 800af2a:	9b08      	ldr	r3, [sp, #32]
 800af2c:	4602      	mov	r2, r0
 800af2e:	4629      	mov	r1, r5
 800af30:	4620      	mov	r0, r4
 800af32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800af36:	f000 f90f 	bl	800b158 <_Bfree>
 800af3a:	9b05      	ldr	r3, [sp, #20]
 800af3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af3e:	9d01      	ldr	r5, [sp, #4]
 800af40:	ea43 0102 	orr.w	r1, r3, r2
 800af44:	9b06      	ldr	r3, [sp, #24]
 800af46:	430b      	orrs	r3, r1
 800af48:	9b08      	ldr	r3, [sp, #32]
 800af4a:	d10d      	bne.n	800af68 <_dtoa_r+0xa80>
 800af4c:	2b39      	cmp	r3, #57	; 0x39
 800af4e:	d029      	beq.n	800afa4 <_dtoa_r+0xabc>
 800af50:	f1b9 0f00 	cmp.w	r9, #0
 800af54:	dd01      	ble.n	800af5a <_dtoa_r+0xa72>
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	3331      	adds	r3, #49	; 0x31
 800af5a:	9a02      	ldr	r2, [sp, #8]
 800af5c:	7013      	strb	r3, [r2, #0]
 800af5e:	e774      	b.n	800ae4a <_dtoa_r+0x962>
 800af60:	4638      	mov	r0, r7
 800af62:	e7b9      	b.n	800aed8 <_dtoa_r+0x9f0>
 800af64:	2201      	movs	r2, #1
 800af66:	e7e2      	b.n	800af2e <_dtoa_r+0xa46>
 800af68:	f1b9 0f00 	cmp.w	r9, #0
 800af6c:	db06      	blt.n	800af7c <_dtoa_r+0xa94>
 800af6e:	9905      	ldr	r1, [sp, #20]
 800af70:	ea41 0909 	orr.w	r9, r1, r9
 800af74:	9906      	ldr	r1, [sp, #24]
 800af76:	ea59 0101 	orrs.w	r1, r9, r1
 800af7a:	d120      	bne.n	800afbe <_dtoa_r+0xad6>
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	ddec      	ble.n	800af5a <_dtoa_r+0xa72>
 800af80:	4659      	mov	r1, fp
 800af82:	2201      	movs	r2, #1
 800af84:	4620      	mov	r0, r4
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	f000 fab8 	bl	800b4fc <__lshift>
 800af8c:	4631      	mov	r1, r6
 800af8e:	4683      	mov	fp, r0
 800af90:	f000 fb20 	bl	800b5d4 <__mcmp>
 800af94:	2800      	cmp	r0, #0
 800af96:	9b01      	ldr	r3, [sp, #4]
 800af98:	dc02      	bgt.n	800afa0 <_dtoa_r+0xab8>
 800af9a:	d1de      	bne.n	800af5a <_dtoa_r+0xa72>
 800af9c:	07da      	lsls	r2, r3, #31
 800af9e:	d5dc      	bpl.n	800af5a <_dtoa_r+0xa72>
 800afa0:	2b39      	cmp	r3, #57	; 0x39
 800afa2:	d1d8      	bne.n	800af56 <_dtoa_r+0xa6e>
 800afa4:	9a02      	ldr	r2, [sp, #8]
 800afa6:	2339      	movs	r3, #57	; 0x39
 800afa8:	7013      	strb	r3, [r2, #0]
 800afaa:	462b      	mov	r3, r5
 800afac:	461d      	mov	r5, r3
 800afae:	3b01      	subs	r3, #1
 800afb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800afb4:	2a39      	cmp	r2, #57	; 0x39
 800afb6:	d050      	beq.n	800b05a <_dtoa_r+0xb72>
 800afb8:	3201      	adds	r2, #1
 800afba:	701a      	strb	r2, [r3, #0]
 800afbc:	e745      	b.n	800ae4a <_dtoa_r+0x962>
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	dd03      	ble.n	800afca <_dtoa_r+0xae2>
 800afc2:	2b39      	cmp	r3, #57	; 0x39
 800afc4:	d0ee      	beq.n	800afa4 <_dtoa_r+0xabc>
 800afc6:	3301      	adds	r3, #1
 800afc8:	e7c7      	b.n	800af5a <_dtoa_r+0xa72>
 800afca:	9a01      	ldr	r2, [sp, #4]
 800afcc:	9907      	ldr	r1, [sp, #28]
 800afce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800afd2:	428a      	cmp	r2, r1
 800afd4:	d02a      	beq.n	800b02c <_dtoa_r+0xb44>
 800afd6:	4659      	mov	r1, fp
 800afd8:	2300      	movs	r3, #0
 800afda:	220a      	movs	r2, #10
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 f8dd 	bl	800b19c <__multadd>
 800afe2:	45b8      	cmp	r8, r7
 800afe4:	4683      	mov	fp, r0
 800afe6:	f04f 0300 	mov.w	r3, #0
 800afea:	f04f 020a 	mov.w	r2, #10
 800afee:	4641      	mov	r1, r8
 800aff0:	4620      	mov	r0, r4
 800aff2:	d107      	bne.n	800b004 <_dtoa_r+0xb1c>
 800aff4:	f000 f8d2 	bl	800b19c <__multadd>
 800aff8:	4680      	mov	r8, r0
 800affa:	4607      	mov	r7, r0
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	3301      	adds	r3, #1
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	e775      	b.n	800aef0 <_dtoa_r+0xa08>
 800b004:	f000 f8ca 	bl	800b19c <__multadd>
 800b008:	4639      	mov	r1, r7
 800b00a:	4680      	mov	r8, r0
 800b00c:	2300      	movs	r3, #0
 800b00e:	220a      	movs	r2, #10
 800b010:	4620      	mov	r0, r4
 800b012:	f000 f8c3 	bl	800b19c <__multadd>
 800b016:	4607      	mov	r7, r0
 800b018:	e7f0      	b.n	800affc <_dtoa_r+0xb14>
 800b01a:	f1b9 0f00 	cmp.w	r9, #0
 800b01e:	9a00      	ldr	r2, [sp, #0]
 800b020:	bfcc      	ite	gt
 800b022:	464d      	movgt	r5, r9
 800b024:	2501      	movle	r5, #1
 800b026:	4415      	add	r5, r2
 800b028:	f04f 0800 	mov.w	r8, #0
 800b02c:	4659      	mov	r1, fp
 800b02e:	2201      	movs	r2, #1
 800b030:	4620      	mov	r0, r4
 800b032:	9301      	str	r3, [sp, #4]
 800b034:	f000 fa62 	bl	800b4fc <__lshift>
 800b038:	4631      	mov	r1, r6
 800b03a:	4683      	mov	fp, r0
 800b03c:	f000 faca 	bl	800b5d4 <__mcmp>
 800b040:	2800      	cmp	r0, #0
 800b042:	dcb2      	bgt.n	800afaa <_dtoa_r+0xac2>
 800b044:	d102      	bne.n	800b04c <_dtoa_r+0xb64>
 800b046:	9b01      	ldr	r3, [sp, #4]
 800b048:	07db      	lsls	r3, r3, #31
 800b04a:	d4ae      	bmi.n	800afaa <_dtoa_r+0xac2>
 800b04c:	462b      	mov	r3, r5
 800b04e:	461d      	mov	r5, r3
 800b050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b054:	2a30      	cmp	r2, #48	; 0x30
 800b056:	d0fa      	beq.n	800b04e <_dtoa_r+0xb66>
 800b058:	e6f7      	b.n	800ae4a <_dtoa_r+0x962>
 800b05a:	9a00      	ldr	r2, [sp, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d1a5      	bne.n	800afac <_dtoa_r+0xac4>
 800b060:	f10a 0a01 	add.w	sl, sl, #1
 800b064:	2331      	movs	r3, #49	; 0x31
 800b066:	e779      	b.n	800af5c <_dtoa_r+0xa74>
 800b068:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <_dtoa_r+0xbd0>)
 800b06a:	f7ff baaf 	b.w	800a5cc <_dtoa_r+0xe4>
 800b06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b070:	2b00      	cmp	r3, #0
 800b072:	f47f aa86 	bne.w	800a582 <_dtoa_r+0x9a>
 800b076:	4b11      	ldr	r3, [pc, #68]	; (800b0bc <_dtoa_r+0xbd4>)
 800b078:	f7ff baa8 	b.w	800a5cc <_dtoa_r+0xe4>
 800b07c:	f1b9 0f00 	cmp.w	r9, #0
 800b080:	dc03      	bgt.n	800b08a <_dtoa_r+0xba2>
 800b082:	9b05      	ldr	r3, [sp, #20]
 800b084:	2b02      	cmp	r3, #2
 800b086:	f73f aec9 	bgt.w	800ae1c <_dtoa_r+0x934>
 800b08a:	9d00      	ldr	r5, [sp, #0]
 800b08c:	4631      	mov	r1, r6
 800b08e:	4658      	mov	r0, fp
 800b090:	f7ff f99e 	bl	800a3d0 <quorem>
 800b094:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b098:	f805 3b01 	strb.w	r3, [r5], #1
 800b09c:	9a00      	ldr	r2, [sp, #0]
 800b09e:	1aaa      	subs	r2, r5, r2
 800b0a0:	4591      	cmp	r9, r2
 800b0a2:	ddba      	ble.n	800b01a <_dtoa_r+0xb32>
 800b0a4:	4659      	mov	r1, fp
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 f876 	bl	800b19c <__multadd>
 800b0b0:	4683      	mov	fp, r0
 800b0b2:	e7eb      	b.n	800b08c <_dtoa_r+0xba4>
 800b0b4:	0800c96b 	.word	0x0800c96b
 800b0b8:	0800c8c4 	.word	0x0800c8c4
 800b0bc:	0800c8e8 	.word	0x0800c8e8

0800b0c0 <_localeconv_r>:
 800b0c0:	4800      	ldr	r0, [pc, #0]	; (800b0c4 <_localeconv_r+0x4>)
 800b0c2:	4770      	bx	lr
 800b0c4:	200002e4 	.word	0x200002e4

0800b0c8 <malloc>:
 800b0c8:	4b02      	ldr	r3, [pc, #8]	; (800b0d4 <malloc+0xc>)
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	6818      	ldr	r0, [r3, #0]
 800b0ce:	f000 bbe1 	b.w	800b894 <_malloc_r>
 800b0d2:	bf00      	nop
 800b0d4:	20000190 	.word	0x20000190

0800b0d8 <_Balloc>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0dc:	4604      	mov	r4, r0
 800b0de:	460d      	mov	r5, r1
 800b0e0:	b976      	cbnz	r6, 800b100 <_Balloc+0x28>
 800b0e2:	2010      	movs	r0, #16
 800b0e4:	f7ff fff0 	bl	800b0c8 <malloc>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	6260      	str	r0, [r4, #36]	; 0x24
 800b0ec:	b920      	cbnz	r0, 800b0f8 <_Balloc+0x20>
 800b0ee:	4b18      	ldr	r3, [pc, #96]	; (800b150 <_Balloc+0x78>)
 800b0f0:	4818      	ldr	r0, [pc, #96]	; (800b154 <_Balloc+0x7c>)
 800b0f2:	2166      	movs	r1, #102	; 0x66
 800b0f4:	f000 fd94 	bl	800bc20 <__assert_func>
 800b0f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0fc:	6006      	str	r6, [r0, #0]
 800b0fe:	60c6      	str	r6, [r0, #12]
 800b100:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b102:	68f3      	ldr	r3, [r6, #12]
 800b104:	b183      	cbz	r3, 800b128 <_Balloc+0x50>
 800b106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b10e:	b9b8      	cbnz	r0, 800b140 <_Balloc+0x68>
 800b110:	2101      	movs	r1, #1
 800b112:	fa01 f605 	lsl.w	r6, r1, r5
 800b116:	1d72      	adds	r2, r6, #5
 800b118:	0092      	lsls	r2, r2, #2
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fb5a 	bl	800b7d4 <_calloc_r>
 800b120:	b160      	cbz	r0, 800b13c <_Balloc+0x64>
 800b122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b126:	e00e      	b.n	800b146 <_Balloc+0x6e>
 800b128:	2221      	movs	r2, #33	; 0x21
 800b12a:	2104      	movs	r1, #4
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 fb51 	bl	800b7d4 <_calloc_r>
 800b132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b134:	60f0      	str	r0, [r6, #12]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e4      	bne.n	800b106 <_Balloc+0x2e>
 800b13c:	2000      	movs	r0, #0
 800b13e:	bd70      	pop	{r4, r5, r6, pc}
 800b140:	6802      	ldr	r2, [r0, #0]
 800b142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b146:	2300      	movs	r3, #0
 800b148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b14c:	e7f7      	b.n	800b13e <_Balloc+0x66>
 800b14e:	bf00      	nop
 800b150:	0800c8f5 	.word	0x0800c8f5
 800b154:	0800c97c 	.word	0x0800c97c

0800b158 <_Bfree>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b15c:	4605      	mov	r5, r0
 800b15e:	460c      	mov	r4, r1
 800b160:	b976      	cbnz	r6, 800b180 <_Bfree+0x28>
 800b162:	2010      	movs	r0, #16
 800b164:	f7ff ffb0 	bl	800b0c8 <malloc>
 800b168:	4602      	mov	r2, r0
 800b16a:	6268      	str	r0, [r5, #36]	; 0x24
 800b16c:	b920      	cbnz	r0, 800b178 <_Bfree+0x20>
 800b16e:	4b09      	ldr	r3, [pc, #36]	; (800b194 <_Bfree+0x3c>)
 800b170:	4809      	ldr	r0, [pc, #36]	; (800b198 <_Bfree+0x40>)
 800b172:	218a      	movs	r1, #138	; 0x8a
 800b174:	f000 fd54 	bl	800bc20 <__assert_func>
 800b178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b17c:	6006      	str	r6, [r0, #0]
 800b17e:	60c6      	str	r6, [r0, #12]
 800b180:	b13c      	cbz	r4, 800b192 <_Bfree+0x3a>
 800b182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b184:	6862      	ldr	r2, [r4, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b18c:	6021      	str	r1, [r4, #0]
 800b18e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	0800c8f5 	.word	0x0800c8f5
 800b198:	0800c97c 	.word	0x0800c97c

0800b19c <__multadd>:
 800b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a0:	690e      	ldr	r6, [r1, #16]
 800b1a2:	4607      	mov	r7, r0
 800b1a4:	4698      	mov	r8, r3
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	f101 0014 	add.w	r0, r1, #20
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6805      	ldr	r5, [r0, #0]
 800b1b0:	b2a9      	uxth	r1, r5
 800b1b2:	fb02 8101 	mla	r1, r2, r1, r8
 800b1b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b1ba:	0c2d      	lsrs	r5, r5, #16
 800b1bc:	fb02 c505 	mla	r5, r2, r5, ip
 800b1c0:	b289      	uxth	r1, r1
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b1c8:	429e      	cmp	r6, r3
 800b1ca:	f840 1b04 	str.w	r1, [r0], #4
 800b1ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b1d2:	dcec      	bgt.n	800b1ae <__multadd+0x12>
 800b1d4:	f1b8 0f00 	cmp.w	r8, #0
 800b1d8:	d022      	beq.n	800b220 <__multadd+0x84>
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	42b3      	cmp	r3, r6
 800b1de:	dc19      	bgt.n	800b214 <__multadd+0x78>
 800b1e0:	6861      	ldr	r1, [r4, #4]
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	3101      	adds	r1, #1
 800b1e6:	f7ff ff77 	bl	800b0d8 <_Balloc>
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	b928      	cbnz	r0, 800b1fa <__multadd+0x5e>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <__multadd+0x8c>)
 800b1f2:	480e      	ldr	r0, [pc, #56]	; (800b22c <__multadd+0x90>)
 800b1f4:	21b5      	movs	r1, #181	; 0xb5
 800b1f6:	f000 fd13 	bl	800bc20 <__assert_func>
 800b1fa:	6922      	ldr	r2, [r4, #16]
 800b1fc:	3202      	adds	r2, #2
 800b1fe:	f104 010c 	add.w	r1, r4, #12
 800b202:	0092      	lsls	r2, r2, #2
 800b204:	300c      	adds	r0, #12
 800b206:	f7fe fc43 	bl	8009a90 <memcpy>
 800b20a:	4621      	mov	r1, r4
 800b20c:	4638      	mov	r0, r7
 800b20e:	f7ff ffa3 	bl	800b158 <_Bfree>
 800b212:	462c      	mov	r4, r5
 800b214:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b218:	3601      	adds	r6, #1
 800b21a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b21e:	6126      	str	r6, [r4, #16]
 800b220:	4620      	mov	r0, r4
 800b222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b226:	bf00      	nop
 800b228:	0800c96b 	.word	0x0800c96b
 800b22c:	0800c97c 	.word	0x0800c97c

0800b230 <__hi0bits>:
 800b230:	0c03      	lsrs	r3, r0, #16
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	b9d3      	cbnz	r3, 800b26c <__hi0bits+0x3c>
 800b236:	0400      	lsls	r0, r0, #16
 800b238:	2310      	movs	r3, #16
 800b23a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b23e:	bf04      	itt	eq
 800b240:	0200      	lsleq	r0, r0, #8
 800b242:	3308      	addeq	r3, #8
 800b244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b248:	bf04      	itt	eq
 800b24a:	0100      	lsleq	r0, r0, #4
 800b24c:	3304      	addeq	r3, #4
 800b24e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b252:	bf04      	itt	eq
 800b254:	0080      	lsleq	r0, r0, #2
 800b256:	3302      	addeq	r3, #2
 800b258:	2800      	cmp	r0, #0
 800b25a:	db05      	blt.n	800b268 <__hi0bits+0x38>
 800b25c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b260:	f103 0301 	add.w	r3, r3, #1
 800b264:	bf08      	it	eq
 800b266:	2320      	moveq	r3, #32
 800b268:	4618      	mov	r0, r3
 800b26a:	4770      	bx	lr
 800b26c:	2300      	movs	r3, #0
 800b26e:	e7e4      	b.n	800b23a <__hi0bits+0xa>

0800b270 <__lo0bits>:
 800b270:	6803      	ldr	r3, [r0, #0]
 800b272:	f013 0207 	ands.w	r2, r3, #7
 800b276:	4601      	mov	r1, r0
 800b278:	d00b      	beq.n	800b292 <__lo0bits+0x22>
 800b27a:	07da      	lsls	r2, r3, #31
 800b27c:	d424      	bmi.n	800b2c8 <__lo0bits+0x58>
 800b27e:	0798      	lsls	r0, r3, #30
 800b280:	bf49      	itett	mi
 800b282:	085b      	lsrmi	r3, r3, #1
 800b284:	089b      	lsrpl	r3, r3, #2
 800b286:	2001      	movmi	r0, #1
 800b288:	600b      	strmi	r3, [r1, #0]
 800b28a:	bf5c      	itt	pl
 800b28c:	600b      	strpl	r3, [r1, #0]
 800b28e:	2002      	movpl	r0, #2
 800b290:	4770      	bx	lr
 800b292:	b298      	uxth	r0, r3
 800b294:	b9b0      	cbnz	r0, 800b2c4 <__lo0bits+0x54>
 800b296:	0c1b      	lsrs	r3, r3, #16
 800b298:	2010      	movs	r0, #16
 800b29a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b29e:	bf04      	itt	eq
 800b2a0:	0a1b      	lsreq	r3, r3, #8
 800b2a2:	3008      	addeq	r0, #8
 800b2a4:	071a      	lsls	r2, r3, #28
 800b2a6:	bf04      	itt	eq
 800b2a8:	091b      	lsreq	r3, r3, #4
 800b2aa:	3004      	addeq	r0, #4
 800b2ac:	079a      	lsls	r2, r3, #30
 800b2ae:	bf04      	itt	eq
 800b2b0:	089b      	lsreq	r3, r3, #2
 800b2b2:	3002      	addeq	r0, #2
 800b2b4:	07da      	lsls	r2, r3, #31
 800b2b6:	d403      	bmi.n	800b2c0 <__lo0bits+0x50>
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	f100 0001 	add.w	r0, r0, #1
 800b2be:	d005      	beq.n	800b2cc <__lo0bits+0x5c>
 800b2c0:	600b      	str	r3, [r1, #0]
 800b2c2:	4770      	bx	lr
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	e7e8      	b.n	800b29a <__lo0bits+0x2a>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	4770      	bx	lr
 800b2cc:	2020      	movs	r0, #32
 800b2ce:	4770      	bx	lr

0800b2d0 <__i2b>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	f7ff feff 	bl	800b0d8 <_Balloc>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	b928      	cbnz	r0, 800b2ea <__i2b+0x1a>
 800b2de:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <__i2b+0x24>)
 800b2e0:	4805      	ldr	r0, [pc, #20]	; (800b2f8 <__i2b+0x28>)
 800b2e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b2e6:	f000 fc9b 	bl	800bc20 <__assert_func>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	6144      	str	r4, [r0, #20]
 800b2ee:	6103      	str	r3, [r0, #16]
 800b2f0:	bd10      	pop	{r4, pc}
 800b2f2:	bf00      	nop
 800b2f4:	0800c96b 	.word	0x0800c96b
 800b2f8:	0800c97c 	.word	0x0800c97c

0800b2fc <__multiply>:
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	4614      	mov	r4, r2
 800b302:	690a      	ldr	r2, [r1, #16]
 800b304:	6923      	ldr	r3, [r4, #16]
 800b306:	429a      	cmp	r2, r3
 800b308:	bfb8      	it	lt
 800b30a:	460b      	movlt	r3, r1
 800b30c:	460d      	mov	r5, r1
 800b30e:	bfbc      	itt	lt
 800b310:	4625      	movlt	r5, r4
 800b312:	461c      	movlt	r4, r3
 800b314:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b318:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b31c:	68ab      	ldr	r3, [r5, #8]
 800b31e:	6869      	ldr	r1, [r5, #4]
 800b320:	eb0a 0709 	add.w	r7, sl, r9
 800b324:	42bb      	cmp	r3, r7
 800b326:	b085      	sub	sp, #20
 800b328:	bfb8      	it	lt
 800b32a:	3101      	addlt	r1, #1
 800b32c:	f7ff fed4 	bl	800b0d8 <_Balloc>
 800b330:	b930      	cbnz	r0, 800b340 <__multiply+0x44>
 800b332:	4602      	mov	r2, r0
 800b334:	4b42      	ldr	r3, [pc, #264]	; (800b440 <__multiply+0x144>)
 800b336:	4843      	ldr	r0, [pc, #268]	; (800b444 <__multiply+0x148>)
 800b338:	f240 115d 	movw	r1, #349	; 0x15d
 800b33c:	f000 fc70 	bl	800bc20 <__assert_func>
 800b340:	f100 0614 	add.w	r6, r0, #20
 800b344:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b348:	4633      	mov	r3, r6
 800b34a:	2200      	movs	r2, #0
 800b34c:	4543      	cmp	r3, r8
 800b34e:	d31e      	bcc.n	800b38e <__multiply+0x92>
 800b350:	f105 0c14 	add.w	ip, r5, #20
 800b354:	f104 0314 	add.w	r3, r4, #20
 800b358:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b35c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b360:	9202      	str	r2, [sp, #8]
 800b362:	ebac 0205 	sub.w	r2, ip, r5
 800b366:	3a15      	subs	r2, #21
 800b368:	f022 0203 	bic.w	r2, r2, #3
 800b36c:	3204      	adds	r2, #4
 800b36e:	f105 0115 	add.w	r1, r5, #21
 800b372:	458c      	cmp	ip, r1
 800b374:	bf38      	it	cc
 800b376:	2204      	movcc	r2, #4
 800b378:	9201      	str	r2, [sp, #4]
 800b37a:	9a02      	ldr	r2, [sp, #8]
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d808      	bhi.n	800b394 <__multiply+0x98>
 800b382:	2f00      	cmp	r7, #0
 800b384:	dc55      	bgt.n	800b432 <__multiply+0x136>
 800b386:	6107      	str	r7, [r0, #16]
 800b388:	b005      	add	sp, #20
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	f843 2b04 	str.w	r2, [r3], #4
 800b392:	e7db      	b.n	800b34c <__multiply+0x50>
 800b394:	f8b3 a000 	ldrh.w	sl, [r3]
 800b398:	f1ba 0f00 	cmp.w	sl, #0
 800b39c:	d020      	beq.n	800b3e0 <__multiply+0xe4>
 800b39e:	f105 0e14 	add.w	lr, r5, #20
 800b3a2:	46b1      	mov	r9, r6
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b3aa:	f8d9 b000 	ldr.w	fp, [r9]
 800b3ae:	b2a1      	uxth	r1, r4
 800b3b0:	fa1f fb8b 	uxth.w	fp, fp
 800b3b4:	fb0a b101 	mla	r1, sl, r1, fp
 800b3b8:	4411      	add	r1, r2
 800b3ba:	f8d9 2000 	ldr.w	r2, [r9]
 800b3be:	0c24      	lsrs	r4, r4, #16
 800b3c0:	0c12      	lsrs	r2, r2, #16
 800b3c2:	fb0a 2404 	mla	r4, sl, r4, r2
 800b3c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b3ca:	b289      	uxth	r1, r1
 800b3cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b3d0:	45f4      	cmp	ip, lr
 800b3d2:	f849 1b04 	str.w	r1, [r9], #4
 800b3d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b3da:	d8e4      	bhi.n	800b3a6 <__multiply+0xaa>
 800b3dc:	9901      	ldr	r1, [sp, #4]
 800b3de:	5072      	str	r2, [r6, r1]
 800b3e0:	9a03      	ldr	r2, [sp, #12]
 800b3e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ec:	d01f      	beq.n	800b42e <__multiply+0x132>
 800b3ee:	6834      	ldr	r4, [r6, #0]
 800b3f0:	f105 0114 	add.w	r1, r5, #20
 800b3f4:	46b6      	mov	lr, r6
 800b3f6:	f04f 0a00 	mov.w	sl, #0
 800b3fa:	880a      	ldrh	r2, [r1, #0]
 800b3fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b400:	fb09 b202 	mla	r2, r9, r2, fp
 800b404:	4492      	add	sl, r2
 800b406:	b2a4      	uxth	r4, r4
 800b408:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b40c:	f84e 4b04 	str.w	r4, [lr], #4
 800b410:	f851 4b04 	ldr.w	r4, [r1], #4
 800b414:	f8be 2000 	ldrh.w	r2, [lr]
 800b418:	0c24      	lsrs	r4, r4, #16
 800b41a:	fb09 2404 	mla	r4, r9, r4, r2
 800b41e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b422:	458c      	cmp	ip, r1
 800b424:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b428:	d8e7      	bhi.n	800b3fa <__multiply+0xfe>
 800b42a:	9a01      	ldr	r2, [sp, #4]
 800b42c:	50b4      	str	r4, [r6, r2]
 800b42e:	3604      	adds	r6, #4
 800b430:	e7a3      	b.n	800b37a <__multiply+0x7e>
 800b432:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1a5      	bne.n	800b386 <__multiply+0x8a>
 800b43a:	3f01      	subs	r7, #1
 800b43c:	e7a1      	b.n	800b382 <__multiply+0x86>
 800b43e:	bf00      	nop
 800b440:	0800c96b 	.word	0x0800c96b
 800b444:	0800c97c 	.word	0x0800c97c

0800b448 <__pow5mult>:
 800b448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b44c:	4615      	mov	r5, r2
 800b44e:	f012 0203 	ands.w	r2, r2, #3
 800b452:	4606      	mov	r6, r0
 800b454:	460f      	mov	r7, r1
 800b456:	d007      	beq.n	800b468 <__pow5mult+0x20>
 800b458:	4c25      	ldr	r4, [pc, #148]	; (800b4f0 <__pow5mult+0xa8>)
 800b45a:	3a01      	subs	r2, #1
 800b45c:	2300      	movs	r3, #0
 800b45e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b462:	f7ff fe9b 	bl	800b19c <__multadd>
 800b466:	4607      	mov	r7, r0
 800b468:	10ad      	asrs	r5, r5, #2
 800b46a:	d03d      	beq.n	800b4e8 <__pow5mult+0xa0>
 800b46c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b46e:	b97c      	cbnz	r4, 800b490 <__pow5mult+0x48>
 800b470:	2010      	movs	r0, #16
 800b472:	f7ff fe29 	bl	800b0c8 <malloc>
 800b476:	4602      	mov	r2, r0
 800b478:	6270      	str	r0, [r6, #36]	; 0x24
 800b47a:	b928      	cbnz	r0, 800b488 <__pow5mult+0x40>
 800b47c:	4b1d      	ldr	r3, [pc, #116]	; (800b4f4 <__pow5mult+0xac>)
 800b47e:	481e      	ldr	r0, [pc, #120]	; (800b4f8 <__pow5mult+0xb0>)
 800b480:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b484:	f000 fbcc 	bl	800bc20 <__assert_func>
 800b488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b48c:	6004      	str	r4, [r0, #0]
 800b48e:	60c4      	str	r4, [r0, #12]
 800b490:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b498:	b94c      	cbnz	r4, 800b4ae <__pow5mult+0x66>
 800b49a:	f240 2171 	movw	r1, #625	; 0x271
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7ff ff16 	bl	800b2d0 <__i2b>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	6003      	str	r3, [r0, #0]
 800b4ae:	f04f 0900 	mov.w	r9, #0
 800b4b2:	07eb      	lsls	r3, r5, #31
 800b4b4:	d50a      	bpl.n	800b4cc <__pow5mult+0x84>
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ff1e 	bl	800b2fc <__multiply>
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	4680      	mov	r8, r0
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7ff fe47 	bl	800b158 <_Bfree>
 800b4ca:	4647      	mov	r7, r8
 800b4cc:	106d      	asrs	r5, r5, #1
 800b4ce:	d00b      	beq.n	800b4e8 <__pow5mult+0xa0>
 800b4d0:	6820      	ldr	r0, [r4, #0]
 800b4d2:	b938      	cbnz	r0, 800b4e4 <__pow5mult+0x9c>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7ff ff0f 	bl	800b2fc <__multiply>
 800b4de:	6020      	str	r0, [r4, #0]
 800b4e0:	f8c0 9000 	str.w	r9, [r0]
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	e7e4      	b.n	800b4b2 <__pow5mult+0x6a>
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	bf00      	nop
 800b4f0:	0800cad0 	.word	0x0800cad0
 800b4f4:	0800c8f5 	.word	0x0800c8f5
 800b4f8:	0800c97c 	.word	0x0800c97c

0800b4fc <__lshift>:
 800b4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b500:	460c      	mov	r4, r1
 800b502:	6849      	ldr	r1, [r1, #4]
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b50a:	68a3      	ldr	r3, [r4, #8]
 800b50c:	4607      	mov	r7, r0
 800b50e:	4691      	mov	r9, r2
 800b510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b514:	f108 0601 	add.w	r6, r8, #1
 800b518:	42b3      	cmp	r3, r6
 800b51a:	db0b      	blt.n	800b534 <__lshift+0x38>
 800b51c:	4638      	mov	r0, r7
 800b51e:	f7ff fddb 	bl	800b0d8 <_Balloc>
 800b522:	4605      	mov	r5, r0
 800b524:	b948      	cbnz	r0, 800b53a <__lshift+0x3e>
 800b526:	4602      	mov	r2, r0
 800b528:	4b28      	ldr	r3, [pc, #160]	; (800b5cc <__lshift+0xd0>)
 800b52a:	4829      	ldr	r0, [pc, #164]	; (800b5d0 <__lshift+0xd4>)
 800b52c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b530:	f000 fb76 	bl	800bc20 <__assert_func>
 800b534:	3101      	adds	r1, #1
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	e7ee      	b.n	800b518 <__lshift+0x1c>
 800b53a:	2300      	movs	r3, #0
 800b53c:	f100 0114 	add.w	r1, r0, #20
 800b540:	f100 0210 	add.w	r2, r0, #16
 800b544:	4618      	mov	r0, r3
 800b546:	4553      	cmp	r3, sl
 800b548:	db33      	blt.n	800b5b2 <__lshift+0xb6>
 800b54a:	6920      	ldr	r0, [r4, #16]
 800b54c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b550:	f104 0314 	add.w	r3, r4, #20
 800b554:	f019 091f 	ands.w	r9, r9, #31
 800b558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b55c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b560:	d02b      	beq.n	800b5ba <__lshift+0xbe>
 800b562:	f1c9 0e20 	rsb	lr, r9, #32
 800b566:	468a      	mov	sl, r1
 800b568:	2200      	movs	r2, #0
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	fa00 f009 	lsl.w	r0, r0, r9
 800b570:	4302      	orrs	r2, r0
 800b572:	f84a 2b04 	str.w	r2, [sl], #4
 800b576:	f853 2b04 	ldr.w	r2, [r3], #4
 800b57a:	459c      	cmp	ip, r3
 800b57c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b580:	d8f3      	bhi.n	800b56a <__lshift+0x6e>
 800b582:	ebac 0304 	sub.w	r3, ip, r4
 800b586:	3b15      	subs	r3, #21
 800b588:	f023 0303 	bic.w	r3, r3, #3
 800b58c:	3304      	adds	r3, #4
 800b58e:	f104 0015 	add.w	r0, r4, #21
 800b592:	4584      	cmp	ip, r0
 800b594:	bf38      	it	cc
 800b596:	2304      	movcc	r3, #4
 800b598:	50ca      	str	r2, [r1, r3]
 800b59a:	b10a      	cbz	r2, 800b5a0 <__lshift+0xa4>
 800b59c:	f108 0602 	add.w	r6, r8, #2
 800b5a0:	3e01      	subs	r6, #1
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	612e      	str	r6, [r5, #16]
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	f7ff fdd6 	bl	800b158 <_Bfree>
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	e7c5      	b.n	800b546 <__lshift+0x4a>
 800b5ba:	3904      	subs	r1, #4
 800b5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5c4:	459c      	cmp	ip, r3
 800b5c6:	d8f9      	bhi.n	800b5bc <__lshift+0xc0>
 800b5c8:	e7ea      	b.n	800b5a0 <__lshift+0xa4>
 800b5ca:	bf00      	nop
 800b5cc:	0800c96b 	.word	0x0800c96b
 800b5d0:	0800c97c 	.word	0x0800c97c

0800b5d4 <__mcmp>:
 800b5d4:	b530      	push	{r4, r5, lr}
 800b5d6:	6902      	ldr	r2, [r0, #16]
 800b5d8:	690c      	ldr	r4, [r1, #16]
 800b5da:	1b12      	subs	r2, r2, r4
 800b5dc:	d10e      	bne.n	800b5fc <__mcmp+0x28>
 800b5de:	f100 0314 	add.w	r3, r0, #20
 800b5e2:	3114      	adds	r1, #20
 800b5e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b5e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b5ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b5f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b5f4:	42a5      	cmp	r5, r4
 800b5f6:	d003      	beq.n	800b600 <__mcmp+0x2c>
 800b5f8:	d305      	bcc.n	800b606 <__mcmp+0x32>
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	bd30      	pop	{r4, r5, pc}
 800b600:	4283      	cmp	r3, r0
 800b602:	d3f3      	bcc.n	800b5ec <__mcmp+0x18>
 800b604:	e7fa      	b.n	800b5fc <__mcmp+0x28>
 800b606:	f04f 32ff 	mov.w	r2, #4294967295
 800b60a:	e7f7      	b.n	800b5fc <__mcmp+0x28>

0800b60c <__mdiff>:
 800b60c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b610:	460c      	mov	r4, r1
 800b612:	4606      	mov	r6, r0
 800b614:	4611      	mov	r1, r2
 800b616:	4620      	mov	r0, r4
 800b618:	4617      	mov	r7, r2
 800b61a:	f7ff ffdb 	bl	800b5d4 <__mcmp>
 800b61e:	1e05      	subs	r5, r0, #0
 800b620:	d110      	bne.n	800b644 <__mdiff+0x38>
 800b622:	4629      	mov	r1, r5
 800b624:	4630      	mov	r0, r6
 800b626:	f7ff fd57 	bl	800b0d8 <_Balloc>
 800b62a:	b930      	cbnz	r0, 800b63a <__mdiff+0x2e>
 800b62c:	4b39      	ldr	r3, [pc, #228]	; (800b714 <__mdiff+0x108>)
 800b62e:	4602      	mov	r2, r0
 800b630:	f240 2132 	movw	r1, #562	; 0x232
 800b634:	4838      	ldr	r0, [pc, #224]	; (800b718 <__mdiff+0x10c>)
 800b636:	f000 faf3 	bl	800bc20 <__assert_func>
 800b63a:	2301      	movs	r3, #1
 800b63c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b644:	bfa4      	itt	ge
 800b646:	463b      	movge	r3, r7
 800b648:	4627      	movge	r7, r4
 800b64a:	4630      	mov	r0, r6
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	bfa6      	itte	ge
 800b650:	461c      	movge	r4, r3
 800b652:	2500      	movge	r5, #0
 800b654:	2501      	movlt	r5, #1
 800b656:	f7ff fd3f 	bl	800b0d8 <_Balloc>
 800b65a:	b920      	cbnz	r0, 800b666 <__mdiff+0x5a>
 800b65c:	4b2d      	ldr	r3, [pc, #180]	; (800b714 <__mdiff+0x108>)
 800b65e:	4602      	mov	r2, r0
 800b660:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b664:	e7e6      	b.n	800b634 <__mdiff+0x28>
 800b666:	693e      	ldr	r6, [r7, #16]
 800b668:	60c5      	str	r5, [r0, #12]
 800b66a:	6925      	ldr	r5, [r4, #16]
 800b66c:	f107 0114 	add.w	r1, r7, #20
 800b670:	f104 0914 	add.w	r9, r4, #20
 800b674:	f100 0e14 	add.w	lr, r0, #20
 800b678:	f107 0210 	add.w	r2, r7, #16
 800b67c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b680:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b684:	46f2      	mov	sl, lr
 800b686:	2700      	movs	r7, #0
 800b688:	f859 3b04 	ldr.w	r3, [r9], #4
 800b68c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b690:	fa1f f883 	uxth.w	r8, r3
 800b694:	fa17 f78b 	uxtah	r7, r7, fp
 800b698:	0c1b      	lsrs	r3, r3, #16
 800b69a:	eba7 0808 	sub.w	r8, r7, r8
 800b69e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6a6:	fa1f f888 	uxth.w	r8, r8
 800b6aa:	141f      	asrs	r7, r3, #16
 800b6ac:	454d      	cmp	r5, r9
 800b6ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6b2:	f84a 3b04 	str.w	r3, [sl], #4
 800b6b6:	d8e7      	bhi.n	800b688 <__mdiff+0x7c>
 800b6b8:	1b2b      	subs	r3, r5, r4
 800b6ba:	3b15      	subs	r3, #21
 800b6bc:	f023 0303 	bic.w	r3, r3, #3
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	3415      	adds	r4, #21
 800b6c4:	42a5      	cmp	r5, r4
 800b6c6:	bf38      	it	cc
 800b6c8:	2304      	movcc	r3, #4
 800b6ca:	4419      	add	r1, r3
 800b6cc:	4473      	add	r3, lr
 800b6ce:	469e      	mov	lr, r3
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	4565      	cmp	r5, ip
 800b6d4:	d30e      	bcc.n	800b6f4 <__mdiff+0xe8>
 800b6d6:	f10c 0203 	add.w	r2, ip, #3
 800b6da:	1a52      	subs	r2, r2, r1
 800b6dc:	f022 0203 	bic.w	r2, r2, #3
 800b6e0:	3903      	subs	r1, #3
 800b6e2:	458c      	cmp	ip, r1
 800b6e4:	bf38      	it	cc
 800b6e6:	2200      	movcc	r2, #0
 800b6e8:	441a      	add	r2, r3
 800b6ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b6ee:	b17b      	cbz	r3, 800b710 <__mdiff+0x104>
 800b6f0:	6106      	str	r6, [r0, #16]
 800b6f2:	e7a5      	b.n	800b640 <__mdiff+0x34>
 800b6f4:	f855 8b04 	ldr.w	r8, [r5], #4
 800b6f8:	fa17 f488 	uxtah	r4, r7, r8
 800b6fc:	1422      	asrs	r2, r4, #16
 800b6fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b702:	b2a4      	uxth	r4, r4
 800b704:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b708:	f84e 4b04 	str.w	r4, [lr], #4
 800b70c:	1417      	asrs	r7, r2, #16
 800b70e:	e7e0      	b.n	800b6d2 <__mdiff+0xc6>
 800b710:	3e01      	subs	r6, #1
 800b712:	e7ea      	b.n	800b6ea <__mdiff+0xde>
 800b714:	0800c96b 	.word	0x0800c96b
 800b718:	0800c97c 	.word	0x0800c97c

0800b71c <__d2b>:
 800b71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b720:	4689      	mov	r9, r1
 800b722:	2101      	movs	r1, #1
 800b724:	ec57 6b10 	vmov	r6, r7, d0
 800b728:	4690      	mov	r8, r2
 800b72a:	f7ff fcd5 	bl	800b0d8 <_Balloc>
 800b72e:	4604      	mov	r4, r0
 800b730:	b930      	cbnz	r0, 800b740 <__d2b+0x24>
 800b732:	4602      	mov	r2, r0
 800b734:	4b25      	ldr	r3, [pc, #148]	; (800b7cc <__d2b+0xb0>)
 800b736:	4826      	ldr	r0, [pc, #152]	; (800b7d0 <__d2b+0xb4>)
 800b738:	f240 310a 	movw	r1, #778	; 0x30a
 800b73c:	f000 fa70 	bl	800bc20 <__assert_func>
 800b740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b744:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b748:	bb35      	cbnz	r5, 800b798 <__d2b+0x7c>
 800b74a:	2e00      	cmp	r6, #0
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	d028      	beq.n	800b7a2 <__d2b+0x86>
 800b750:	4668      	mov	r0, sp
 800b752:	9600      	str	r6, [sp, #0]
 800b754:	f7ff fd8c 	bl	800b270 <__lo0bits>
 800b758:	9900      	ldr	r1, [sp, #0]
 800b75a:	b300      	cbz	r0, 800b79e <__d2b+0x82>
 800b75c:	9a01      	ldr	r2, [sp, #4]
 800b75e:	f1c0 0320 	rsb	r3, r0, #32
 800b762:	fa02 f303 	lsl.w	r3, r2, r3
 800b766:	430b      	orrs	r3, r1
 800b768:	40c2      	lsrs	r2, r0
 800b76a:	6163      	str	r3, [r4, #20]
 800b76c:	9201      	str	r2, [sp, #4]
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	61a3      	str	r3, [r4, #24]
 800b772:	2b00      	cmp	r3, #0
 800b774:	bf14      	ite	ne
 800b776:	2202      	movne	r2, #2
 800b778:	2201      	moveq	r2, #1
 800b77a:	6122      	str	r2, [r4, #16]
 800b77c:	b1d5      	cbz	r5, 800b7b4 <__d2b+0x98>
 800b77e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b782:	4405      	add	r5, r0
 800b784:	f8c9 5000 	str.w	r5, [r9]
 800b788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b78c:	f8c8 0000 	str.w	r0, [r8]
 800b790:	4620      	mov	r0, r4
 800b792:	b003      	add	sp, #12
 800b794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b79c:	e7d5      	b.n	800b74a <__d2b+0x2e>
 800b79e:	6161      	str	r1, [r4, #20]
 800b7a0:	e7e5      	b.n	800b76e <__d2b+0x52>
 800b7a2:	a801      	add	r0, sp, #4
 800b7a4:	f7ff fd64 	bl	800b270 <__lo0bits>
 800b7a8:	9b01      	ldr	r3, [sp, #4]
 800b7aa:	6163      	str	r3, [r4, #20]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	6122      	str	r2, [r4, #16]
 800b7b0:	3020      	adds	r0, #32
 800b7b2:	e7e3      	b.n	800b77c <__d2b+0x60>
 800b7b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7bc:	f8c9 0000 	str.w	r0, [r9]
 800b7c0:	6918      	ldr	r0, [r3, #16]
 800b7c2:	f7ff fd35 	bl	800b230 <__hi0bits>
 800b7c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7ca:	e7df      	b.n	800b78c <__d2b+0x70>
 800b7cc:	0800c96b 	.word	0x0800c96b
 800b7d0:	0800c97c 	.word	0x0800c97c

0800b7d4 <_calloc_r>:
 800b7d4:	b513      	push	{r0, r1, r4, lr}
 800b7d6:	434a      	muls	r2, r1
 800b7d8:	4611      	mov	r1, r2
 800b7da:	9201      	str	r2, [sp, #4]
 800b7dc:	f000 f85a 	bl	800b894 <_malloc_r>
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	b118      	cbz	r0, 800b7ec <_calloc_r+0x18>
 800b7e4:	9a01      	ldr	r2, [sp, #4]
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	f7fe f960 	bl	8009aac <memset>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	b002      	add	sp, #8
 800b7f0:	bd10      	pop	{r4, pc}
	...

0800b7f4 <_free_r>:
 800b7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7f6:	2900      	cmp	r1, #0
 800b7f8:	d048      	beq.n	800b88c <_free_r+0x98>
 800b7fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7fe:	9001      	str	r0, [sp, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f1a1 0404 	sub.w	r4, r1, #4
 800b806:	bfb8      	it	lt
 800b808:	18e4      	addlt	r4, r4, r3
 800b80a:	f000 fa65 	bl	800bcd8 <__malloc_lock>
 800b80e:	4a20      	ldr	r2, [pc, #128]	; (800b890 <_free_r+0x9c>)
 800b810:	9801      	ldr	r0, [sp, #4]
 800b812:	6813      	ldr	r3, [r2, #0]
 800b814:	4615      	mov	r5, r2
 800b816:	b933      	cbnz	r3, 800b826 <_free_r+0x32>
 800b818:	6063      	str	r3, [r4, #4]
 800b81a:	6014      	str	r4, [r2, #0]
 800b81c:	b003      	add	sp, #12
 800b81e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b822:	f000 ba5f 	b.w	800bce4 <__malloc_unlock>
 800b826:	42a3      	cmp	r3, r4
 800b828:	d90b      	bls.n	800b842 <_free_r+0x4e>
 800b82a:	6821      	ldr	r1, [r4, #0]
 800b82c:	1862      	adds	r2, r4, r1
 800b82e:	4293      	cmp	r3, r2
 800b830:	bf04      	itt	eq
 800b832:	681a      	ldreq	r2, [r3, #0]
 800b834:	685b      	ldreq	r3, [r3, #4]
 800b836:	6063      	str	r3, [r4, #4]
 800b838:	bf04      	itt	eq
 800b83a:	1852      	addeq	r2, r2, r1
 800b83c:	6022      	streq	r2, [r4, #0]
 800b83e:	602c      	str	r4, [r5, #0]
 800b840:	e7ec      	b.n	800b81c <_free_r+0x28>
 800b842:	461a      	mov	r2, r3
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	b10b      	cbz	r3, 800b84c <_free_r+0x58>
 800b848:	42a3      	cmp	r3, r4
 800b84a:	d9fa      	bls.n	800b842 <_free_r+0x4e>
 800b84c:	6811      	ldr	r1, [r2, #0]
 800b84e:	1855      	adds	r5, r2, r1
 800b850:	42a5      	cmp	r5, r4
 800b852:	d10b      	bne.n	800b86c <_free_r+0x78>
 800b854:	6824      	ldr	r4, [r4, #0]
 800b856:	4421      	add	r1, r4
 800b858:	1854      	adds	r4, r2, r1
 800b85a:	42a3      	cmp	r3, r4
 800b85c:	6011      	str	r1, [r2, #0]
 800b85e:	d1dd      	bne.n	800b81c <_free_r+0x28>
 800b860:	681c      	ldr	r4, [r3, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	6053      	str	r3, [r2, #4]
 800b866:	4421      	add	r1, r4
 800b868:	6011      	str	r1, [r2, #0]
 800b86a:	e7d7      	b.n	800b81c <_free_r+0x28>
 800b86c:	d902      	bls.n	800b874 <_free_r+0x80>
 800b86e:	230c      	movs	r3, #12
 800b870:	6003      	str	r3, [r0, #0]
 800b872:	e7d3      	b.n	800b81c <_free_r+0x28>
 800b874:	6825      	ldr	r5, [r4, #0]
 800b876:	1961      	adds	r1, r4, r5
 800b878:	428b      	cmp	r3, r1
 800b87a:	bf04      	itt	eq
 800b87c:	6819      	ldreq	r1, [r3, #0]
 800b87e:	685b      	ldreq	r3, [r3, #4]
 800b880:	6063      	str	r3, [r4, #4]
 800b882:	bf04      	itt	eq
 800b884:	1949      	addeq	r1, r1, r5
 800b886:	6021      	streq	r1, [r4, #0]
 800b888:	6054      	str	r4, [r2, #4]
 800b88a:	e7c7      	b.n	800b81c <_free_r+0x28>
 800b88c:	b003      	add	sp, #12
 800b88e:	bd30      	pop	{r4, r5, pc}
 800b890:	200005c0 	.word	0x200005c0

0800b894 <_malloc_r>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	1ccd      	adds	r5, r1, #3
 800b898:	f025 0503 	bic.w	r5, r5, #3
 800b89c:	3508      	adds	r5, #8
 800b89e:	2d0c      	cmp	r5, #12
 800b8a0:	bf38      	it	cc
 800b8a2:	250c      	movcc	r5, #12
 800b8a4:	2d00      	cmp	r5, #0
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	db01      	blt.n	800b8ae <_malloc_r+0x1a>
 800b8aa:	42a9      	cmp	r1, r5
 800b8ac:	d903      	bls.n	800b8b6 <_malloc_r+0x22>
 800b8ae:	230c      	movs	r3, #12
 800b8b0:	6033      	str	r3, [r6, #0]
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b6:	f000 fa0f 	bl	800bcd8 <__malloc_lock>
 800b8ba:	4921      	ldr	r1, [pc, #132]	; (800b940 <_malloc_r+0xac>)
 800b8bc:	680a      	ldr	r2, [r1, #0]
 800b8be:	4614      	mov	r4, r2
 800b8c0:	b99c      	cbnz	r4, 800b8ea <_malloc_r+0x56>
 800b8c2:	4f20      	ldr	r7, [pc, #128]	; (800b944 <_malloc_r+0xb0>)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	b923      	cbnz	r3, 800b8d2 <_malloc_r+0x3e>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f000 f998 	bl	800bc00 <_sbrk_r>
 800b8d0:	6038      	str	r0, [r7, #0]
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f000 f993 	bl	800bc00 <_sbrk_r>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d123      	bne.n	800b926 <_malloc_r+0x92>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	6033      	str	r3, [r6, #0]
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	f000 f9fe 	bl	800bce4 <__malloc_unlock>
 800b8e8:	e7e3      	b.n	800b8b2 <_malloc_r+0x1e>
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	1b5b      	subs	r3, r3, r5
 800b8ee:	d417      	bmi.n	800b920 <_malloc_r+0x8c>
 800b8f0:	2b0b      	cmp	r3, #11
 800b8f2:	d903      	bls.n	800b8fc <_malloc_r+0x68>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	441c      	add	r4, r3
 800b8f8:	6025      	str	r5, [r4, #0]
 800b8fa:	e004      	b.n	800b906 <_malloc_r+0x72>
 800b8fc:	6863      	ldr	r3, [r4, #4]
 800b8fe:	42a2      	cmp	r2, r4
 800b900:	bf0c      	ite	eq
 800b902:	600b      	streq	r3, [r1, #0]
 800b904:	6053      	strne	r3, [r2, #4]
 800b906:	4630      	mov	r0, r6
 800b908:	f000 f9ec 	bl	800bce4 <__malloc_unlock>
 800b90c:	f104 000b 	add.w	r0, r4, #11
 800b910:	1d23      	adds	r3, r4, #4
 800b912:	f020 0007 	bic.w	r0, r0, #7
 800b916:	1ac2      	subs	r2, r0, r3
 800b918:	d0cc      	beq.n	800b8b4 <_malloc_r+0x20>
 800b91a:	1a1b      	subs	r3, r3, r0
 800b91c:	50a3      	str	r3, [r4, r2]
 800b91e:	e7c9      	b.n	800b8b4 <_malloc_r+0x20>
 800b920:	4622      	mov	r2, r4
 800b922:	6864      	ldr	r4, [r4, #4]
 800b924:	e7cc      	b.n	800b8c0 <_malloc_r+0x2c>
 800b926:	1cc4      	adds	r4, r0, #3
 800b928:	f024 0403 	bic.w	r4, r4, #3
 800b92c:	42a0      	cmp	r0, r4
 800b92e:	d0e3      	beq.n	800b8f8 <_malloc_r+0x64>
 800b930:	1a21      	subs	r1, r4, r0
 800b932:	4630      	mov	r0, r6
 800b934:	f000 f964 	bl	800bc00 <_sbrk_r>
 800b938:	3001      	adds	r0, #1
 800b93a:	d1dd      	bne.n	800b8f8 <_malloc_r+0x64>
 800b93c:	e7cf      	b.n	800b8de <_malloc_r+0x4a>
 800b93e:	bf00      	nop
 800b940:	200005c0 	.word	0x200005c0
 800b944:	200005c4 	.word	0x200005c4

0800b948 <__ssputs_r>:
 800b948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b94c:	688e      	ldr	r6, [r1, #8]
 800b94e:	429e      	cmp	r6, r3
 800b950:	4682      	mov	sl, r0
 800b952:	460c      	mov	r4, r1
 800b954:	4690      	mov	r8, r2
 800b956:	461f      	mov	r7, r3
 800b958:	d838      	bhi.n	800b9cc <__ssputs_r+0x84>
 800b95a:	898a      	ldrh	r2, [r1, #12]
 800b95c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b960:	d032      	beq.n	800b9c8 <__ssputs_r+0x80>
 800b962:	6825      	ldr	r5, [r4, #0]
 800b964:	6909      	ldr	r1, [r1, #16]
 800b966:	eba5 0901 	sub.w	r9, r5, r1
 800b96a:	6965      	ldr	r5, [r4, #20]
 800b96c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b970:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b974:	3301      	adds	r3, #1
 800b976:	444b      	add	r3, r9
 800b978:	106d      	asrs	r5, r5, #1
 800b97a:	429d      	cmp	r5, r3
 800b97c:	bf38      	it	cc
 800b97e:	461d      	movcc	r5, r3
 800b980:	0553      	lsls	r3, r2, #21
 800b982:	d531      	bpl.n	800b9e8 <__ssputs_r+0xa0>
 800b984:	4629      	mov	r1, r5
 800b986:	f7ff ff85 	bl	800b894 <_malloc_r>
 800b98a:	4606      	mov	r6, r0
 800b98c:	b950      	cbnz	r0, 800b9a4 <__ssputs_r+0x5c>
 800b98e:	230c      	movs	r3, #12
 800b990:	f8ca 3000 	str.w	r3, [sl]
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a4:	6921      	ldr	r1, [r4, #16]
 800b9a6:	464a      	mov	r2, r9
 800b9a8:	f7fe f872 	bl	8009a90 <memcpy>
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b6:	81a3      	strh	r3, [r4, #12]
 800b9b8:	6126      	str	r6, [r4, #16]
 800b9ba:	6165      	str	r5, [r4, #20]
 800b9bc:	444e      	add	r6, r9
 800b9be:	eba5 0509 	sub.w	r5, r5, r9
 800b9c2:	6026      	str	r6, [r4, #0]
 800b9c4:	60a5      	str	r5, [r4, #8]
 800b9c6:	463e      	mov	r6, r7
 800b9c8:	42be      	cmp	r6, r7
 800b9ca:	d900      	bls.n	800b9ce <__ssputs_r+0x86>
 800b9cc:	463e      	mov	r6, r7
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	6820      	ldr	r0, [r4, #0]
 800b9d2:	4641      	mov	r1, r8
 800b9d4:	f000 f966 	bl	800bca4 <memmove>
 800b9d8:	68a3      	ldr	r3, [r4, #8]
 800b9da:	6822      	ldr	r2, [r4, #0]
 800b9dc:	1b9b      	subs	r3, r3, r6
 800b9de:	4432      	add	r2, r6
 800b9e0:	60a3      	str	r3, [r4, #8]
 800b9e2:	6022      	str	r2, [r4, #0]
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e7db      	b.n	800b9a0 <__ssputs_r+0x58>
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	f000 f981 	bl	800bcf0 <_realloc_r>
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d1e1      	bne.n	800b9b8 <__ssputs_r+0x70>
 800b9f4:	6921      	ldr	r1, [r4, #16]
 800b9f6:	4650      	mov	r0, sl
 800b9f8:	f7ff fefc 	bl	800b7f4 <_free_r>
 800b9fc:	e7c7      	b.n	800b98e <__ssputs_r+0x46>
	...

0800ba00 <_svfiprintf_r>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4698      	mov	r8, r3
 800ba06:	898b      	ldrh	r3, [r1, #12]
 800ba08:	061b      	lsls	r3, r3, #24
 800ba0a:	b09d      	sub	sp, #116	; 0x74
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	4614      	mov	r4, r2
 800ba12:	d50e      	bpl.n	800ba32 <_svfiprintf_r+0x32>
 800ba14:	690b      	ldr	r3, [r1, #16]
 800ba16:	b963      	cbnz	r3, 800ba32 <_svfiprintf_r+0x32>
 800ba18:	2140      	movs	r1, #64	; 0x40
 800ba1a:	f7ff ff3b 	bl	800b894 <_malloc_r>
 800ba1e:	6028      	str	r0, [r5, #0]
 800ba20:	6128      	str	r0, [r5, #16]
 800ba22:	b920      	cbnz	r0, 800ba2e <_svfiprintf_r+0x2e>
 800ba24:	230c      	movs	r3, #12
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2c:	e0d1      	b.n	800bbd2 <_svfiprintf_r+0x1d2>
 800ba2e:	2340      	movs	r3, #64	; 0x40
 800ba30:	616b      	str	r3, [r5, #20]
 800ba32:	2300      	movs	r3, #0
 800ba34:	9309      	str	r3, [sp, #36]	; 0x24
 800ba36:	2320      	movs	r3, #32
 800ba38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba40:	2330      	movs	r3, #48	; 0x30
 800ba42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbec <_svfiprintf_r+0x1ec>
 800ba46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba4a:	f04f 0901 	mov.w	r9, #1
 800ba4e:	4623      	mov	r3, r4
 800ba50:	469a      	mov	sl, r3
 800ba52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba56:	b10a      	cbz	r2, 800ba5c <_svfiprintf_r+0x5c>
 800ba58:	2a25      	cmp	r2, #37	; 0x25
 800ba5a:	d1f9      	bne.n	800ba50 <_svfiprintf_r+0x50>
 800ba5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba60:	d00b      	beq.n	800ba7a <_svfiprintf_r+0x7a>
 800ba62:	465b      	mov	r3, fp
 800ba64:	4622      	mov	r2, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	4638      	mov	r0, r7
 800ba6a:	f7ff ff6d 	bl	800b948 <__ssputs_r>
 800ba6e:	3001      	adds	r0, #1
 800ba70:	f000 80aa 	beq.w	800bbc8 <_svfiprintf_r+0x1c8>
 800ba74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba76:	445a      	add	r2, fp
 800ba78:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 80a2 	beq.w	800bbc8 <_svfiprintf_r+0x1c8>
 800ba84:	2300      	movs	r3, #0
 800ba86:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba8e:	f10a 0a01 	add.w	sl, sl, #1
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	9307      	str	r3, [sp, #28]
 800ba96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba9c:	4654      	mov	r4, sl
 800ba9e:	2205      	movs	r2, #5
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	4851      	ldr	r0, [pc, #324]	; (800bbec <_svfiprintf_r+0x1ec>)
 800baa6:	f7f4 fbab 	bl	8000200 <memchr>
 800baaa:	9a04      	ldr	r2, [sp, #16]
 800baac:	b9d8      	cbnz	r0, 800bae6 <_svfiprintf_r+0xe6>
 800baae:	06d0      	lsls	r0, r2, #27
 800bab0:	bf44      	itt	mi
 800bab2:	2320      	movmi	r3, #32
 800bab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bab8:	0711      	lsls	r1, r2, #28
 800baba:	bf44      	itt	mi
 800babc:	232b      	movmi	r3, #43	; 0x2b
 800babe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac2:	f89a 3000 	ldrb.w	r3, [sl]
 800bac6:	2b2a      	cmp	r3, #42	; 0x2a
 800bac8:	d015      	beq.n	800baf6 <_svfiprintf_r+0xf6>
 800baca:	9a07      	ldr	r2, [sp, #28]
 800bacc:	4654      	mov	r4, sl
 800bace:	2000      	movs	r0, #0
 800bad0:	f04f 0c0a 	mov.w	ip, #10
 800bad4:	4621      	mov	r1, r4
 800bad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bada:	3b30      	subs	r3, #48	; 0x30
 800badc:	2b09      	cmp	r3, #9
 800bade:	d94e      	bls.n	800bb7e <_svfiprintf_r+0x17e>
 800bae0:	b1b0      	cbz	r0, 800bb10 <_svfiprintf_r+0x110>
 800bae2:	9207      	str	r2, [sp, #28]
 800bae4:	e014      	b.n	800bb10 <_svfiprintf_r+0x110>
 800bae6:	eba0 0308 	sub.w	r3, r0, r8
 800baea:	fa09 f303 	lsl.w	r3, r9, r3
 800baee:	4313      	orrs	r3, r2
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	46a2      	mov	sl, r4
 800baf4:	e7d2      	b.n	800ba9c <_svfiprintf_r+0x9c>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	1d19      	adds	r1, r3, #4
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	9103      	str	r1, [sp, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bfbb      	ittet	lt
 800bb02:	425b      	neglt	r3, r3
 800bb04:	f042 0202 	orrlt.w	r2, r2, #2
 800bb08:	9307      	strge	r3, [sp, #28]
 800bb0a:	9307      	strlt	r3, [sp, #28]
 800bb0c:	bfb8      	it	lt
 800bb0e:	9204      	strlt	r2, [sp, #16]
 800bb10:	7823      	ldrb	r3, [r4, #0]
 800bb12:	2b2e      	cmp	r3, #46	; 0x2e
 800bb14:	d10c      	bne.n	800bb30 <_svfiprintf_r+0x130>
 800bb16:	7863      	ldrb	r3, [r4, #1]
 800bb18:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1a:	d135      	bne.n	800bb88 <_svfiprintf_r+0x188>
 800bb1c:	9b03      	ldr	r3, [sp, #12]
 800bb1e:	1d1a      	adds	r2, r3, #4
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	9203      	str	r2, [sp, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bfb8      	it	lt
 800bb28:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb2c:	3402      	adds	r4, #2
 800bb2e:	9305      	str	r3, [sp, #20]
 800bb30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bbfc <_svfiprintf_r+0x1fc>
 800bb34:	7821      	ldrb	r1, [r4, #0]
 800bb36:	2203      	movs	r2, #3
 800bb38:	4650      	mov	r0, sl
 800bb3a:	f7f4 fb61 	bl	8000200 <memchr>
 800bb3e:	b140      	cbz	r0, 800bb52 <_svfiprintf_r+0x152>
 800bb40:	2340      	movs	r3, #64	; 0x40
 800bb42:	eba0 000a 	sub.w	r0, r0, sl
 800bb46:	fa03 f000 	lsl.w	r0, r3, r0
 800bb4a:	9b04      	ldr	r3, [sp, #16]
 800bb4c:	4303      	orrs	r3, r0
 800bb4e:	3401      	adds	r4, #1
 800bb50:	9304      	str	r3, [sp, #16]
 800bb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb56:	4826      	ldr	r0, [pc, #152]	; (800bbf0 <_svfiprintf_r+0x1f0>)
 800bb58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb5c:	2206      	movs	r2, #6
 800bb5e:	f7f4 fb4f 	bl	8000200 <memchr>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d038      	beq.n	800bbd8 <_svfiprintf_r+0x1d8>
 800bb66:	4b23      	ldr	r3, [pc, #140]	; (800bbf4 <_svfiprintf_r+0x1f4>)
 800bb68:	bb1b      	cbnz	r3, 800bbb2 <_svfiprintf_r+0x1b2>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	3307      	adds	r3, #7
 800bb6e:	f023 0307 	bic.w	r3, r3, #7
 800bb72:	3308      	adds	r3, #8
 800bb74:	9303      	str	r3, [sp, #12]
 800bb76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb78:	4433      	add	r3, r6
 800bb7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7c:	e767      	b.n	800ba4e <_svfiprintf_r+0x4e>
 800bb7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb82:	460c      	mov	r4, r1
 800bb84:	2001      	movs	r0, #1
 800bb86:	e7a5      	b.n	800bad4 <_svfiprintf_r+0xd4>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	3401      	adds	r4, #1
 800bb8c:	9305      	str	r3, [sp, #20]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	f04f 0c0a 	mov.w	ip, #10
 800bb94:	4620      	mov	r0, r4
 800bb96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9a:	3a30      	subs	r2, #48	; 0x30
 800bb9c:	2a09      	cmp	r2, #9
 800bb9e:	d903      	bls.n	800bba8 <_svfiprintf_r+0x1a8>
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0c5      	beq.n	800bb30 <_svfiprintf_r+0x130>
 800bba4:	9105      	str	r1, [sp, #20]
 800bba6:	e7c3      	b.n	800bb30 <_svfiprintf_r+0x130>
 800bba8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbac:	4604      	mov	r4, r0
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e7f0      	b.n	800bb94 <_svfiprintf_r+0x194>
 800bbb2:	ab03      	add	r3, sp, #12
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	4b0f      	ldr	r3, [pc, #60]	; (800bbf8 <_svfiprintf_r+0x1f8>)
 800bbba:	a904      	add	r1, sp, #16
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	f7fe f81d 	bl	8009bfc <_printf_float>
 800bbc2:	1c42      	adds	r2, r0, #1
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	d1d6      	bne.n	800bb76 <_svfiprintf_r+0x176>
 800bbc8:	89ab      	ldrh	r3, [r5, #12]
 800bbca:	065b      	lsls	r3, r3, #25
 800bbcc:	f53f af2c 	bmi.w	800ba28 <_svfiprintf_r+0x28>
 800bbd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd2:	b01d      	add	sp, #116	; 0x74
 800bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd8:	ab03      	add	r3, sp, #12
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	462a      	mov	r2, r5
 800bbde:	4b06      	ldr	r3, [pc, #24]	; (800bbf8 <_svfiprintf_r+0x1f8>)
 800bbe0:	a904      	add	r1, sp, #16
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f7fe faae 	bl	800a144 <_printf_i>
 800bbe8:	e7eb      	b.n	800bbc2 <_svfiprintf_r+0x1c2>
 800bbea:	bf00      	nop
 800bbec:	0800cadc 	.word	0x0800cadc
 800bbf0:	0800cae6 	.word	0x0800cae6
 800bbf4:	08009bfd 	.word	0x08009bfd
 800bbf8:	0800b949 	.word	0x0800b949
 800bbfc:	0800cae2 	.word	0x0800cae2

0800bc00 <_sbrk_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d06      	ldr	r5, [pc, #24]	; (800bc1c <_sbrk_r+0x1c>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	f7f5 fbec 	bl	80013e8 <_sbrk>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_sbrk_r+0x1a>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_sbrk_r+0x1a>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	20001604 	.word	0x20001604

0800bc20 <__assert_func>:
 800bc20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc22:	4614      	mov	r4, r2
 800bc24:	461a      	mov	r2, r3
 800bc26:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <__assert_func+0x2c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	68d8      	ldr	r0, [r3, #12]
 800bc2e:	b14c      	cbz	r4, 800bc44 <__assert_func+0x24>
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <__assert_func+0x30>)
 800bc32:	9100      	str	r1, [sp, #0]
 800bc34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc38:	4906      	ldr	r1, [pc, #24]	; (800bc54 <__assert_func+0x34>)
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	f000 f80e 	bl	800bc5c <fiprintf>
 800bc40:	f000 faa4 	bl	800c18c <abort>
 800bc44:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <__assert_func+0x38>)
 800bc46:	461c      	mov	r4, r3
 800bc48:	e7f3      	b.n	800bc32 <__assert_func+0x12>
 800bc4a:	bf00      	nop
 800bc4c:	20000190 	.word	0x20000190
 800bc50:	0800caed 	.word	0x0800caed
 800bc54:	0800cafa 	.word	0x0800cafa
 800bc58:	0800cb28 	.word	0x0800cb28

0800bc5c <fiprintf>:
 800bc5c:	b40e      	push	{r1, r2, r3}
 800bc5e:	b503      	push	{r0, r1, lr}
 800bc60:	4601      	mov	r1, r0
 800bc62:	ab03      	add	r3, sp, #12
 800bc64:	4805      	ldr	r0, [pc, #20]	; (800bc7c <fiprintf+0x20>)
 800bc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc6a:	6800      	ldr	r0, [r0, #0]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	f000 f88f 	bl	800bd90 <_vfiprintf_r>
 800bc72:	b002      	add	sp, #8
 800bc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc78:	b003      	add	sp, #12
 800bc7a:	4770      	bx	lr
 800bc7c:	20000190 	.word	0x20000190

0800bc80 <__ascii_mbtowc>:
 800bc80:	b082      	sub	sp, #8
 800bc82:	b901      	cbnz	r1, 800bc86 <__ascii_mbtowc+0x6>
 800bc84:	a901      	add	r1, sp, #4
 800bc86:	b142      	cbz	r2, 800bc9a <__ascii_mbtowc+0x1a>
 800bc88:	b14b      	cbz	r3, 800bc9e <__ascii_mbtowc+0x1e>
 800bc8a:	7813      	ldrb	r3, [r2, #0]
 800bc8c:	600b      	str	r3, [r1, #0]
 800bc8e:	7812      	ldrb	r2, [r2, #0]
 800bc90:	1e10      	subs	r0, r2, #0
 800bc92:	bf18      	it	ne
 800bc94:	2001      	movne	r0, #1
 800bc96:	b002      	add	sp, #8
 800bc98:	4770      	bx	lr
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	e7fb      	b.n	800bc96 <__ascii_mbtowc+0x16>
 800bc9e:	f06f 0001 	mvn.w	r0, #1
 800bca2:	e7f8      	b.n	800bc96 <__ascii_mbtowc+0x16>

0800bca4 <memmove>:
 800bca4:	4288      	cmp	r0, r1
 800bca6:	b510      	push	{r4, lr}
 800bca8:	eb01 0402 	add.w	r4, r1, r2
 800bcac:	d902      	bls.n	800bcb4 <memmove+0x10>
 800bcae:	4284      	cmp	r4, r0
 800bcb0:	4623      	mov	r3, r4
 800bcb2:	d807      	bhi.n	800bcc4 <memmove+0x20>
 800bcb4:	1e43      	subs	r3, r0, #1
 800bcb6:	42a1      	cmp	r1, r4
 800bcb8:	d008      	beq.n	800bccc <memmove+0x28>
 800bcba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcc2:	e7f8      	b.n	800bcb6 <memmove+0x12>
 800bcc4:	4402      	add	r2, r0
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	428a      	cmp	r2, r1
 800bcca:	d100      	bne.n	800bcce <memmove+0x2a>
 800bccc:	bd10      	pop	{r4, pc}
 800bcce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcd6:	e7f7      	b.n	800bcc8 <memmove+0x24>

0800bcd8 <__malloc_lock>:
 800bcd8:	4801      	ldr	r0, [pc, #4]	; (800bce0 <__malloc_lock+0x8>)
 800bcda:	f000 bc17 	b.w	800c50c <__retarget_lock_acquire_recursive>
 800bcde:	bf00      	nop
 800bce0:	2000160c 	.word	0x2000160c

0800bce4 <__malloc_unlock>:
 800bce4:	4801      	ldr	r0, [pc, #4]	; (800bcec <__malloc_unlock+0x8>)
 800bce6:	f000 bc12 	b.w	800c50e <__retarget_lock_release_recursive>
 800bcea:	bf00      	nop
 800bcec:	2000160c 	.word	0x2000160c

0800bcf0 <_realloc_r>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	4607      	mov	r7, r0
 800bcf4:	4614      	mov	r4, r2
 800bcf6:	460e      	mov	r6, r1
 800bcf8:	b921      	cbnz	r1, 800bd04 <_realloc_r+0x14>
 800bcfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcfe:	4611      	mov	r1, r2
 800bd00:	f7ff bdc8 	b.w	800b894 <_malloc_r>
 800bd04:	b922      	cbnz	r2, 800bd10 <_realloc_r+0x20>
 800bd06:	f7ff fd75 	bl	800b7f4 <_free_r>
 800bd0a:	4625      	mov	r5, r4
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd10:	f000 fc62 	bl	800c5d8 <_malloc_usable_size_r>
 800bd14:	42a0      	cmp	r0, r4
 800bd16:	d20f      	bcs.n	800bd38 <_realloc_r+0x48>
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	f7ff fdba 	bl	800b894 <_malloc_r>
 800bd20:	4605      	mov	r5, r0
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0f2      	beq.n	800bd0c <_realloc_r+0x1c>
 800bd26:	4631      	mov	r1, r6
 800bd28:	4622      	mov	r2, r4
 800bd2a:	f7fd feb1 	bl	8009a90 <memcpy>
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4638      	mov	r0, r7
 800bd32:	f7ff fd5f 	bl	800b7f4 <_free_r>
 800bd36:	e7e9      	b.n	800bd0c <_realloc_r+0x1c>
 800bd38:	4635      	mov	r5, r6
 800bd3a:	e7e7      	b.n	800bd0c <_realloc_r+0x1c>

0800bd3c <__sfputc_r>:
 800bd3c:	6893      	ldr	r3, [r2, #8]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	b410      	push	{r4}
 800bd44:	6093      	str	r3, [r2, #8]
 800bd46:	da08      	bge.n	800bd5a <__sfputc_r+0x1e>
 800bd48:	6994      	ldr	r4, [r2, #24]
 800bd4a:	42a3      	cmp	r3, r4
 800bd4c:	db01      	blt.n	800bd52 <__sfputc_r+0x16>
 800bd4e:	290a      	cmp	r1, #10
 800bd50:	d103      	bne.n	800bd5a <__sfputc_r+0x1e>
 800bd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd56:	f000 b94b 	b.w	800bff0 <__swbuf_r>
 800bd5a:	6813      	ldr	r3, [r2, #0]
 800bd5c:	1c58      	adds	r0, r3, #1
 800bd5e:	6010      	str	r0, [r2, #0]
 800bd60:	7019      	strb	r1, [r3, #0]
 800bd62:	4608      	mov	r0, r1
 800bd64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <__sfputs_r>:
 800bd6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	460f      	mov	r7, r1
 800bd70:	4614      	mov	r4, r2
 800bd72:	18d5      	adds	r5, r2, r3
 800bd74:	42ac      	cmp	r4, r5
 800bd76:	d101      	bne.n	800bd7c <__sfputs_r+0x12>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e007      	b.n	800bd8c <__sfputs_r+0x22>
 800bd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd80:	463a      	mov	r2, r7
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7ff ffda 	bl	800bd3c <__sfputc_r>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d1f3      	bne.n	800bd74 <__sfputs_r+0xa>
 800bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd90 <_vfiprintf_r>:
 800bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	460d      	mov	r5, r1
 800bd96:	b09d      	sub	sp, #116	; 0x74
 800bd98:	4614      	mov	r4, r2
 800bd9a:	4698      	mov	r8, r3
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	b118      	cbz	r0, 800bda8 <_vfiprintf_r+0x18>
 800bda0:	6983      	ldr	r3, [r0, #24]
 800bda2:	b90b      	cbnz	r3, 800bda8 <_vfiprintf_r+0x18>
 800bda4:	f000 fb14 	bl	800c3d0 <__sinit>
 800bda8:	4b89      	ldr	r3, [pc, #548]	; (800bfd0 <_vfiprintf_r+0x240>)
 800bdaa:	429d      	cmp	r5, r3
 800bdac:	d11b      	bne.n	800bde6 <_vfiprintf_r+0x56>
 800bdae:	6875      	ldr	r5, [r6, #4]
 800bdb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdb2:	07d9      	lsls	r1, r3, #31
 800bdb4:	d405      	bmi.n	800bdc2 <_vfiprintf_r+0x32>
 800bdb6:	89ab      	ldrh	r3, [r5, #12]
 800bdb8:	059a      	lsls	r2, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_vfiprintf_r+0x32>
 800bdbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdbe:	f000 fba5 	bl	800c50c <__retarget_lock_acquire_recursive>
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	071b      	lsls	r3, r3, #28
 800bdc6:	d501      	bpl.n	800bdcc <_vfiprintf_r+0x3c>
 800bdc8:	692b      	ldr	r3, [r5, #16]
 800bdca:	b9eb      	cbnz	r3, 800be08 <_vfiprintf_r+0x78>
 800bdcc:	4629      	mov	r1, r5
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f000 f96e 	bl	800c0b0 <__swsetup_r>
 800bdd4:	b1c0      	cbz	r0, 800be08 <_vfiprintf_r+0x78>
 800bdd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdd8:	07dc      	lsls	r4, r3, #31
 800bdda:	d50e      	bpl.n	800bdfa <_vfiprintf_r+0x6a>
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	b01d      	add	sp, #116	; 0x74
 800bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde6:	4b7b      	ldr	r3, [pc, #492]	; (800bfd4 <_vfiprintf_r+0x244>)
 800bde8:	429d      	cmp	r5, r3
 800bdea:	d101      	bne.n	800bdf0 <_vfiprintf_r+0x60>
 800bdec:	68b5      	ldr	r5, [r6, #8]
 800bdee:	e7df      	b.n	800bdb0 <_vfiprintf_r+0x20>
 800bdf0:	4b79      	ldr	r3, [pc, #484]	; (800bfd8 <_vfiprintf_r+0x248>)
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	bf08      	it	eq
 800bdf6:	68f5      	ldreq	r5, [r6, #12]
 800bdf8:	e7da      	b.n	800bdb0 <_vfiprintf_r+0x20>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	0598      	lsls	r0, r3, #22
 800bdfe:	d4ed      	bmi.n	800bddc <_vfiprintf_r+0x4c>
 800be00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be02:	f000 fb84 	bl	800c50e <__retarget_lock_release_recursive>
 800be06:	e7e9      	b.n	800bddc <_vfiprintf_r+0x4c>
 800be08:	2300      	movs	r3, #0
 800be0a:	9309      	str	r3, [sp, #36]	; 0x24
 800be0c:	2320      	movs	r3, #32
 800be0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be12:	f8cd 800c 	str.w	r8, [sp, #12]
 800be16:	2330      	movs	r3, #48	; 0x30
 800be18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bfdc <_vfiprintf_r+0x24c>
 800be1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be20:	f04f 0901 	mov.w	r9, #1
 800be24:	4623      	mov	r3, r4
 800be26:	469a      	mov	sl, r3
 800be28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be2c:	b10a      	cbz	r2, 800be32 <_vfiprintf_r+0xa2>
 800be2e:	2a25      	cmp	r2, #37	; 0x25
 800be30:	d1f9      	bne.n	800be26 <_vfiprintf_r+0x96>
 800be32:	ebba 0b04 	subs.w	fp, sl, r4
 800be36:	d00b      	beq.n	800be50 <_vfiprintf_r+0xc0>
 800be38:	465b      	mov	r3, fp
 800be3a:	4622      	mov	r2, r4
 800be3c:	4629      	mov	r1, r5
 800be3e:	4630      	mov	r0, r6
 800be40:	f7ff ff93 	bl	800bd6a <__sfputs_r>
 800be44:	3001      	adds	r0, #1
 800be46:	f000 80aa 	beq.w	800bf9e <_vfiprintf_r+0x20e>
 800be4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be4c:	445a      	add	r2, fp
 800be4e:	9209      	str	r2, [sp, #36]	; 0x24
 800be50:	f89a 3000 	ldrb.w	r3, [sl]
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 80a2 	beq.w	800bf9e <_vfiprintf_r+0x20e>
 800be5a:	2300      	movs	r3, #0
 800be5c:	f04f 32ff 	mov.w	r2, #4294967295
 800be60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be64:	f10a 0a01 	add.w	sl, sl, #1
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	9307      	str	r3, [sp, #28]
 800be6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be70:	931a      	str	r3, [sp, #104]	; 0x68
 800be72:	4654      	mov	r4, sl
 800be74:	2205      	movs	r2, #5
 800be76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be7a:	4858      	ldr	r0, [pc, #352]	; (800bfdc <_vfiprintf_r+0x24c>)
 800be7c:	f7f4 f9c0 	bl	8000200 <memchr>
 800be80:	9a04      	ldr	r2, [sp, #16]
 800be82:	b9d8      	cbnz	r0, 800bebc <_vfiprintf_r+0x12c>
 800be84:	06d1      	lsls	r1, r2, #27
 800be86:	bf44      	itt	mi
 800be88:	2320      	movmi	r3, #32
 800be8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be8e:	0713      	lsls	r3, r2, #28
 800be90:	bf44      	itt	mi
 800be92:	232b      	movmi	r3, #43	; 0x2b
 800be94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be98:	f89a 3000 	ldrb.w	r3, [sl]
 800be9c:	2b2a      	cmp	r3, #42	; 0x2a
 800be9e:	d015      	beq.n	800becc <_vfiprintf_r+0x13c>
 800bea0:	9a07      	ldr	r2, [sp, #28]
 800bea2:	4654      	mov	r4, sl
 800bea4:	2000      	movs	r0, #0
 800bea6:	f04f 0c0a 	mov.w	ip, #10
 800beaa:	4621      	mov	r1, r4
 800beac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800beb0:	3b30      	subs	r3, #48	; 0x30
 800beb2:	2b09      	cmp	r3, #9
 800beb4:	d94e      	bls.n	800bf54 <_vfiprintf_r+0x1c4>
 800beb6:	b1b0      	cbz	r0, 800bee6 <_vfiprintf_r+0x156>
 800beb8:	9207      	str	r2, [sp, #28]
 800beba:	e014      	b.n	800bee6 <_vfiprintf_r+0x156>
 800bebc:	eba0 0308 	sub.w	r3, r0, r8
 800bec0:	fa09 f303 	lsl.w	r3, r9, r3
 800bec4:	4313      	orrs	r3, r2
 800bec6:	9304      	str	r3, [sp, #16]
 800bec8:	46a2      	mov	sl, r4
 800beca:	e7d2      	b.n	800be72 <_vfiprintf_r+0xe2>
 800becc:	9b03      	ldr	r3, [sp, #12]
 800bece:	1d19      	adds	r1, r3, #4
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	9103      	str	r1, [sp, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	bfbb      	ittet	lt
 800bed8:	425b      	neglt	r3, r3
 800beda:	f042 0202 	orrlt.w	r2, r2, #2
 800bede:	9307      	strge	r3, [sp, #28]
 800bee0:	9307      	strlt	r3, [sp, #28]
 800bee2:	bfb8      	it	lt
 800bee4:	9204      	strlt	r2, [sp, #16]
 800bee6:	7823      	ldrb	r3, [r4, #0]
 800bee8:	2b2e      	cmp	r3, #46	; 0x2e
 800beea:	d10c      	bne.n	800bf06 <_vfiprintf_r+0x176>
 800beec:	7863      	ldrb	r3, [r4, #1]
 800beee:	2b2a      	cmp	r3, #42	; 0x2a
 800bef0:	d135      	bne.n	800bf5e <_vfiprintf_r+0x1ce>
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	1d1a      	adds	r2, r3, #4
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	9203      	str	r2, [sp, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	bfb8      	it	lt
 800befe:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf02:	3402      	adds	r4, #2
 800bf04:	9305      	str	r3, [sp, #20]
 800bf06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bfec <_vfiprintf_r+0x25c>
 800bf0a:	7821      	ldrb	r1, [r4, #0]
 800bf0c:	2203      	movs	r2, #3
 800bf0e:	4650      	mov	r0, sl
 800bf10:	f7f4 f976 	bl	8000200 <memchr>
 800bf14:	b140      	cbz	r0, 800bf28 <_vfiprintf_r+0x198>
 800bf16:	2340      	movs	r3, #64	; 0x40
 800bf18:	eba0 000a 	sub.w	r0, r0, sl
 800bf1c:	fa03 f000 	lsl.w	r0, r3, r0
 800bf20:	9b04      	ldr	r3, [sp, #16]
 800bf22:	4303      	orrs	r3, r0
 800bf24:	3401      	adds	r4, #1
 800bf26:	9304      	str	r3, [sp, #16]
 800bf28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf2c:	482c      	ldr	r0, [pc, #176]	; (800bfe0 <_vfiprintf_r+0x250>)
 800bf2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf32:	2206      	movs	r2, #6
 800bf34:	f7f4 f964 	bl	8000200 <memchr>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d03f      	beq.n	800bfbc <_vfiprintf_r+0x22c>
 800bf3c:	4b29      	ldr	r3, [pc, #164]	; (800bfe4 <_vfiprintf_r+0x254>)
 800bf3e:	bb1b      	cbnz	r3, 800bf88 <_vfiprintf_r+0x1f8>
 800bf40:	9b03      	ldr	r3, [sp, #12]
 800bf42:	3307      	adds	r3, #7
 800bf44:	f023 0307 	bic.w	r3, r3, #7
 800bf48:	3308      	adds	r3, #8
 800bf4a:	9303      	str	r3, [sp, #12]
 800bf4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf4e:	443b      	add	r3, r7
 800bf50:	9309      	str	r3, [sp, #36]	; 0x24
 800bf52:	e767      	b.n	800be24 <_vfiprintf_r+0x94>
 800bf54:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf58:	460c      	mov	r4, r1
 800bf5a:	2001      	movs	r0, #1
 800bf5c:	e7a5      	b.n	800beaa <_vfiprintf_r+0x11a>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	3401      	adds	r4, #1
 800bf62:	9305      	str	r3, [sp, #20]
 800bf64:	4619      	mov	r1, r3
 800bf66:	f04f 0c0a 	mov.w	ip, #10
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf70:	3a30      	subs	r2, #48	; 0x30
 800bf72:	2a09      	cmp	r2, #9
 800bf74:	d903      	bls.n	800bf7e <_vfiprintf_r+0x1ee>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d0c5      	beq.n	800bf06 <_vfiprintf_r+0x176>
 800bf7a:	9105      	str	r1, [sp, #20]
 800bf7c:	e7c3      	b.n	800bf06 <_vfiprintf_r+0x176>
 800bf7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf82:	4604      	mov	r4, r0
 800bf84:	2301      	movs	r3, #1
 800bf86:	e7f0      	b.n	800bf6a <_vfiprintf_r+0x1da>
 800bf88:	ab03      	add	r3, sp, #12
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	462a      	mov	r2, r5
 800bf8e:	4b16      	ldr	r3, [pc, #88]	; (800bfe8 <_vfiprintf_r+0x258>)
 800bf90:	a904      	add	r1, sp, #16
 800bf92:	4630      	mov	r0, r6
 800bf94:	f7fd fe32 	bl	8009bfc <_printf_float>
 800bf98:	4607      	mov	r7, r0
 800bf9a:	1c78      	adds	r0, r7, #1
 800bf9c:	d1d6      	bne.n	800bf4c <_vfiprintf_r+0x1bc>
 800bf9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfa0:	07d9      	lsls	r1, r3, #31
 800bfa2:	d405      	bmi.n	800bfb0 <_vfiprintf_r+0x220>
 800bfa4:	89ab      	ldrh	r3, [r5, #12]
 800bfa6:	059a      	lsls	r2, r3, #22
 800bfa8:	d402      	bmi.n	800bfb0 <_vfiprintf_r+0x220>
 800bfaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfac:	f000 faaf 	bl	800c50e <__retarget_lock_release_recursive>
 800bfb0:	89ab      	ldrh	r3, [r5, #12]
 800bfb2:	065b      	lsls	r3, r3, #25
 800bfb4:	f53f af12 	bmi.w	800bddc <_vfiprintf_r+0x4c>
 800bfb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfba:	e711      	b.n	800bde0 <_vfiprintf_r+0x50>
 800bfbc:	ab03      	add	r3, sp, #12
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	462a      	mov	r2, r5
 800bfc2:	4b09      	ldr	r3, [pc, #36]	; (800bfe8 <_vfiprintf_r+0x258>)
 800bfc4:	a904      	add	r1, sp, #16
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7fe f8bc 	bl	800a144 <_printf_i>
 800bfcc:	e7e4      	b.n	800bf98 <_vfiprintf_r+0x208>
 800bfce:	bf00      	nop
 800bfd0:	0800cc54 	.word	0x0800cc54
 800bfd4:	0800cc74 	.word	0x0800cc74
 800bfd8:	0800cc34 	.word	0x0800cc34
 800bfdc:	0800cadc 	.word	0x0800cadc
 800bfe0:	0800cae6 	.word	0x0800cae6
 800bfe4:	08009bfd 	.word	0x08009bfd
 800bfe8:	0800bd6b 	.word	0x0800bd6b
 800bfec:	0800cae2 	.word	0x0800cae2

0800bff0 <__swbuf_r>:
 800bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff2:	460e      	mov	r6, r1
 800bff4:	4614      	mov	r4, r2
 800bff6:	4605      	mov	r5, r0
 800bff8:	b118      	cbz	r0, 800c002 <__swbuf_r+0x12>
 800bffa:	6983      	ldr	r3, [r0, #24]
 800bffc:	b90b      	cbnz	r3, 800c002 <__swbuf_r+0x12>
 800bffe:	f000 f9e7 	bl	800c3d0 <__sinit>
 800c002:	4b21      	ldr	r3, [pc, #132]	; (800c088 <__swbuf_r+0x98>)
 800c004:	429c      	cmp	r4, r3
 800c006:	d12b      	bne.n	800c060 <__swbuf_r+0x70>
 800c008:	686c      	ldr	r4, [r5, #4]
 800c00a:	69a3      	ldr	r3, [r4, #24]
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	071a      	lsls	r2, r3, #28
 800c012:	d52f      	bpl.n	800c074 <__swbuf_r+0x84>
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	b36b      	cbz	r3, 800c074 <__swbuf_r+0x84>
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	6820      	ldr	r0, [r4, #0]
 800c01c:	1ac0      	subs	r0, r0, r3
 800c01e:	6963      	ldr	r3, [r4, #20]
 800c020:	b2f6      	uxtb	r6, r6
 800c022:	4283      	cmp	r3, r0
 800c024:	4637      	mov	r7, r6
 800c026:	dc04      	bgt.n	800c032 <__swbuf_r+0x42>
 800c028:	4621      	mov	r1, r4
 800c02a:	4628      	mov	r0, r5
 800c02c:	f000 f93c 	bl	800c2a8 <_fflush_r>
 800c030:	bb30      	cbnz	r0, 800c080 <__swbuf_r+0x90>
 800c032:	68a3      	ldr	r3, [r4, #8]
 800c034:	3b01      	subs	r3, #1
 800c036:	60a3      	str	r3, [r4, #8]
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	1c5a      	adds	r2, r3, #1
 800c03c:	6022      	str	r2, [r4, #0]
 800c03e:	701e      	strb	r6, [r3, #0]
 800c040:	6963      	ldr	r3, [r4, #20]
 800c042:	3001      	adds	r0, #1
 800c044:	4283      	cmp	r3, r0
 800c046:	d004      	beq.n	800c052 <__swbuf_r+0x62>
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	07db      	lsls	r3, r3, #31
 800c04c:	d506      	bpl.n	800c05c <__swbuf_r+0x6c>
 800c04e:	2e0a      	cmp	r6, #10
 800c050:	d104      	bne.n	800c05c <__swbuf_r+0x6c>
 800c052:	4621      	mov	r1, r4
 800c054:	4628      	mov	r0, r5
 800c056:	f000 f927 	bl	800c2a8 <_fflush_r>
 800c05a:	b988      	cbnz	r0, 800c080 <__swbuf_r+0x90>
 800c05c:	4638      	mov	r0, r7
 800c05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <__swbuf_r+0x9c>)
 800c062:	429c      	cmp	r4, r3
 800c064:	d101      	bne.n	800c06a <__swbuf_r+0x7a>
 800c066:	68ac      	ldr	r4, [r5, #8]
 800c068:	e7cf      	b.n	800c00a <__swbuf_r+0x1a>
 800c06a:	4b09      	ldr	r3, [pc, #36]	; (800c090 <__swbuf_r+0xa0>)
 800c06c:	429c      	cmp	r4, r3
 800c06e:	bf08      	it	eq
 800c070:	68ec      	ldreq	r4, [r5, #12]
 800c072:	e7ca      	b.n	800c00a <__swbuf_r+0x1a>
 800c074:	4621      	mov	r1, r4
 800c076:	4628      	mov	r0, r5
 800c078:	f000 f81a 	bl	800c0b0 <__swsetup_r>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d0cb      	beq.n	800c018 <__swbuf_r+0x28>
 800c080:	f04f 37ff 	mov.w	r7, #4294967295
 800c084:	e7ea      	b.n	800c05c <__swbuf_r+0x6c>
 800c086:	bf00      	nop
 800c088:	0800cc54 	.word	0x0800cc54
 800c08c:	0800cc74 	.word	0x0800cc74
 800c090:	0800cc34 	.word	0x0800cc34

0800c094 <__ascii_wctomb>:
 800c094:	b149      	cbz	r1, 800c0aa <__ascii_wctomb+0x16>
 800c096:	2aff      	cmp	r2, #255	; 0xff
 800c098:	bf85      	ittet	hi
 800c09a:	238a      	movhi	r3, #138	; 0x8a
 800c09c:	6003      	strhi	r3, [r0, #0]
 800c09e:	700a      	strbls	r2, [r1, #0]
 800c0a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0a4:	bf98      	it	ls
 800c0a6:	2001      	movls	r0, #1
 800c0a8:	4770      	bx	lr
 800c0aa:	4608      	mov	r0, r1
 800c0ac:	4770      	bx	lr
	...

0800c0b0 <__swsetup_r>:
 800c0b0:	4b32      	ldr	r3, [pc, #200]	; (800c17c <__swsetup_r+0xcc>)
 800c0b2:	b570      	push	{r4, r5, r6, lr}
 800c0b4:	681d      	ldr	r5, [r3, #0]
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	b125      	cbz	r5, 800c0c6 <__swsetup_r+0x16>
 800c0bc:	69ab      	ldr	r3, [r5, #24]
 800c0be:	b913      	cbnz	r3, 800c0c6 <__swsetup_r+0x16>
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 f985 	bl	800c3d0 <__sinit>
 800c0c6:	4b2e      	ldr	r3, [pc, #184]	; (800c180 <__swsetup_r+0xd0>)
 800c0c8:	429c      	cmp	r4, r3
 800c0ca:	d10f      	bne.n	800c0ec <__swsetup_r+0x3c>
 800c0cc:	686c      	ldr	r4, [r5, #4]
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0d4:	0719      	lsls	r1, r3, #28
 800c0d6:	d42c      	bmi.n	800c132 <__swsetup_r+0x82>
 800c0d8:	06dd      	lsls	r5, r3, #27
 800c0da:	d411      	bmi.n	800c100 <__swsetup_r+0x50>
 800c0dc:	2309      	movs	r3, #9
 800c0de:	6033      	str	r3, [r6, #0]
 800c0e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0e4:	81a3      	strh	r3, [r4, #12]
 800c0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ea:	e03e      	b.n	800c16a <__swsetup_r+0xba>
 800c0ec:	4b25      	ldr	r3, [pc, #148]	; (800c184 <__swsetup_r+0xd4>)
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	d101      	bne.n	800c0f6 <__swsetup_r+0x46>
 800c0f2:	68ac      	ldr	r4, [r5, #8]
 800c0f4:	e7eb      	b.n	800c0ce <__swsetup_r+0x1e>
 800c0f6:	4b24      	ldr	r3, [pc, #144]	; (800c188 <__swsetup_r+0xd8>)
 800c0f8:	429c      	cmp	r4, r3
 800c0fa:	bf08      	it	eq
 800c0fc:	68ec      	ldreq	r4, [r5, #12]
 800c0fe:	e7e6      	b.n	800c0ce <__swsetup_r+0x1e>
 800c100:	0758      	lsls	r0, r3, #29
 800c102:	d512      	bpl.n	800c12a <__swsetup_r+0x7a>
 800c104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c106:	b141      	cbz	r1, 800c11a <__swsetup_r+0x6a>
 800c108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c10c:	4299      	cmp	r1, r3
 800c10e:	d002      	beq.n	800c116 <__swsetup_r+0x66>
 800c110:	4630      	mov	r0, r6
 800c112:	f7ff fb6f 	bl	800b7f4 <_free_r>
 800c116:	2300      	movs	r3, #0
 800c118:	6363      	str	r3, [r4, #52]	; 0x34
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	2300      	movs	r3, #0
 800c124:	6063      	str	r3, [r4, #4]
 800c126:	6923      	ldr	r3, [r4, #16]
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	f043 0308 	orr.w	r3, r3, #8
 800c130:	81a3      	strh	r3, [r4, #12]
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	b94b      	cbnz	r3, 800c14a <__swsetup_r+0x9a>
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c140:	d003      	beq.n	800c14a <__swsetup_r+0x9a>
 800c142:	4621      	mov	r1, r4
 800c144:	4630      	mov	r0, r6
 800c146:	f000 fa07 	bl	800c558 <__smakebuf_r>
 800c14a:	89a0      	ldrh	r0, [r4, #12]
 800c14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c150:	f010 0301 	ands.w	r3, r0, #1
 800c154:	d00a      	beq.n	800c16c <__swsetup_r+0xbc>
 800c156:	2300      	movs	r3, #0
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	6963      	ldr	r3, [r4, #20]
 800c15c:	425b      	negs	r3, r3
 800c15e:	61a3      	str	r3, [r4, #24]
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	b943      	cbnz	r3, 800c176 <__swsetup_r+0xc6>
 800c164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c168:	d1ba      	bne.n	800c0e0 <__swsetup_r+0x30>
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
 800c16c:	0781      	lsls	r1, r0, #30
 800c16e:	bf58      	it	pl
 800c170:	6963      	ldrpl	r3, [r4, #20]
 800c172:	60a3      	str	r3, [r4, #8]
 800c174:	e7f4      	b.n	800c160 <__swsetup_r+0xb0>
 800c176:	2000      	movs	r0, #0
 800c178:	e7f7      	b.n	800c16a <__swsetup_r+0xba>
 800c17a:	bf00      	nop
 800c17c:	20000190 	.word	0x20000190
 800c180:	0800cc54 	.word	0x0800cc54
 800c184:	0800cc74 	.word	0x0800cc74
 800c188:	0800cc34 	.word	0x0800cc34

0800c18c <abort>:
 800c18c:	b508      	push	{r3, lr}
 800c18e:	2006      	movs	r0, #6
 800c190:	f000 fa52 	bl	800c638 <raise>
 800c194:	2001      	movs	r0, #1
 800c196:	f7f5 f8af 	bl	80012f8 <_exit>
	...

0800c19c <__sflush_r>:
 800c19c:	898a      	ldrh	r2, [r1, #12]
 800c19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	0710      	lsls	r0, r2, #28
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	d458      	bmi.n	800c25c <__sflush_r+0xc0>
 800c1aa:	684b      	ldr	r3, [r1, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dc05      	bgt.n	800c1bc <__sflush_r+0x20>
 800c1b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	dc02      	bgt.n	800c1bc <__sflush_r+0x20>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1be:	2e00      	cmp	r6, #0
 800c1c0:	d0f9      	beq.n	800c1b6 <__sflush_r+0x1a>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1c8:	682f      	ldr	r7, [r5, #0]
 800c1ca:	602b      	str	r3, [r5, #0]
 800c1cc:	d032      	beq.n	800c234 <__sflush_r+0x98>
 800c1ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	075a      	lsls	r2, r3, #29
 800c1d4:	d505      	bpl.n	800c1e2 <__sflush_r+0x46>
 800c1d6:	6863      	ldr	r3, [r4, #4]
 800c1d8:	1ac0      	subs	r0, r0, r3
 800c1da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1dc:	b10b      	cbz	r3, 800c1e2 <__sflush_r+0x46>
 800c1de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1e0:	1ac0      	subs	r0, r0, r3
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1e8:	6a21      	ldr	r1, [r4, #32]
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	47b0      	blx	r6
 800c1ee:	1c43      	adds	r3, r0, #1
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	d106      	bne.n	800c202 <__sflush_r+0x66>
 800c1f4:	6829      	ldr	r1, [r5, #0]
 800c1f6:	291d      	cmp	r1, #29
 800c1f8:	d82c      	bhi.n	800c254 <__sflush_r+0xb8>
 800c1fa:	4a2a      	ldr	r2, [pc, #168]	; (800c2a4 <__sflush_r+0x108>)
 800c1fc:	40ca      	lsrs	r2, r1
 800c1fe:	07d6      	lsls	r6, r2, #31
 800c200:	d528      	bpl.n	800c254 <__sflush_r+0xb8>
 800c202:	2200      	movs	r2, #0
 800c204:	6062      	str	r2, [r4, #4]
 800c206:	04d9      	lsls	r1, r3, #19
 800c208:	6922      	ldr	r2, [r4, #16]
 800c20a:	6022      	str	r2, [r4, #0]
 800c20c:	d504      	bpl.n	800c218 <__sflush_r+0x7c>
 800c20e:	1c42      	adds	r2, r0, #1
 800c210:	d101      	bne.n	800c216 <__sflush_r+0x7a>
 800c212:	682b      	ldr	r3, [r5, #0]
 800c214:	b903      	cbnz	r3, 800c218 <__sflush_r+0x7c>
 800c216:	6560      	str	r0, [r4, #84]	; 0x54
 800c218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c21a:	602f      	str	r7, [r5, #0]
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d0ca      	beq.n	800c1b6 <__sflush_r+0x1a>
 800c220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c224:	4299      	cmp	r1, r3
 800c226:	d002      	beq.n	800c22e <__sflush_r+0x92>
 800c228:	4628      	mov	r0, r5
 800c22a:	f7ff fae3 	bl	800b7f4 <_free_r>
 800c22e:	2000      	movs	r0, #0
 800c230:	6360      	str	r0, [r4, #52]	; 0x34
 800c232:	e7c1      	b.n	800c1b8 <__sflush_r+0x1c>
 800c234:	6a21      	ldr	r1, [r4, #32]
 800c236:	2301      	movs	r3, #1
 800c238:	4628      	mov	r0, r5
 800c23a:	47b0      	blx	r6
 800c23c:	1c41      	adds	r1, r0, #1
 800c23e:	d1c7      	bne.n	800c1d0 <__sflush_r+0x34>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0c4      	beq.n	800c1d0 <__sflush_r+0x34>
 800c246:	2b1d      	cmp	r3, #29
 800c248:	d001      	beq.n	800c24e <__sflush_r+0xb2>
 800c24a:	2b16      	cmp	r3, #22
 800c24c:	d101      	bne.n	800c252 <__sflush_r+0xb6>
 800c24e:	602f      	str	r7, [r5, #0]
 800c250:	e7b1      	b.n	800c1b6 <__sflush_r+0x1a>
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	e7ad      	b.n	800c1b8 <__sflush_r+0x1c>
 800c25c:	690f      	ldr	r7, [r1, #16]
 800c25e:	2f00      	cmp	r7, #0
 800c260:	d0a9      	beq.n	800c1b6 <__sflush_r+0x1a>
 800c262:	0793      	lsls	r3, r2, #30
 800c264:	680e      	ldr	r6, [r1, #0]
 800c266:	bf08      	it	eq
 800c268:	694b      	ldreq	r3, [r1, #20]
 800c26a:	600f      	str	r7, [r1, #0]
 800c26c:	bf18      	it	ne
 800c26e:	2300      	movne	r3, #0
 800c270:	eba6 0807 	sub.w	r8, r6, r7
 800c274:	608b      	str	r3, [r1, #8]
 800c276:	f1b8 0f00 	cmp.w	r8, #0
 800c27a:	dd9c      	ble.n	800c1b6 <__sflush_r+0x1a>
 800c27c:	6a21      	ldr	r1, [r4, #32]
 800c27e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c280:	4643      	mov	r3, r8
 800c282:	463a      	mov	r2, r7
 800c284:	4628      	mov	r0, r5
 800c286:	47b0      	blx	r6
 800c288:	2800      	cmp	r0, #0
 800c28a:	dc06      	bgt.n	800c29a <__sflush_r+0xfe>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e78e      	b.n	800c1b8 <__sflush_r+0x1c>
 800c29a:	4407      	add	r7, r0
 800c29c:	eba8 0800 	sub.w	r8, r8, r0
 800c2a0:	e7e9      	b.n	800c276 <__sflush_r+0xda>
 800c2a2:	bf00      	nop
 800c2a4:	20400001 	.word	0x20400001

0800c2a8 <_fflush_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	690b      	ldr	r3, [r1, #16]
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	b913      	cbnz	r3, 800c2b8 <_fflush_r+0x10>
 800c2b2:	2500      	movs	r5, #0
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	bd38      	pop	{r3, r4, r5, pc}
 800c2b8:	b118      	cbz	r0, 800c2c2 <_fflush_r+0x1a>
 800c2ba:	6983      	ldr	r3, [r0, #24]
 800c2bc:	b90b      	cbnz	r3, 800c2c2 <_fflush_r+0x1a>
 800c2be:	f000 f887 	bl	800c3d0 <__sinit>
 800c2c2:	4b14      	ldr	r3, [pc, #80]	; (800c314 <_fflush_r+0x6c>)
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	d11b      	bne.n	800c300 <_fflush_r+0x58>
 800c2c8:	686c      	ldr	r4, [r5, #4]
 800c2ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0ef      	beq.n	800c2b2 <_fflush_r+0xa>
 800c2d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2d4:	07d0      	lsls	r0, r2, #31
 800c2d6:	d404      	bmi.n	800c2e2 <_fflush_r+0x3a>
 800c2d8:	0599      	lsls	r1, r3, #22
 800c2da:	d402      	bmi.n	800c2e2 <_fflush_r+0x3a>
 800c2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2de:	f000 f915 	bl	800c50c <__retarget_lock_acquire_recursive>
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	f7ff ff59 	bl	800c19c <__sflush_r>
 800c2ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ec:	07da      	lsls	r2, r3, #31
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	d4e0      	bmi.n	800c2b4 <_fflush_r+0xc>
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	059b      	lsls	r3, r3, #22
 800c2f6:	d4dd      	bmi.n	800c2b4 <_fflush_r+0xc>
 800c2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2fa:	f000 f908 	bl	800c50e <__retarget_lock_release_recursive>
 800c2fe:	e7d9      	b.n	800c2b4 <_fflush_r+0xc>
 800c300:	4b05      	ldr	r3, [pc, #20]	; (800c318 <_fflush_r+0x70>)
 800c302:	429c      	cmp	r4, r3
 800c304:	d101      	bne.n	800c30a <_fflush_r+0x62>
 800c306:	68ac      	ldr	r4, [r5, #8]
 800c308:	e7df      	b.n	800c2ca <_fflush_r+0x22>
 800c30a:	4b04      	ldr	r3, [pc, #16]	; (800c31c <_fflush_r+0x74>)
 800c30c:	429c      	cmp	r4, r3
 800c30e:	bf08      	it	eq
 800c310:	68ec      	ldreq	r4, [r5, #12]
 800c312:	e7da      	b.n	800c2ca <_fflush_r+0x22>
 800c314:	0800cc54 	.word	0x0800cc54
 800c318:	0800cc74 	.word	0x0800cc74
 800c31c:	0800cc34 	.word	0x0800cc34

0800c320 <std>:
 800c320:	2300      	movs	r3, #0
 800c322:	b510      	push	{r4, lr}
 800c324:	4604      	mov	r4, r0
 800c326:	e9c0 3300 	strd	r3, r3, [r0]
 800c32a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c32e:	6083      	str	r3, [r0, #8]
 800c330:	8181      	strh	r1, [r0, #12]
 800c332:	6643      	str	r3, [r0, #100]	; 0x64
 800c334:	81c2      	strh	r2, [r0, #14]
 800c336:	6183      	str	r3, [r0, #24]
 800c338:	4619      	mov	r1, r3
 800c33a:	2208      	movs	r2, #8
 800c33c:	305c      	adds	r0, #92	; 0x5c
 800c33e:	f7fd fbb5 	bl	8009aac <memset>
 800c342:	4b05      	ldr	r3, [pc, #20]	; (800c358 <std+0x38>)
 800c344:	6263      	str	r3, [r4, #36]	; 0x24
 800c346:	4b05      	ldr	r3, [pc, #20]	; (800c35c <std+0x3c>)
 800c348:	62a3      	str	r3, [r4, #40]	; 0x28
 800c34a:	4b05      	ldr	r3, [pc, #20]	; (800c360 <std+0x40>)
 800c34c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c34e:	4b05      	ldr	r3, [pc, #20]	; (800c364 <std+0x44>)
 800c350:	6224      	str	r4, [r4, #32]
 800c352:	6323      	str	r3, [r4, #48]	; 0x30
 800c354:	bd10      	pop	{r4, pc}
 800c356:	bf00      	nop
 800c358:	0800c671 	.word	0x0800c671
 800c35c:	0800c693 	.word	0x0800c693
 800c360:	0800c6cb 	.word	0x0800c6cb
 800c364:	0800c6ef 	.word	0x0800c6ef

0800c368 <_cleanup_r>:
 800c368:	4901      	ldr	r1, [pc, #4]	; (800c370 <_cleanup_r+0x8>)
 800c36a:	f000 b8af 	b.w	800c4cc <_fwalk_reent>
 800c36e:	bf00      	nop
 800c370:	0800c2a9 	.word	0x0800c2a9

0800c374 <__sfmoreglue>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	1e4a      	subs	r2, r1, #1
 800c378:	2568      	movs	r5, #104	; 0x68
 800c37a:	4355      	muls	r5, r2
 800c37c:	460e      	mov	r6, r1
 800c37e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c382:	f7ff fa87 	bl	800b894 <_malloc_r>
 800c386:	4604      	mov	r4, r0
 800c388:	b140      	cbz	r0, 800c39c <__sfmoreglue+0x28>
 800c38a:	2100      	movs	r1, #0
 800c38c:	e9c0 1600 	strd	r1, r6, [r0]
 800c390:	300c      	adds	r0, #12
 800c392:	60a0      	str	r0, [r4, #8]
 800c394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c398:	f7fd fb88 	bl	8009aac <memset>
 800c39c:	4620      	mov	r0, r4
 800c39e:	bd70      	pop	{r4, r5, r6, pc}

0800c3a0 <__sfp_lock_acquire>:
 800c3a0:	4801      	ldr	r0, [pc, #4]	; (800c3a8 <__sfp_lock_acquire+0x8>)
 800c3a2:	f000 b8b3 	b.w	800c50c <__retarget_lock_acquire_recursive>
 800c3a6:	bf00      	nop
 800c3a8:	20001610 	.word	0x20001610

0800c3ac <__sfp_lock_release>:
 800c3ac:	4801      	ldr	r0, [pc, #4]	; (800c3b4 <__sfp_lock_release+0x8>)
 800c3ae:	f000 b8ae 	b.w	800c50e <__retarget_lock_release_recursive>
 800c3b2:	bf00      	nop
 800c3b4:	20001610 	.word	0x20001610

0800c3b8 <__sinit_lock_acquire>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	; (800c3c0 <__sinit_lock_acquire+0x8>)
 800c3ba:	f000 b8a7 	b.w	800c50c <__retarget_lock_acquire_recursive>
 800c3be:	bf00      	nop
 800c3c0:	2000160b 	.word	0x2000160b

0800c3c4 <__sinit_lock_release>:
 800c3c4:	4801      	ldr	r0, [pc, #4]	; (800c3cc <__sinit_lock_release+0x8>)
 800c3c6:	f000 b8a2 	b.w	800c50e <__retarget_lock_release_recursive>
 800c3ca:	bf00      	nop
 800c3cc:	2000160b 	.word	0x2000160b

0800c3d0 <__sinit>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	f7ff fff0 	bl	800c3b8 <__sinit_lock_acquire>
 800c3d8:	69a3      	ldr	r3, [r4, #24]
 800c3da:	b11b      	cbz	r3, 800c3e4 <__sinit+0x14>
 800c3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3e0:	f7ff bff0 	b.w	800c3c4 <__sinit_lock_release>
 800c3e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c3ea:	4b13      	ldr	r3, [pc, #76]	; (800c438 <__sinit+0x68>)
 800c3ec:	4a13      	ldr	r2, [pc, #76]	; (800c43c <__sinit+0x6c>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3f2:	42a3      	cmp	r3, r4
 800c3f4:	bf04      	itt	eq
 800c3f6:	2301      	moveq	r3, #1
 800c3f8:	61a3      	streq	r3, [r4, #24]
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 f820 	bl	800c440 <__sfp>
 800c400:	6060      	str	r0, [r4, #4]
 800c402:	4620      	mov	r0, r4
 800c404:	f000 f81c 	bl	800c440 <__sfp>
 800c408:	60a0      	str	r0, [r4, #8]
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 f818 	bl	800c440 <__sfp>
 800c410:	2200      	movs	r2, #0
 800c412:	60e0      	str	r0, [r4, #12]
 800c414:	2104      	movs	r1, #4
 800c416:	6860      	ldr	r0, [r4, #4]
 800c418:	f7ff ff82 	bl	800c320 <std>
 800c41c:	68a0      	ldr	r0, [r4, #8]
 800c41e:	2201      	movs	r2, #1
 800c420:	2109      	movs	r1, #9
 800c422:	f7ff ff7d 	bl	800c320 <std>
 800c426:	68e0      	ldr	r0, [r4, #12]
 800c428:	2202      	movs	r2, #2
 800c42a:	2112      	movs	r1, #18
 800c42c:	f7ff ff78 	bl	800c320 <std>
 800c430:	2301      	movs	r3, #1
 800c432:	61a3      	str	r3, [r4, #24]
 800c434:	e7d2      	b.n	800c3dc <__sinit+0xc>
 800c436:	bf00      	nop
 800c438:	0800c8b0 	.word	0x0800c8b0
 800c43c:	0800c369 	.word	0x0800c369

0800c440 <__sfp>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	4607      	mov	r7, r0
 800c444:	f7ff ffac 	bl	800c3a0 <__sfp_lock_acquire>
 800c448:	4b1e      	ldr	r3, [pc, #120]	; (800c4c4 <__sfp+0x84>)
 800c44a:	681e      	ldr	r6, [r3, #0]
 800c44c:	69b3      	ldr	r3, [r6, #24]
 800c44e:	b913      	cbnz	r3, 800c456 <__sfp+0x16>
 800c450:	4630      	mov	r0, r6
 800c452:	f7ff ffbd 	bl	800c3d0 <__sinit>
 800c456:	3648      	adds	r6, #72	; 0x48
 800c458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c45c:	3b01      	subs	r3, #1
 800c45e:	d503      	bpl.n	800c468 <__sfp+0x28>
 800c460:	6833      	ldr	r3, [r6, #0]
 800c462:	b30b      	cbz	r3, 800c4a8 <__sfp+0x68>
 800c464:	6836      	ldr	r6, [r6, #0]
 800c466:	e7f7      	b.n	800c458 <__sfp+0x18>
 800c468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c46c:	b9d5      	cbnz	r5, 800c4a4 <__sfp+0x64>
 800c46e:	4b16      	ldr	r3, [pc, #88]	; (800c4c8 <__sfp+0x88>)
 800c470:	60e3      	str	r3, [r4, #12]
 800c472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c476:	6665      	str	r5, [r4, #100]	; 0x64
 800c478:	f000 f847 	bl	800c50a <__retarget_lock_init_recursive>
 800c47c:	f7ff ff96 	bl	800c3ac <__sfp_lock_release>
 800c480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c488:	6025      	str	r5, [r4, #0]
 800c48a:	61a5      	str	r5, [r4, #24]
 800c48c:	2208      	movs	r2, #8
 800c48e:	4629      	mov	r1, r5
 800c490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c494:	f7fd fb0a 	bl	8009aac <memset>
 800c498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c49c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a4:	3468      	adds	r4, #104	; 0x68
 800c4a6:	e7d9      	b.n	800c45c <__sfp+0x1c>
 800c4a8:	2104      	movs	r1, #4
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f7ff ff62 	bl	800c374 <__sfmoreglue>
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	6030      	str	r0, [r6, #0]
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d1d5      	bne.n	800c464 <__sfp+0x24>
 800c4b8:	f7ff ff78 	bl	800c3ac <__sfp_lock_release>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	603b      	str	r3, [r7, #0]
 800c4c0:	e7ee      	b.n	800c4a0 <__sfp+0x60>
 800c4c2:	bf00      	nop
 800c4c4:	0800c8b0 	.word	0x0800c8b0
 800c4c8:	ffff0001 	.word	0xffff0001

0800c4cc <_fwalk_reent>:
 800c4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	4688      	mov	r8, r1
 800c4d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4d8:	2700      	movs	r7, #0
 800c4da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4de:	f1b9 0901 	subs.w	r9, r9, #1
 800c4e2:	d505      	bpl.n	800c4f0 <_fwalk_reent+0x24>
 800c4e4:	6824      	ldr	r4, [r4, #0]
 800c4e6:	2c00      	cmp	r4, #0
 800c4e8:	d1f7      	bne.n	800c4da <_fwalk_reent+0xe>
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f0:	89ab      	ldrh	r3, [r5, #12]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d907      	bls.n	800c506 <_fwalk_reent+0x3a>
 800c4f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	d003      	beq.n	800c506 <_fwalk_reent+0x3a>
 800c4fe:	4629      	mov	r1, r5
 800c500:	4630      	mov	r0, r6
 800c502:	47c0      	blx	r8
 800c504:	4307      	orrs	r7, r0
 800c506:	3568      	adds	r5, #104	; 0x68
 800c508:	e7e9      	b.n	800c4de <_fwalk_reent+0x12>

0800c50a <__retarget_lock_init_recursive>:
 800c50a:	4770      	bx	lr

0800c50c <__retarget_lock_acquire_recursive>:
 800c50c:	4770      	bx	lr

0800c50e <__retarget_lock_release_recursive>:
 800c50e:	4770      	bx	lr

0800c510 <__swhatbuf_r>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	460e      	mov	r6, r1
 800c514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c518:	2900      	cmp	r1, #0
 800c51a:	b096      	sub	sp, #88	; 0x58
 800c51c:	4614      	mov	r4, r2
 800c51e:	461d      	mov	r5, r3
 800c520:	da07      	bge.n	800c532 <__swhatbuf_r+0x22>
 800c522:	2300      	movs	r3, #0
 800c524:	602b      	str	r3, [r5, #0]
 800c526:	89b3      	ldrh	r3, [r6, #12]
 800c528:	061a      	lsls	r2, r3, #24
 800c52a:	d410      	bmi.n	800c54e <__swhatbuf_r+0x3e>
 800c52c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c530:	e00e      	b.n	800c550 <__swhatbuf_r+0x40>
 800c532:	466a      	mov	r2, sp
 800c534:	f000 f902 	bl	800c73c <_fstat_r>
 800c538:	2800      	cmp	r0, #0
 800c53a:	dbf2      	blt.n	800c522 <__swhatbuf_r+0x12>
 800c53c:	9a01      	ldr	r2, [sp, #4]
 800c53e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c546:	425a      	negs	r2, r3
 800c548:	415a      	adcs	r2, r3
 800c54a:	602a      	str	r2, [r5, #0]
 800c54c:	e7ee      	b.n	800c52c <__swhatbuf_r+0x1c>
 800c54e:	2340      	movs	r3, #64	; 0x40
 800c550:	2000      	movs	r0, #0
 800c552:	6023      	str	r3, [r4, #0]
 800c554:	b016      	add	sp, #88	; 0x58
 800c556:	bd70      	pop	{r4, r5, r6, pc}

0800c558 <__smakebuf_r>:
 800c558:	898b      	ldrh	r3, [r1, #12]
 800c55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c55c:	079d      	lsls	r5, r3, #30
 800c55e:	4606      	mov	r6, r0
 800c560:	460c      	mov	r4, r1
 800c562:	d507      	bpl.n	800c574 <__smakebuf_r+0x1c>
 800c564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	6123      	str	r3, [r4, #16]
 800c56c:	2301      	movs	r3, #1
 800c56e:	6163      	str	r3, [r4, #20]
 800c570:	b002      	add	sp, #8
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	ab01      	add	r3, sp, #4
 800c576:	466a      	mov	r2, sp
 800c578:	f7ff ffca 	bl	800c510 <__swhatbuf_r>
 800c57c:	9900      	ldr	r1, [sp, #0]
 800c57e:	4605      	mov	r5, r0
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff f987 	bl	800b894 <_malloc_r>
 800c586:	b948      	cbnz	r0, 800c59c <__smakebuf_r+0x44>
 800c588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c58c:	059a      	lsls	r2, r3, #22
 800c58e:	d4ef      	bmi.n	800c570 <__smakebuf_r+0x18>
 800c590:	f023 0303 	bic.w	r3, r3, #3
 800c594:	f043 0302 	orr.w	r3, r3, #2
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	e7e3      	b.n	800c564 <__smakebuf_r+0xc>
 800c59c:	4b0d      	ldr	r3, [pc, #52]	; (800c5d4 <__smakebuf_r+0x7c>)
 800c59e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	6020      	str	r0, [r4, #0]
 800c5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a8:	81a3      	strh	r3, [r4, #12]
 800c5aa:	9b00      	ldr	r3, [sp, #0]
 800c5ac:	6163      	str	r3, [r4, #20]
 800c5ae:	9b01      	ldr	r3, [sp, #4]
 800c5b0:	6120      	str	r0, [r4, #16]
 800c5b2:	b15b      	cbz	r3, 800c5cc <__smakebuf_r+0x74>
 800c5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f000 f8d1 	bl	800c760 <_isatty_r>
 800c5be:	b128      	cbz	r0, 800c5cc <__smakebuf_r+0x74>
 800c5c0:	89a3      	ldrh	r3, [r4, #12]
 800c5c2:	f023 0303 	bic.w	r3, r3, #3
 800c5c6:	f043 0301 	orr.w	r3, r3, #1
 800c5ca:	81a3      	strh	r3, [r4, #12]
 800c5cc:	89a0      	ldrh	r0, [r4, #12]
 800c5ce:	4305      	orrs	r5, r0
 800c5d0:	81a5      	strh	r5, [r4, #12]
 800c5d2:	e7cd      	b.n	800c570 <__smakebuf_r+0x18>
 800c5d4:	0800c369 	.word	0x0800c369

0800c5d8 <_malloc_usable_size_r>:
 800c5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5dc:	1f18      	subs	r0, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfbc      	itt	lt
 800c5e2:	580b      	ldrlt	r3, [r1, r0]
 800c5e4:	18c0      	addlt	r0, r0, r3
 800c5e6:	4770      	bx	lr

0800c5e8 <_raise_r>:
 800c5e8:	291f      	cmp	r1, #31
 800c5ea:	b538      	push	{r3, r4, r5, lr}
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	460d      	mov	r5, r1
 800c5f0:	d904      	bls.n	800c5fc <_raise_r+0x14>
 800c5f2:	2316      	movs	r3, #22
 800c5f4:	6003      	str	r3, [r0, #0]
 800c5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5fe:	b112      	cbz	r2, 800c606 <_raise_r+0x1e>
 800c600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c604:	b94b      	cbnz	r3, 800c61a <_raise_r+0x32>
 800c606:	4620      	mov	r0, r4
 800c608:	f000 f830 	bl	800c66c <_getpid_r>
 800c60c:	462a      	mov	r2, r5
 800c60e:	4601      	mov	r1, r0
 800c610:	4620      	mov	r0, r4
 800c612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c616:	f000 b817 	b.w	800c648 <_kill_r>
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d00a      	beq.n	800c634 <_raise_r+0x4c>
 800c61e:	1c59      	adds	r1, r3, #1
 800c620:	d103      	bne.n	800c62a <_raise_r+0x42>
 800c622:	2316      	movs	r3, #22
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	2001      	movs	r0, #1
 800c628:	e7e7      	b.n	800c5fa <_raise_r+0x12>
 800c62a:	2400      	movs	r4, #0
 800c62c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c630:	4628      	mov	r0, r5
 800c632:	4798      	blx	r3
 800c634:	2000      	movs	r0, #0
 800c636:	e7e0      	b.n	800c5fa <_raise_r+0x12>

0800c638 <raise>:
 800c638:	4b02      	ldr	r3, [pc, #8]	; (800c644 <raise+0xc>)
 800c63a:	4601      	mov	r1, r0
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	f7ff bfd3 	b.w	800c5e8 <_raise_r>
 800c642:	bf00      	nop
 800c644:	20000190 	.word	0x20000190

0800c648 <_kill_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4d07      	ldr	r5, [pc, #28]	; (800c668 <_kill_r+0x20>)
 800c64c:	2300      	movs	r3, #0
 800c64e:	4604      	mov	r4, r0
 800c650:	4608      	mov	r0, r1
 800c652:	4611      	mov	r1, r2
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	f7f4 fe3f 	bl	80012d8 <_kill>
 800c65a:	1c43      	adds	r3, r0, #1
 800c65c:	d102      	bne.n	800c664 <_kill_r+0x1c>
 800c65e:	682b      	ldr	r3, [r5, #0]
 800c660:	b103      	cbz	r3, 800c664 <_kill_r+0x1c>
 800c662:	6023      	str	r3, [r4, #0]
 800c664:	bd38      	pop	{r3, r4, r5, pc}
 800c666:	bf00      	nop
 800c668:	20001604 	.word	0x20001604

0800c66c <_getpid_r>:
 800c66c:	f7f4 be2c 	b.w	80012c8 <_getpid>

0800c670 <__sread>:
 800c670:	b510      	push	{r4, lr}
 800c672:	460c      	mov	r4, r1
 800c674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c678:	f000 f894 	bl	800c7a4 <_read_r>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	bfab      	itete	ge
 800c680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c682:	89a3      	ldrhlt	r3, [r4, #12]
 800c684:	181b      	addge	r3, r3, r0
 800c686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c68a:	bfac      	ite	ge
 800c68c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c68e:	81a3      	strhlt	r3, [r4, #12]
 800c690:	bd10      	pop	{r4, pc}

0800c692 <__swrite>:
 800c692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c696:	461f      	mov	r7, r3
 800c698:	898b      	ldrh	r3, [r1, #12]
 800c69a:	05db      	lsls	r3, r3, #23
 800c69c:	4605      	mov	r5, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	4616      	mov	r6, r2
 800c6a2:	d505      	bpl.n	800c6b0 <__swrite+0x1e>
 800c6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f000 f868 	bl	800c780 <_lseek_r>
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6ba:	81a3      	strh	r3, [r4, #12]
 800c6bc:	4632      	mov	r2, r6
 800c6be:	463b      	mov	r3, r7
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c6:	f000 b817 	b.w	800c6f8 <_write_r>

0800c6ca <__sseek>:
 800c6ca:	b510      	push	{r4, lr}
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d2:	f000 f855 	bl	800c780 <_lseek_r>
 800c6d6:	1c43      	adds	r3, r0, #1
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	bf15      	itete	ne
 800c6dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6e6:	81a3      	strheq	r3, [r4, #12]
 800c6e8:	bf18      	it	ne
 800c6ea:	81a3      	strhne	r3, [r4, #12]
 800c6ec:	bd10      	pop	{r4, pc}

0800c6ee <__sclose>:
 800c6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f2:	f000 b813 	b.w	800c71c <_close_r>
	...

0800c6f8 <_write_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4d07      	ldr	r5, [pc, #28]	; (800c718 <_write_r+0x20>)
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	4608      	mov	r0, r1
 800c700:	4611      	mov	r1, r2
 800c702:	2200      	movs	r2, #0
 800c704:	602a      	str	r2, [r5, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	f7f4 fe1d 	bl	8001346 <_write>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d102      	bne.n	800c716 <_write_r+0x1e>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	b103      	cbz	r3, 800c716 <_write_r+0x1e>
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	bd38      	pop	{r3, r4, r5, pc}
 800c718:	20001604 	.word	0x20001604

0800c71c <_close_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d06      	ldr	r5, [pc, #24]	; (800c738 <_close_r+0x1c>)
 800c720:	2300      	movs	r3, #0
 800c722:	4604      	mov	r4, r0
 800c724:	4608      	mov	r0, r1
 800c726:	602b      	str	r3, [r5, #0]
 800c728:	f7f4 fe29 	bl	800137e <_close>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	d102      	bne.n	800c736 <_close_r+0x1a>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	b103      	cbz	r3, 800c736 <_close_r+0x1a>
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	bd38      	pop	{r3, r4, r5, pc}
 800c738:	20001604 	.word	0x20001604

0800c73c <_fstat_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4d07      	ldr	r5, [pc, #28]	; (800c75c <_fstat_r+0x20>)
 800c740:	2300      	movs	r3, #0
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	f7f4 fe24 	bl	8001396 <_fstat>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	d102      	bne.n	800c758 <_fstat_r+0x1c>
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	b103      	cbz	r3, 800c758 <_fstat_r+0x1c>
 800c756:	6023      	str	r3, [r4, #0]
 800c758:	bd38      	pop	{r3, r4, r5, pc}
 800c75a:	bf00      	nop
 800c75c:	20001604 	.word	0x20001604

0800c760 <_isatty_r>:
 800c760:	b538      	push	{r3, r4, r5, lr}
 800c762:	4d06      	ldr	r5, [pc, #24]	; (800c77c <_isatty_r+0x1c>)
 800c764:	2300      	movs	r3, #0
 800c766:	4604      	mov	r4, r0
 800c768:	4608      	mov	r0, r1
 800c76a:	602b      	str	r3, [r5, #0]
 800c76c:	f7f4 fe23 	bl	80013b6 <_isatty>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d102      	bne.n	800c77a <_isatty_r+0x1a>
 800c774:	682b      	ldr	r3, [r5, #0]
 800c776:	b103      	cbz	r3, 800c77a <_isatty_r+0x1a>
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	20001604 	.word	0x20001604

0800c780 <_lseek_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d07      	ldr	r5, [pc, #28]	; (800c7a0 <_lseek_r+0x20>)
 800c784:	4604      	mov	r4, r0
 800c786:	4608      	mov	r0, r1
 800c788:	4611      	mov	r1, r2
 800c78a:	2200      	movs	r2, #0
 800c78c:	602a      	str	r2, [r5, #0]
 800c78e:	461a      	mov	r2, r3
 800c790:	f7f4 fe1c 	bl	80013cc <_lseek>
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d102      	bne.n	800c79e <_lseek_r+0x1e>
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	b103      	cbz	r3, 800c79e <_lseek_r+0x1e>
 800c79c:	6023      	str	r3, [r4, #0]
 800c79e:	bd38      	pop	{r3, r4, r5, pc}
 800c7a0:	20001604 	.word	0x20001604

0800c7a4 <_read_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4d07      	ldr	r5, [pc, #28]	; (800c7c4 <_read_r+0x20>)
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	4608      	mov	r0, r1
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	602a      	str	r2, [r5, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	f7f4 fdaa 	bl	800130c <_read>
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d102      	bne.n	800c7c2 <_read_r+0x1e>
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	b103      	cbz	r3, 800c7c2 <_read_r+0x1e>
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	20001604 	.word	0x20001604

0800c7c8 <_init>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	bf00      	nop
 800c7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ce:	bc08      	pop	{r3}
 800c7d0:	469e      	mov	lr, r3
 800c7d2:	4770      	bx	lr

0800c7d4 <_fini>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	bf00      	nop
 800c7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7da:	bc08      	pop	{r3}
 800c7dc:	469e      	mov	lr, r3
 800c7de:	4770      	bx	lr
